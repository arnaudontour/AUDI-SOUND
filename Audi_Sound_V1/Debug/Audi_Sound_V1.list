
Audi_Sound_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e2c  08005e2c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e2c  08005e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e34  08005e34  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e38  08005e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  2000006c  08005ea8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08005ea8  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c0a  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003223  00000000  00000000  00035ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  00038f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2e  00000000  00000000  0003a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002928d  00000000  00000000  0003b1ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a14e  00000000  00000000  0006447b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f95ef  00000000  00000000  0007e5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059a0  00000000  00000000  00177bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0017d558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d00 	.word	0x08005d00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005d00 	.word	0x08005d00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig;

    /**DAC Initialization
    */
  hdac1.Instance = DAC1;
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MX_DAC1_Init+0x58>)
 8000574:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <MX_DAC1_Init+0x5c>)
 8000576:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000578:	4812      	ldr	r0, [pc, #72]	; (80005c4 <MX_DAC1_Init+0x58>)
 800057a:	f000 ff86 	bl	800148a <HAL_DAC_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d003      	beq.n	800058c <MX_DAC1_Init+0x20>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000584:	2140      	movs	r1, #64	; 0x40
 8000586:	4811      	ldr	r0, [pc, #68]	; (80005cc <MX_DAC1_Init+0x60>)
 8000588:	f000 fbb2 	bl	8000cf0 <_Error_Handler>
  }

    /**DAC channel OUT1 config
    */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000590:	2304      	movs	r3, #4
 8000592:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	4619      	mov	r1, r3
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <MX_DAC1_Init+0x58>)
 80005a8:	f001 f8c8 	bl	800173c <HAL_DAC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d003      	beq.n	80005ba <MX_DAC1_Init+0x4e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80005b2:	214c      	movs	r1, #76	; 0x4c
 80005b4:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_DAC1_Init+0x60>)
 80005b6:	f000 fb9b 	bl	8000cf0 <_Error_Handler>
  }

}
 80005ba:	bf00      	nop
 80005bc:	3728      	adds	r7, #40	; 0x28
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000088 	.word	0x20000088
 80005c8:	40007400 	.word	0x40007400
 80005cc:	08005d18 	.word	0x08005d18

080005d0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(dacHandle->Instance==DAC1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a26      	ldr	r2, [pc, #152]	; (8000678 <HAL_DAC_MspInit+0xa8>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d145      	bne.n	800066e <HAL_DAC_MspInit+0x9e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <HAL_DAC_MspInit+0xac>)
 80005e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e6:	4a25      	ldr	r2, [pc, #148]	; (800067c <HAL_DAC_MspInit+0xac>)
 80005e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005ec:	6593      	str	r3, [r2, #88]	; 0x58
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <HAL_DAC_MspInit+0xac>)
 80005f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]

    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005fa:	2310      	movs	r3, #16
 80005fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fe:	2303      	movs	r3, #3
 8000600:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4619      	mov	r1, r3
 800060c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000610:	f001 ff7a 	bl	8002508 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <HAL_DAC_MspInit+0xb0>)
 8000616:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <HAL_DAC_MspInit+0xb4>)
 8000618:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <HAL_DAC_MspInit+0xb0>)
 800061c:	2206      	movs	r2, #6
 800061e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <HAL_DAC_MspInit+0xb0>)
 8000622:	2210      	movs	r2, #16
 8000624:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <HAL_DAC_MspInit+0xb0>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <HAL_DAC_MspInit+0xb0>)
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <HAL_DAC_MspInit+0xb0>)
 8000634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000638:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <HAL_DAC_MspInit+0xb0>)
 800063c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000640:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <HAL_DAC_MspInit+0xb0>)
 8000644:	2220      	movs	r2, #32
 8000646:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <HAL_DAC_MspInit+0xb0>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800064e:	480c      	ldr	r0, [pc, #48]	; (8000680 <HAL_DAC_MspInit+0xb0>)
 8000650:	f001 fd62 	bl	8002118 <HAL_DMA_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d003      	beq.n	8000662 <HAL_DAC_MspInit+0x92>
    {
      _Error_Handler(__FILE__, __LINE__);
 800065a:	2172      	movs	r1, #114	; 0x72
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <HAL_DAC_MspInit+0xb8>)
 800065e:	f000 fb47 	bl	8000cf0 <_Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a06      	ldr	r2, [pc, #24]	; (8000680 <HAL_DAC_MspInit+0xb0>)
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	4a05      	ldr	r2, [pc, #20]	; (8000680 <HAL_DAC_MspInit+0xb0>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800066e:	bf00      	nop
 8000670:	3720      	adds	r7, #32
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40007400 	.word	0x40007400
 800067c:	40021000 	.word	0x40021000
 8000680:	2000009c 	.word	0x2000009c
 8000684:	40020030 	.word	0x40020030
 8000688:	08005d18 	.word	0x08005d18

0800068c <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel0;
DMA_HandleTypeDef hdma_dfsdm1_flt0;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000690:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <MX_DFSDM1_Init+0xc4>)
 8000692:	4a30      	ldr	r2, [pc, #192]	; (8000754 <MX_DFSDM1_Init+0xc8>)
 8000694:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <MX_DFSDM1_Init+0xc4>)
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 800069c:	4b2c      	ldr	r3, [pc, #176]	; (8000750 <MX_DFSDM1_Init+0xc4>)
 800069e:	2201      	movs	r2, #1
 80006a0:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <MX_DFSDM1_Init+0xc4>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80006a8:	4b29      	ldr	r3, [pc, #164]	; (8000750 <MX_DFSDM1_Init+0xc4>)
 80006aa:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80006ae:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 32;
 80006b0:	4b27      	ldr	r3, [pc, #156]	; (8000750 <MX_DFSDM1_Init+0xc4>)
 80006b2:	2220      	movs	r2, #32
 80006b4:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80006b6:	4b26      	ldr	r3, [pc, #152]	; (8000750 <MX_DFSDM1_Init+0xc4>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80006bc:	4824      	ldr	r0, [pc, #144]	; (8000750 <MX_DFSDM1_Init+0xc4>)
 80006be:	f001 faaf 	bl	8001c20 <HAL_DFSDM_FilterInit>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d003      	beq.n	80006d0 <MX_DFSDM1_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 80006c8:	2143      	movs	r1, #67	; 0x43
 80006ca:	4823      	ldr	r0, [pc, #140]	; (8000758 <MX_DFSDM1_Init+0xcc>)
 80006cc:	f000 fb10 	bl	8000cf0 <_Error_Handler>
  }

  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <MX_DFSDM1_Init+0xd0>)
 80006d2:	4a23      	ldr	r2, [pc, #140]	; (8000760 <MX_DFSDM1_Init+0xd4>)
 80006d4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_DFSDM1_Init+0xd0>)
 80006d8:	2201      	movs	r2, #1
 80006da:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <MX_DFSDM1_Init+0xd0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 17;
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_DFSDM1_Init+0xd0>)
 80006e4:	2211      	movs	r2, #17
 80006e6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_DFSDM1_Init+0xd0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_DFSDM1_Init+0xd0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_DFSDM1_Init+0xd0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_DFSDM1_Init+0xd0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_DFSDM1_Init+0xd0>)
 8000702:	2204      	movs	r2, #4
 8000704:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_DFSDM1_Init+0xd0>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 10;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_DFSDM1_Init+0xd0>)
 800070e:	220a      	movs	r2, #10
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_DFSDM1_Init+0xd0>)
 8000714:	2200      	movs	r2, #0
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x02;
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_DFSDM1_Init+0xd0>)
 800071a:	2202      	movs	r2, #2
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800071e:	480f      	ldr	r0, [pc, #60]	; (800075c <MX_DFSDM1_Init+0xd0>)
 8000720:	f001 f9be 	bl	8001aa0 <HAL_DFSDM_ChannelInit>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d003      	beq.n	8000732 <MX_DFSDM1_Init+0xa6>
  {
    _Error_Handler(__FILE__, __LINE__);
 800072a:	2155      	movs	r1, #85	; 0x55
 800072c:	480a      	ldr	r0, [pc, #40]	; (8000758 <MX_DFSDM1_Init+0xcc>)
 800072e:	f000 fadf 	bl	8000cf0 <_Error_Handler>
  }

  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000732:	2201      	movs	r2, #1
 8000734:	2101      	movs	r1, #1
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <MX_DFSDM1_Init+0xc4>)
 8000738:	f001 fb4c 	bl	8001dd4 <HAL_DFSDM_FilterConfigRegChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d003      	beq.n	800074a <MX_DFSDM1_Init+0xbe>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000742:	215a      	movs	r1, #90	; 0x5a
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_DFSDM1_Init+0xcc>)
 8000746:	f000 fad3 	bl	8000cf0 <_Error_Handler>
  }

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000e4 	.word	0x200000e4
 8000754:	40016100 	.word	0x40016100
 8000758:	08005d2c 	.word	0x08005d2c
 800075c:	20000138 	.word	0x20000138
 8000760:	40016000 	.word	0x40016000

08000764 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 800076c:	4b3d      	ldr	r3, [pc, #244]	; (8000864 <HAL_DFSDM_FilterMspInit+0x100>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d139      	bne.n	80007e8 <HAL_DFSDM_FilterMspInit+0x84>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000774:	4b3c      	ldr	r3, [pc, #240]	; (8000868 <HAL_DFSDM_FilterMspInit+0x104>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	3301      	adds	r3, #1
 800077a:	4a3b      	ldr	r2, [pc, #236]	; (8000868 <HAL_DFSDM_FilterMspInit+0x104>)
 800077c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800077e:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <HAL_DFSDM_FilterMspInit+0x104>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10b      	bne.n	800079e <HAL_DFSDM_FilterMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <HAL_DFSDM_FilterMspInit+0x108>)
 8000788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078a:	4a38      	ldr	r2, [pc, #224]	; (800086c <HAL_DFSDM_FilterMspInit+0x108>)
 800078c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000790:	6613      	str	r3, [r2, #96]	; 0x60
 8000792:	4b36      	ldr	r3, [pc, #216]	; (800086c <HAL_DFSDM_FilterMspInit+0x108>)
 8000794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]

    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800079e:	2304      	movs	r3, #4
 80007a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80007ae:	2306      	movs	r3, #6
 80007b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4619      	mov	r1, r3
 80007b8:	482d      	ldr	r0, [pc, #180]	; (8000870 <HAL_DFSDM_FilterMspInit+0x10c>)
 80007ba:	f001 fea5 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007be:	2302      	movs	r3, #2
 80007c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80007ce:	2306      	movs	r3, #6
 80007d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	4826      	ldr	r0, [pc, #152]	; (8000874 <HAL_DFSDM_FilterMspInit+0x110>)
 80007da:	f001 fe95 	bl	8002508 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <HAL_DFSDM_FilterMspInit+0x100>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <HAL_DFSDM_FilterMspInit+0x100>)
 80007e6:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a22      	ldr	r2, [pc, #136]	; (8000878 <HAL_DFSDM_FilterMspInit+0x114>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d133      	bne.n	800085a <HAL_DFSDM_FilterMspInit+0xf6>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <HAL_DFSDM_FilterMspInit+0x11c>)
 80007f6:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 80007f8:	4b20      	ldr	r3, [pc, #128]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 8000812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000816:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 800081a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800081e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 8000822:	2220      	movs	r2, #32
 8000824:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 8000828:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800082c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800082e:	4813      	ldr	r0, [pc, #76]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 8000830:	f001 fc72 	bl	8002118 <HAL_DMA_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <HAL_DFSDM_FilterMspInit+0xde>
    {
      _Error_Handler(__FILE__, __LINE__);
 800083a:	2198      	movs	r1, #152	; 0x98
 800083c:	4811      	ldr	r0, [pc, #68]	; (8000884 <HAL_DFSDM_FilterMspInit+0x120>)
 800083e:	f000 fa57 	bl	8000cf0 <_Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
 8000848:	4a0c      	ldr	r2, [pc, #48]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a0a      	ldr	r2, [pc, #40]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 8000852:	629a      	str	r2, [r3, #40]	; 0x28
 8000854:	4a09      	ldr	r2, [pc, #36]	; (800087c <HAL_DFSDM_FilterMspInit+0x118>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800085a:	bf00      	nop
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001bc 	.word	0x200001bc
 8000868:	200001b8 	.word	0x200001b8
 800086c:	40021000 	.word	0x40021000
 8000870:	48000800 	.word	0x48000800
 8000874:	48000400 	.word	0x48000400
 8000878:	40016100 	.word	0x40016100
 800087c:	20000170 	.word	0x20000170
 8000880:	40020044 	.word	0x40020044
 8000884:	08005d2c 	.word	0x08005d2c

08000888 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(DFSDM1_Init == 0)
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d139      	bne.n	800090c <HAL_DFSDM_ChannelMspInit+0x84>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <HAL_DFSDM_ChannelMspInit+0x90>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a1e      	ldr	r2, [pc, #120]	; (8000918 <HAL_DFSDM_ChannelMspInit+0x90>)
 80008a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <HAL_DFSDM_ChannelMspInit+0x90>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d10b      	bne.n	80008c2 <HAL_DFSDM_ChannelMspInit+0x3a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <HAL_DFSDM_ChannelMspInit+0x94>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	4a1b      	ldr	r2, [pc, #108]	; (800091c <HAL_DFSDM_ChannelMspInit+0x94>)
 80008b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008b4:	6613      	str	r3, [r2, #96]	; 0x60
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <HAL_DFSDM_ChannelMspInit+0x94>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]

    /**DFSDM1 GPIO Configuration
    PC2     ------> DFSDM1_CKOUT
    PB1     ------> DFSDM1_DATIN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008c2:	2304      	movs	r3, #4
 80008c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80008d2:	2306      	movs	r3, #6
 80008d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	4619      	mov	r1, r3
 80008dc:	4810      	ldr	r0, [pc, #64]	; (8000920 <HAL_DFSDM_ChannelMspInit+0x98>)
 80008de:	f001 fe13 	bl	8002508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008e2:	2302      	movs	r3, #2
 80008e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80008f2:	2306      	movs	r3, #6
 80008f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	4809      	ldr	r0, [pc, #36]	; (8000924 <HAL_DFSDM_ChannelMspInit+0x9c>)
 80008fe:	f001 fe03 	bl	8002508 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	4a02      	ldr	r2, [pc, #8]	; (8000914 <HAL_DFSDM_ChannelMspInit+0x8c>)
 800090a:	6013      	str	r3, [r2, #0]
  }
}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200001bc 	.word	0x200001bc
 8000918:	200001b8 	.word	0x200001b8
 800091c:	40021000 	.word	0x40021000
 8000920:	48000800 	.word	0x48000800
 8000924:	48000400 	.word	0x48000400

08000928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_DMA_Init+0x38>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <MX_DMA_Init+0x38>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6493      	str	r3, [r2, #72]	; 0x48
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_DMA_Init+0x38>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	200e      	movs	r0, #14
 800094c:	f000 fd3d 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000950:	200e      	movs	r0, #14
 8000952:	f000 fd56 	bl	8001402 <HAL_NVIC_EnableIRQ>

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <MX_GPIO_Init+0xb4>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a2a      	ldr	r2, [pc, #168]	; (8000a18 <MX_GPIO_Init+0xb4>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b28      	ldr	r3, [pc, #160]	; (8000a18 <MX_GPIO_Init+0xb4>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <MX_GPIO_Init+0xb4>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a24      	ldr	r2, [pc, #144]	; (8000a18 <MX_GPIO_Init+0xb4>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <MX_GPIO_Init+0xb4>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_GPIO_Init+0xb4>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a1e      	ldr	r2, [pc, #120]	; (8000a18 <MX_GPIO_Init+0xb4>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MX_GPIO_Init+0xb4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <MX_GPIO_Init+0xb4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <MX_GPIO_Init+0xb4>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MX_GPIO_Init+0xb4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2120      	movs	r1, #32
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d2:	f001 ff43 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	480b      	ldr	r0, [pc, #44]	; (8000a1c <MX_GPIO_Init+0xb8>)
 80009ee:	f001 fd8b 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009f2:	2320      	movs	r3, #32
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f001 fd7c 	bl	8002508 <HAL_GPIO_Init>

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	48000800 	.word	0x48000800

08000a20 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a26:	f000 fb55 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2a:	f000 f895 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2e:	f7ff ff99 	bl	8000964 <MX_GPIO_Init>
  MX_TIM6_Init();
 8000a32:	f000 fa6b 	bl	8000f0c <MX_TIM6_Init>
  MX_DMA_Init();
 8000a36:	f7ff ff77 	bl	8000928 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000a3a:	f7ff fe27 	bl	800068c <MX_DFSDM1_Init>
  MX_USART2_UART_Init();
 8000a3e:	f000 fabd 	bl	8000fbc <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000a42:	f7ff fd93 	bl	800056c <MX_DAC1_Init>

  // Start timer 6 and DAC for DMA
  HAL_TIM_Base_Start(&htim6);
 8000a46:	4836      	ldr	r0, [pc, #216]	; (8000b20 <main+0x100>)
 8000a48:	f003 fa98 	bl	8003f7c <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4835      	ldr	r0, [pc, #212]	; (8000b24 <main+0x104>)
 8000a50:	f000 fd3d 	bl	80014ce <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)dac1_out1_buf, FFT_SampleNum,
 8000a54:	2300      	movs	r3, #0
 8000a56:	9300      	str	r3, [sp, #0]
 8000a58:	230a      	movs	r3, #10
 8000a5a:	4a33      	ldr	r2, [pc, #204]	; (8000b28 <main+0x108>)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4831      	ldr	r0, [pc, #196]	; (8000b24 <main+0x104>)
 8000a60:	f000 fd82 	bl	8001568 <HAL_DAC_Start_DMA>
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

  /* USER CODE BEGIN 2 */
  printf("\r\n***** Program start! *****\r\n");
 8000a64:	4831      	ldr	r0, [pc, #196]	; (8000b2c <main+0x10c>)
 8000a66:	f004 fae1 	bl	800502c <puts>
  HAL_Delay(100);
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f000 fbae 	bl	80011cc <HAL_Delay>
    if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, Buff, FFT_SampleNum) != HAL_OK)
 8000a70:	220a      	movs	r2, #10
 8000a72:	492f      	ldr	r1, [pc, #188]	; (8000b30 <main+0x110>)
 8000a74:	482f      	ldr	r0, [pc, #188]	; (8000b34 <main+0x114>)
 8000a76:	f001 f9f3 	bl	8001e60 <HAL_DFSDM_FilterRegularStart_DMA>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <main+0x68>
    {
        Error_Handler();
 8000a80:	2186      	movs	r1, #134	; 0x86
 8000a82:	482d      	ldr	r0, [pc, #180]	; (8000b38 <main+0x118>)
 8000a84:	f000 f934 	bl	8000cf0 <_Error_Handler>
    }

    // FFT init
    FFT_SampleRate = SystemCoreClock / hdfsdm1_channel0.Init.OutputClock.Divider
 8000a88:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <main+0x11c>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <main+0x120>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	fbb2 f2f3 	udiv	r2, r2, r3
            / hdfsdm1_filter0.Init.FilterParam.Oversampling
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <main+0x114>)
 8000a96:	6a1b      	ldr	r3, [r3, #32]
 8000a98:	fbb2 f2f3 	udiv	r2, r2, r3
            / hdfsdm1_filter0.Init.FilterParam.IntOversampling;
 8000a9c:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <main+0x114>)
 8000a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa0:	fbb2 f3f3 	udiv	r3, r2, r3
    FFT_SampleRate = SystemCoreClock / hdfsdm1_channel0.Init.OutputClock.Divider
 8000aa4:	ee07 3a90 	vmov	s15, r3
 8000aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aac:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <main+0x124>)
 8000aae:	edc3 7a00 	vstr	s15, [r3]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
        // Wait
        while (flag);
 8000ab2:	bf00      	nop
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <main+0x128>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1fb      	bne.n	8000ab4 <main+0x94>

        // Set input data

        for (uint32_t i = 0; i < FFT_SampleNum ; i++){
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	e026      	b.n	8000b10 <main+0xf0>
        	FFT_inp[i] = (float) FFT_inp_int32[i];
 8000ac2:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <main+0x12c>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ad2:	4a1f      	ldr	r2, [pc, #124]	; (8000b50 <main+0x130>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
 8000ada:	edc3 7a00 	vstr	s15, [r3]
        	dac1_out1_buf[i] = (uint32_t) FFT_inp[i];
 8000ade:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <main+0x130>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	edd3 7a00 	vldr	s15, [r3]
 8000aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aee:	ee17 1a90 	vmov	r1, s15
 8000af2:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <main+0x108>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        	printf("\r\n hello x = %u \r\n",dac1_out1_buf[i]);
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <main+0x108>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4813      	ldr	r0, [pc, #76]	; (8000b54 <main+0x134>)
 8000b06:	f004 fa2b 	bl	8004f60 <iprintf>
        for (uint32_t i = 0; i < FFT_SampleNum ; i++){
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b09      	cmp	r3, #9
 8000b14:	d9d5      	bls.n	8000ac2 <main+0xa2>
        }

        flag = true;        // <- Continuous transformation
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <main+0x128>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
        while (flag);
 8000b1c:	e7c9      	b.n	8000ab2 <main+0x92>
 8000b1e:	bf00      	nop
 8000b20:	20000268 	.word	0x20000268
 8000b24:	20000088 	.word	0x20000088
 8000b28:	2000023c 	.word	0x2000023c
 8000b2c:	08005d40 	.word	0x08005d40
 8000b30:	200001c0 	.word	0x200001c0
 8000b34:	200000e4 	.word	0x200000e4
 8000b38:	08005d60 	.word	0x08005d60
 8000b3c:	20000004 	.word	0x20000004
 8000b40:	20000138 	.word	0x20000138
 8000b44:	200001e8 	.word	0x200001e8
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	200001ec 	.word	0x200001ec
 8000b50:	20000214 	.word	0x20000214
 8000b54:	08005d74 	.word	0x08005d74

08000b58 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0b8      	sub	sp, #224	; 0xe0
 8000b5c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000b84:	2314      	movs	r3, #20
 8000b86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b8a:	2307      	movs	r3, #7
 8000b8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fed7 	bl	8002954 <HAL_RCC_OscConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <SystemClock_Config+0x5c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000bac:	21c0      	movs	r1, #192	; 0xc0
 8000bae:	4829      	ldr	r0, [pc, #164]	; (8000c54 <SystemClock_Config+0xfc>)
 8000bb0:	f000 f89e 	bl	8000cf0 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bd2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 fa97 	bl	800310c <HAL_RCC_ClockConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <SystemClock_Config+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000be4:	21ce      	movs	r1, #206	; 0xce
 8000be6:	481b      	ldr	r0, [pc, #108]	; (8000c54 <SystemClock_Config+0xfc>)
 8000be8:	f000 f882 	bl	8000cf0 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_DFSDM1;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <SystemClock_Config+0x100>)
 8000bee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 fca9 	bl	8003554 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d003      	beq.n	8000c10 <SystemClock_Config+0xb8>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c08:	21d6      	movs	r1, #214	; 0xd6
 8000c0a:	4812      	ldr	r0, [pc, #72]	; (8000c54 <SystemClock_Config+0xfc>)
 8000c0c:	f000 f870 	bl	8000cf0 <_Error_Handler>
  }

    /**Configure the main internal regulator output voltage
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c14:	f001 fe48 	bl	80028a8 <HAL_PWREx_ControlVoltageScaling>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <SystemClock_Config+0xce>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c1e:	21dd      	movs	r1, #221	; 0xdd
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <SystemClock_Config+0xfc>)
 8000c22:	f000 f865 	bl	8000cf0 <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000c26:	f002 fbfd 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <SystemClock_Config+0x104>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	099b      	lsrs	r3, r3, #6
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fbf2 	bl	800141e <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c3a:	2004      	movs	r0, #4
 8000c3c:	f000 fbfc 	bl	8001438 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 fbbf 	bl	80013ca <HAL_NVIC_SetPriority>
}
 8000c4c:	bf00      	nop
 8000c4e:	37e0      	adds	r7, #224	; 0xe0
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	08005d60 	.word	0x08005d60
 8000c58:	00010002 	.word	0x00010002
 8000c5c:	10624dd3 	.word	0x10624dd3

08000c60 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
    /*static int i = 0;
    printf("%d\r\n", i);
    i++;*/
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <HAL_DFSDM_FilterRegConvCpltCallback>:
            using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    if (flag)
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_DFSDM_FilterRegConvCpltCallback+0x44>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d013      	beq.n	8000cac <HAL_DFSDM_FilterRegConvCpltCallback+0x38>
    {
        for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	e00a      	b.n	8000ca0 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>
        {
            FFT_inp_int32[i] = Buff[i];
 8000c8a:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <HAL_DFSDM_FilterRegConvCpltCallback+0x48>)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c92:	490b      	ldr	r1, [pc, #44]	; (8000cc0 <HAL_DFSDM_FilterRegConvCpltCallback+0x4c>)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (uint32_t i = 0; i < FFT_SampleNum; i++)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b09      	cmp	r3, #9
 8000ca4:	d9f1      	bls.n	8000c8a <HAL_DFSDM_FilterRegConvCpltCallback+0x16>
        }
        flag = false;
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <HAL_DFSDM_FilterRegConvCpltCallback+0x44>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
    }

}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	200001c0 	.word	0x200001c0
 8000cc0:	200001ec 	.word	0x200001ec

08000cc4 <_write>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
int _write(int file, char *ptr, int len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, (uint16_t)len, 0xFFFFFFFF);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	68b9      	ldr	r1, [r7, #8]
 8000cda:	4804      	ldr	r0, [pc, #16]	; (8000cec <_write+0x28>)
 8000cdc:	f003 fb26 	bl	800432c <HAL_UART_Transmit>
    return len;
 8000ce0:	687b      	ldr	r3, [r7, #4]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200002b4 	.word	0x200002b4

08000cf0 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000cfa:	e7fe      	b.n	8000cfa <_Error_Handler+0xa>

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HAL_MspInit+0x98>)
 8000d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d06:	4a23      	ldr	r2, [pc, #140]	; (8000d94 <HAL_MspInit+0x98>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <HAL_MspInit+0x98>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <HAL_MspInit+0x98>)
 8000d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1e:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <HAL_MspInit+0x98>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6593      	str	r3, [r2, #88]	; 0x58
 8000d26:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <HAL_MspInit+0x98>)
 8000d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d32:	2003      	movs	r0, #3
 8000d34:	f000 fb3e 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f06f 000b 	mvn.w	r0, #11
 8000d40:	f000 fb43 	bl	80013ca <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	f06f 000a 	mvn.w	r0, #10
 8000d4c:	f000 fb3d 	bl	80013ca <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	f06f 0009 	mvn.w	r0, #9
 8000d58:	f000 fb37 	bl	80013ca <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f06f 0004 	mvn.w	r0, #4
 8000d64:	f000 fb31 	bl	80013ca <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f06f 0003 	mvn.w	r0, #3
 8000d70:	f000 fb2b 	bl	80013ca <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	f06f 0001 	mvn.w	r0, #1
 8000d7c:	f000 fb25 	bl	80013ca <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 fb1f 	bl	80013ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40021000 	.word	0x40021000

08000d98 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f9e8 	bl	800118c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000dbc:	f000 fb58 	bl	8001470 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <DMA1_Channel4_IRQHandler>:

/**
* @brief This function handles DMA1 channel4 global interrupt.
*/
void DMA1_Channel4_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8000dc8:	4802      	ldr	r0, [pc, #8]	; (8000dd4 <DMA1_Channel4_IRQHandler+0x10>)
 8000dca:	f001 fabd 	bl	8002348 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000170 	.word	0x20000170

08000dd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	e00a      	b.n	8000e00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dea:	f3af 8000 	nop.w
 8000dee:	4601      	mov	r1, r0
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	60ba      	str	r2, [r7, #8]
 8000df6:	b2ca      	uxtb	r2, r1
 8000df8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	dbf0      	blt.n	8000dea <_read+0x12>
  }

  return len;
 8000e08:	687b      	ldr	r3, [r7, #4]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_isatty>:

int _isatty(int file)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f004 f9ec 	bl	8005288 <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <_sbrk+0x64>)
 8000ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20018000 	.word	0x20018000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	20000264 	.word	0x20000264
 8000ee4:	200004b0 	.word	0x200004b0

08000ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig;

  htim6.Instance = TIM6;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_TIM6_Init+0x64>)
 8000f14:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <MX_TIM6_Init+0x68>)
 8000f16:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_TIM6_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_TIM6_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1919;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_TIM6_Init+0x64>)
 8000f26:	f240 727f 	movw	r2, #1919	; 0x77f
 8000f2a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f2c:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <MX_TIM6_Init+0x64>)
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f32:	480f      	ldr	r0, [pc, #60]	; (8000f70 <MX_TIM6_Init+0x64>)
 8000f34:	f002 ffca 	bl	8003ecc <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <MX_TIM6_Init+0x3a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000f3e:	213d      	movs	r1, #61	; 0x3d
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <MX_TIM6_Init+0x6c>)
 8000f42:	f7ff fed5 	bl	8000cf0 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f46:	2320      	movs	r3, #32
 8000f48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4619      	mov	r1, r3
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <MX_TIM6_Init+0x64>)
 8000f54:	f003 f914 	bl	8004180 <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <MX_TIM6_Init+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000f5e:	2144      	movs	r1, #68	; 0x44
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_TIM6_Init+0x6c>)
 8000f62:	f7ff fec5 	bl	8000cf0 <_Error_Handler>
  }

}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000268 	.word	0x20000268
 8000f74:	40001000 	.word	0x40001000
 8000f78:	08005d88 	.word	0x08005d88

08000f7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_TIM_Base_MspInit+0x38>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d10b      	bne.n	8000fa6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000f94:	f043 0310 	orr.w	r3, r3, #16
 8000f98:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <HAL_TIM_Base_MspInit+0x3c>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40001000 	.word	0x40001000
 8000fb8:	40021000 	.word	0x40021000

08000fbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_USART2_UART_Init+0x5c>)
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <MX_USART2_UART_Init+0x60>)
 8000fc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_USART2_UART_Init+0x5c>)
 8000fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_USART2_UART_Init+0x5c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USART2_UART_Init+0x5c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_USART2_UART_Init+0x5c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <MX_USART2_UART_Init+0x5c>)
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART2_UART_Init+0x5c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <MX_USART2_UART_Init+0x5c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART2_UART_Init+0x5c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <MX_USART2_UART_Init+0x5c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <MX_USART2_UART_Init+0x5c>)
 8001000:	f003 f946 	bl	8004290 <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <MX_USART2_UART_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 800100a:	2144      	movs	r1, #68	; 0x44
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <MX_USART2_UART_Init+0x64>)
 800100e:	f7ff fe6f 	bl	8000cf0 <_Error_Handler>
  }

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200002b4 	.word	0x200002b4
 800101c:	40004400 	.word	0x40004400
 8001020:	08005d9c 	.word	0x08005d9c

08001024 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a11      	ldr	r2, [pc, #68]	; (8001078 <HAL_UART_MspInit+0x54>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d11c      	bne.n	8001070 <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_UART_MspInit+0x58>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_UART_MspInit+0x58>)
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	6593      	str	r3, [r2, #88]	; 0x58
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_UART_MspInit+0x58>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800104e:	230c      	movs	r3, #12
 8001050:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105e:	2307      	movs	r3, #7
 8001060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f001 fa4c 	bl	8002508 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40004400 	.word	0x40004400
 800107c:	40021000 	.word	0x40021000

08001080 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001084:	f7ff ff30 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <LoopForever+0x6>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	; (80010c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <LoopForever+0xe>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	; (80010cc <LoopForever+0x16>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f004 f8f1 	bl	8005294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010b2:	f7ff fcb5 	bl	8000a20 <main>

080010b6 <LoopForever>:

LoopForever:
    b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80010c4:	08005e3c 	.word	0x08005e3c
  ldr r2, =_sbss
 80010c8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010cc:	200004b0 	.word	0x200004b0

080010d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC1_2_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_Init+0x3c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <HAL_Init+0x3c>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ea:	2003      	movs	r0, #3
 80010ec:	f000 f962 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f0:	2000      	movs	r0, #0
 80010f2:	f000 f80f 	bl	8001114 <HAL_InitTick>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	71fb      	strb	r3, [r7, #7]
 8001100:	e001      	b.n	8001106 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001102:	f7ff fdfb 	bl	8000cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001106:	79fb      	ldrb	r3, [r7, #7]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40022000 	.word	0x40022000

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_InitTick+0x6c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d023      	beq.n	8001170 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_InitTick+0x70>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_InitTick+0x6c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f96d 	bl	800141e <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10f      	bne.n	800116a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d809      	bhi.n	8001164 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f000 f937 	bl	80013ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_InitTick+0x74>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e007      	b.n	8001174 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e004      	b.n	8001174 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e001      	b.n	8001174 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000000c 	.word	0x2000000c
 8001184:	20000004 	.word	0x20000004
 8001188:	20000008 	.word	0x20000008

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000000c 	.word	0x2000000c
 80011b0:	2000033c 	.word	0x2000033c

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	2000033c 	.word	0x2000033c

080011cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d4:	f7ff ffee 	bl	80011b4 <HAL_GetTick>
 80011d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e4:	d005      	beq.n	80011f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_Delay+0x44>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f2:	bf00      	nop
 80011f4:	f7ff ffde 	bl	80011b4 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	429a      	cmp	r2, r3
 8001202:	d8f7      	bhi.n	80011f4 <HAL_Delay+0x28>
  {
  }
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000000c 	.word	0x2000000c

08001214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db0b      	blt.n	80012a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 021f 	and.w	r2, r3, #31
 8001290:	4907      	ldr	r1, [pc, #28]	; (80012b0 <__NVIC_EnableIRQ+0x38>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	2001      	movs	r0, #1
 800129a:	fa00 f202 	lsl.w	r2, r0, r2
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	; (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	; 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	; 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f7ff ff8e 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff29 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013dc:	f7ff ff3e 	bl	800125c <__NVIC_GetPriorityGrouping>
 80013e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	6978      	ldr	r0, [r7, #20]
 80013e8:	f7ff ff8e 	bl	8001308 <NVIC_EncodePriority>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff5d 	bl	80012b4 <__NVIC_SetPriority>
}
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff31 	bl	8001278 <__NVIC_EnableIRQ>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff ffa2 	bl	8001370 <SysTick_Config>
 800142c:	4603      	mov	r3, r0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b04      	cmp	r3, #4
 8001444:	d106      	bne.n	8001454 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001452:	e005      	b.n	8001460 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800145a:	f023 0304 	bic.w	r3, r3, #4
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001474:	f000 f802 	bl	800147c <HAL_SYSTICK_Callback>
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e014      	b.n	80014c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	791b      	ldrb	r3, [r3, #4]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d105      	bne.n	80014b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff f88f 	bl	80005d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2202      	movs	r2, #2
 80014b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	795b      	ldrb	r3, [r3, #5]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <HAL_DAC_Start+0x16>
 80014e0:	2302      	movs	r3, #2
 80014e2:	e03b      	b.n	800155c <HAL_DAC_Start+0x8e>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2202      	movs	r2, #2
 80014ee:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6819      	ldr	r1, [r3, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2201      	movs	r2, #1
 80014fe:	409a      	lsls	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10f      	bne.n	800152e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001518:	2b04      	cmp	r3, #4
 800151a:	d118      	bne.n	800154e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	e00f      	b.n	800154e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001538:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800153c:	d107      	bne.n	800154e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 0202 	orr.w	r2, r2, #2
 800154c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	795b      	ldrb	r3, [r3, #5]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_DAC_Start_DMA+0x1e>
 8001582:	2302      	movs	r3, #2
 8001584:	e0ab      	b.n	80016de <HAL_DAC_Start_DMA+0x176>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2201      	movs	r2, #1
 800158a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2202      	movs	r2, #2
 8001590:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d12f      	bne.n	80015f8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a52      	ldr	r2, [pc, #328]	; (80016e8 <HAL_DAC_Start_DMA+0x180>)
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a51      	ldr	r2, [pc, #324]	; (80016ec <HAL_DAC_Start_DMA+0x184>)
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a50      	ldr	r2, [pc, #320]	; (80016f0 <HAL_DAC_Start_DMA+0x188>)
 80015ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80015be:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d013      	beq.n	80015ee <HAL_DAC_Start_DMA+0x86>
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d845      	bhi.n	8001658 <HAL_DAC_Start_DMA+0xf0>
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_DAC_Start_DMA+0x72>
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d005      	beq.n	80015e4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80015d8:	e03e      	b.n	8001658 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	3308      	adds	r3, #8
 80015e0:	613b      	str	r3, [r7, #16]
        break;
 80015e2:	e03c      	b.n	800165e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	330c      	adds	r3, #12
 80015ea:	613b      	str	r3, [r7, #16]
        break;
 80015ec:	e037      	b.n	800165e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3310      	adds	r3, #16
 80015f4:	613b      	str	r3, [r7, #16]
        break;
 80015f6:	e032      	b.n	800165e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4a3d      	ldr	r2, [pc, #244]	; (80016f4 <HAL_DAC_Start_DMA+0x18c>)
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4a3c      	ldr	r2, [pc, #240]	; (80016f8 <HAL_DAC_Start_DMA+0x190>)
 8001606:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4a3b      	ldr	r2, [pc, #236]	; (80016fc <HAL_DAC_Start_DMA+0x194>)
 800160e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800161e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	2b08      	cmp	r3, #8
 8001624:	d013      	beq.n	800164e <HAL_DAC_Start_DMA+0xe6>
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	2b08      	cmp	r3, #8
 800162a:	d817      	bhi.n	800165c <HAL_DAC_Start_DMA+0xf4>
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_DAC_Start_DMA+0xd2>
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b04      	cmp	r3, #4
 8001636:	d005      	beq.n	8001644 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001638:	e010      	b.n	800165c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3314      	adds	r3, #20
 8001640:	613b      	str	r3, [r7, #16]
        break;
 8001642:	e00c      	b.n	800165e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3318      	adds	r3, #24
 800164a:	613b      	str	r3, [r7, #16]
        break;
 800164c:	e007      	b.n	800165e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	331c      	adds	r3, #28
 8001654:	613b      	str	r3, [r7, #16]
        break;
 8001656:	e002      	b.n	800165e <HAL_DAC_Start_DMA+0xf6>
        break;
 8001658:	bf00      	nop
 800165a:	e000      	b.n	800165e <HAL_DAC_Start_DMA+0xf6>
        break;
 800165c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d111      	bne.n	8001688 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001672:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6898      	ldr	r0, [r3, #8]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	f000 fe03 	bl	8002288 <HAL_DMA_Start_IT>
 8001682:	4603      	mov	r3, r0
 8001684:	75fb      	strb	r3, [r7, #23]
 8001686:	e010      	b.n	80016aa <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001696:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	68d8      	ldr	r0, [r3, #12]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	f000 fdf1 	bl	8002288 <HAL_DMA_Start_IT>
 80016a6:	4603      	mov	r3, r0
 80016a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10c      	bne.n	80016d0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2201      	movs	r2, #1
 80016c4:	409a      	lsls	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e005      	b.n	80016dc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	f043 0204 	orr.w	r2, r3, #4
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	0800198b 	.word	0x0800198b
 80016ec:	080019ad 	.word	0x080019ad
 80016f0:	080019c9 	.word	0x080019c9
 80016f4:	08001a33 	.word	0x08001a33
 80016f8:	08001a55 	.word	0x08001a55
 80016fc:	08001a71 	.word	0x08001a71

08001700 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	795b      	ldrb	r3, [r3, #5]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <HAL_DAC_ConfigChannel+0x1c>
 8001754:	2302      	movs	r3, #2
 8001756:	e114      	b.n	8001982 <HAL_DAC_ConfigChannel+0x246>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2201      	movs	r2, #1
 800175c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2202      	movs	r2, #2
 8001762:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b04      	cmp	r3, #4
 800176a:	f040 8081 	bne.w	8001870 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800176e:	f7ff fd21 	bl	80011b4 <HAL_GetTick>
 8001772:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d140      	bne.n	80017fc <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800177a:	e018      	b.n	80017ae <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800177c:	f7ff fd1a 	bl	80011b4 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d911      	bls.n	80017ae <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00a      	beq.n	80017ae <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	f043 0208 	orr.w	r2, r3, #8
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2203      	movs	r2, #3
 80017a8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e0e9      	b.n	8001982 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1df      	bne.n	800177c <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff fd05 	bl	80011cc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	6992      	ldr	r2, [r2, #24]
 80017ca:	641a      	str	r2, [r3, #64]	; 0x40
 80017cc:	e023      	b.n	8001816 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80017ce:	f7ff fcf1 	bl	80011b4 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d90f      	bls.n	80017fc <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	da0a      	bge.n	80017fc <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f043 0208 	orr.w	r2, r3, #8
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2203      	movs	r2, #3
 80017f6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0c2      	b.n	8001982 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001802:	2b00      	cmp	r3, #0
 8001804:	dbe3      	blt.n	80017ce <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001806:	2001      	movs	r0, #1
 8001808:	f7ff fce0 	bl	80011cc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	6992      	ldr	r2, [r2, #24]
 8001814:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	ea02 0103 	and.w	r1, r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f003 0310 	and.w	r3, r3, #16
 8001850:	21ff      	movs	r1, #255	; 0xff
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	ea02 0103 	and.w	r1, r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	6a1a      	ldr	r2, [r3, #32]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	409a      	lsls	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d11d      	bne.n	80018b4 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	221f      	movs	r2, #31
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2207      	movs	r2, #7
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	431a      	orrs	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43da      	mvns	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	400a      	ands	r2, r1
 8001918:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	f640 72fc 	movw	r2, #4092	; 0xffc
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6819      	ldr	r1, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	22c0      	movs	r2, #192	; 0xc0
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	400a      	ands	r2, r1
 8001972:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3720      	adds	r7, #32
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f7ff feb1 	bl	8001700 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2201      	movs	r2, #1
 80019a2:	711a      	strb	r2, [r3, #4]
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7ff feaa 	bl	8001714 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	f043 0204 	orr.w	r2, r3, #4
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f7ff fea0 	bl	8001728 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	711a      	strb	r2, [r3, #4]
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7ff ffd8 	bl	80019f6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	711a      	strb	r2, [r3, #4]
}
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f7ff ffd1 	bl	8001a0a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	f043 0204 	orr.w	r2, r3, #4
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f7ff ffc7 	bl	8001a1e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	711a      	strb	r2, [r3, #4]
}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0ac      	b.n	8001c0c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fa8c 	bl	8001fd4 <DFSDM_GetChannelFromInstance>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a55      	ldr	r2, [pc, #340]	; (8001c14 <HAL_DFSDM_ChannelInit+0x174>)
 8001ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e09f      	b.n	8001c0c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7fe fedb 	bl	8000888 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001ad2:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <HAL_DFSDM_ChannelInit+0x178>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	4a4f      	ldr	r2, [pc, #316]	; (8001c18 <HAL_DFSDM_ChannelInit+0x178>)
 8001ada:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001adc:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <HAL_DFSDM_ChannelInit+0x178>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d125      	bne.n	8001b30 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001ae4:	4b4d      	ldr	r3, [pc, #308]	; (8001c1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	; (8001c1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001aea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001aee:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001af0:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4948      	ldr	r1, [pc, #288]	; (8001c1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a46      	ldr	r2, [pc, #280]	; (8001c1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b04:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001b08:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	791b      	ldrb	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d108      	bne.n	8001b24 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001b12:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	041b      	lsls	r3, r3, #16
 8001b1e:	493f      	ldr	r1, [pc, #252]	; (8001c1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001b24:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a3c      	ldr	r2, [pc, #240]	; (8001c1c <HAL_DFSDM_ChannelInit+0x17c>)
 8001b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b2e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001b3e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6819      	ldr	r1, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b4e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001b54:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 020f 	bic.w	r2, r2, #15
 8001b6c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6819      	ldr	r1, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001b94:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6899      	ldr	r1, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f002 0207 	and.w	r2, r2, #7
 8001bc0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bec:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f9ea 	bl	8001fd4 <DFSDM_GetChannelFromInstance>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4904      	ldr	r1, [pc, #16]	; (8001c14 <HAL_DFSDM_ChannelInit+0x174>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000344 	.word	0x20000344
 8001c18:	20000340 	.word	0x20000340
 8001c1c:	40016000 	.word	0x40016000

08001c20 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0ca      	b.n	8001dc8 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a66      	ldr	r2, [pc, #408]	; (8001dd0 <HAL_DFSDM_FilterInit+0x1b0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d109      	bne.n	8001c50 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d003      	beq.n	8001c4c <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0bb      	b.n	8001dc8 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7fe fd7b 	bl	8000764 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001c7c:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	7a1b      	ldrb	r3, [r3, #8]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d108      	bne.n	8001c98 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	e007      	b.n	8001ca8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7a5b      	ldrb	r3, [r3, #9]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d108      	bne.n	8001cc2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e007      	b.n	8001cd2 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8001ce0:	f023 0308 	bic.w	r3, r3, #8
 8001ce4:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d108      	bne.n	8001d00 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6819      	ldr	r1, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7c1b      	ldrb	r3, [r3, #16]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d108      	bne.n	8001d1a <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0210 	orr.w	r2, r2, #16
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e007      	b.n	8001d2a <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0210 	bic.w	r2, r2, #16
 8001d28:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7c5b      	ldrb	r3, [r3, #17]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d108      	bne.n	8001d44 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0220 	orr.w	r2, r2, #32
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e007      	b.n	8001d54 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0220 	bic.w	r2, r2, #32
 8001d52:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001d62:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001d66:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6959      	ldr	r1, [r3, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001d7a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001d82:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7c1a      	ldrb	r2, [r3, #16]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40016100 	.word	0x40016100

08001dd4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d02e      	beq.n	8001e4c <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001df4:	2bff      	cmp	r3, #255	; 0xff
 8001df6:	d029      	beq.n	8001e4c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d10d      	bne.n	8001e2e <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001e20:	431a      	orrs	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e00a      	b.n	8001e44 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6819      	ldr	r1, [r3, #0]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
 8001e4a:	e001      	b.n	8001e50 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	75fb      	strb	r3, [r7, #23]
 8001e80:	e064      	b.n	8001f4c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e90:	d002      	beq.n	8001e98 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	75fb      	strb	r3, [r7, #23]
 8001e96:	e059      	b.n	8001f4c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10e      	bne.n	8001ebe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10a      	bne.n	8001ebe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d002      	beq.n	8001ebe <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	75fb      	strb	r3, [r7, #23]
 8001ebc:	e046      	b.n	8001f4c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10b      	bne.n	8001ede <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d107      	bne.n	8001ede <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d102      	bne.n	8001ede <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	75fb      	strb	r3, [r7, #23]
 8001edc:	e036      	b.n	8001f4c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d004      	beq.n	8001ef2 <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d12a      	bne.n	8001f48 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001ef8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8001f00:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001f08:	2b20      	cmp	r3, #32
 8001f0a:	d101      	bne.n	8001f10 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8001f0e:	e000      	b.n	8001f12 <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8001f10:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	331c      	adds	r3, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f000 f9ae 	bl	8002288 <HAL_DMA_Start_IT>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	22ff      	movs	r2, #255	; 0xff
 8001f36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001f3e:	e005      	b.n	8001f4c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 f893 	bl	800206c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001f46:	e001      	b.n	8001f4c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	08001f95 	.word	0x08001f95
 8001f5c:	08001fb1 	.word	0x08001fb1
 8001f60:	08001f79 	.word	0x08001f79

08001f64 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f7fe fe6a 	bl	8000c60 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7fe fe66 	bl	8000c74 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7ff ffcd 	bl	8001f64 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <DFSDM_GetChannelFromInstance+0x7c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d102      	bne.n	8001fea <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e02b      	b.n	8002042 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a19      	ldr	r2, [pc, #100]	; (8002054 <DFSDM_GetChannelFromInstance+0x80>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d102      	bne.n	8001ff8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e024      	b.n	8002042 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a17      	ldr	r2, [pc, #92]	; (8002058 <DFSDM_GetChannelFromInstance+0x84>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d102      	bne.n	8002006 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002000:	2302      	movs	r3, #2
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	e01d      	b.n	8002042 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <DFSDM_GetChannelFromInstance+0x88>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d102      	bne.n	8002014 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800200e:	2304      	movs	r3, #4
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	e016      	b.n	8002042 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <DFSDM_GetChannelFromInstance+0x8c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d102      	bne.n	8002022 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800201c:	2305      	movs	r3, #5
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	e00f      	b.n	8002042 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <DFSDM_GetChannelFromInstance+0x90>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d102      	bne.n	8002030 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800202a:	2306      	movs	r3, #6
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	e008      	b.n	8002042 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <DFSDM_GetChannelFromInstance+0x94>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d102      	bne.n	800203e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002038:	2307      	movs	r3, #7
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e001      	b.n	8002042 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800203e:	2303      	movs	r3, #3
 8002040:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002042:	68fb      	ldr	r3, [r7, #12]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	40016000 	.word	0x40016000
 8002054:	40016020 	.word	0x40016020
 8002058:	40016040 	.word	0x40016040
 800205c:	40016080 	.word	0x40016080
 8002060:	400160a0 	.word	0x400160a0
 8002064:	400160c0 	.word	0x400160c0
 8002068:	400160e0 	.word	0x400160e0

0800206c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002078:	2b00      	cmp	r3, #0
 800207a:	d108      	bne.n	800208e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e033      	b.n	80020f6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80020ac:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0201 	orr.w	r2, r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d116      	bne.n	80020f6 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d107      	bne.n	80020e0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0202 	orr.w	r2, r2, #2
 80020de:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d102      	bne.n	80020f0 <DFSDM_RegConvStart+0x84>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	e000      	b.n	80020f2 <DFSDM_RegConvStart+0x86>
 80020f0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <DFSDM_RegConvStart+0x98>
 8002100:	2202      	movs	r2, #2
 8002102:	e000      	b.n	8002106 <DFSDM_RegConvStart+0x9a>
 8002104:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e098      	b.n	800225c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	4b4d      	ldr	r3, [pc, #308]	; (8002268 <HAL_DMA_Init+0x150>)
 8002132:	429a      	cmp	r2, r3
 8002134:	d80f      	bhi.n	8002156 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	4b4b      	ldr	r3, [pc, #300]	; (800226c <HAL_DMA_Init+0x154>)
 800213e:	4413      	add	r3, r2
 8002140:	4a4b      	ldr	r2, [pc, #300]	; (8002270 <HAL_DMA_Init+0x158>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	091b      	lsrs	r3, r3, #4
 8002148:	009a      	lsls	r2, r3, #2
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a48      	ldr	r2, [pc, #288]	; (8002274 <HAL_DMA_Init+0x15c>)
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
 8002154:	e00e      	b.n	8002174 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	4b46      	ldr	r3, [pc, #280]	; (8002278 <HAL_DMA_Init+0x160>)
 800215e:	4413      	add	r3, r2
 8002160:	4a43      	ldr	r2, [pc, #268]	; (8002270 <HAL_DMA_Init+0x158>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	009a      	lsls	r2, r3, #2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a42      	ldr	r2, [pc, #264]	; (800227c <HAL_DMA_Init+0x164>)
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800218a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021ce:	d039      	beq.n	8002244 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	4a27      	ldr	r2, [pc, #156]	; (8002274 <HAL_DMA_Init+0x15c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d11a      	bne.n	8002210 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021da:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_DMA_Init+0x168>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f003 031c 	and.w	r3, r3, #28
 80021e6:	210f      	movs	r1, #15
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	4924      	ldr	r1, [pc, #144]	; (8002280 <HAL_DMA_Init+0x168>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021f4:	4b22      	ldr	r3, [pc, #136]	; (8002280 <HAL_DMA_Init+0x168>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	f003 031c 	and.w	r3, r3, #28
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	491d      	ldr	r1, [pc, #116]	; (8002280 <HAL_DMA_Init+0x168>)
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]
 800220e:	e019      	b.n	8002244 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_DMA_Init+0x16c>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	f003 031c 	and.w	r3, r3, #28
 800221c:	210f      	movs	r1, #15
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	4917      	ldr	r1, [pc, #92]	; (8002284 <HAL_DMA_Init+0x16c>)
 8002226:	4013      	ands	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_DMA_Init+0x16c>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f003 031c 	and.w	r3, r3, #28
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	4911      	ldr	r1, [pc, #68]	; (8002284 <HAL_DMA_Init+0x16c>)
 8002240:	4313      	orrs	r3, r2
 8002242:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40020407 	.word	0x40020407
 800226c:	bffdfff8 	.word	0xbffdfff8
 8002270:	cccccccd 	.word	0xcccccccd
 8002274:	40020000 	.word	0x40020000
 8002278:	bffdfbf8 	.word	0xbffdfbf8
 800227c:	40020400 	.word	0x40020400
 8002280:	400200a8 	.word	0x400200a8
 8002284:	400204a8 	.word	0x400204a8

08002288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_DMA_Start_IT+0x20>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e04b      	b.n	8002340 <HAL_DMA_Start_IT+0xb8>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d13a      	bne.n	8002332 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f8e0 	bl	80024a6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 020e 	orr.w	r2, r2, #14
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e00f      	b.n	8002320 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0204 	bic.w	r2, r2, #4
 800230e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 020a 	orr.w	r2, r2, #10
 800231e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e005      	b.n	800233e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800233a:	2302      	movs	r3, #2
 800233c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800233e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f003 031c 	and.w	r3, r3, #28
 8002368:	2204      	movs	r2, #4
 800236a:	409a      	lsls	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d026      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x7a>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d021      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d107      	bne.n	800239c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0204 	bic.w	r2, r2, #4
 800239a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a0:	f003 021c 	and.w	r2, r3, #28
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	2104      	movs	r1, #4
 80023aa:	fa01 f202 	lsl.w	r2, r1, r2
 80023ae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d071      	beq.n	800249c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80023c0:	e06c      	b.n	800249c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c6:	f003 031c 	and.w	r3, r3, #28
 80023ca:	2202      	movs	r2, #2
 80023cc:	409a      	lsls	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d02e      	beq.n	8002434 <HAL_DMA_IRQHandler+0xec>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d029      	beq.n	8002434 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0320 	and.w	r3, r3, #32
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10b      	bne.n	8002406 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 020a 	bic.w	r2, r2, #10
 80023fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f003 021c 	and.w	r2, r3, #28
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	2102      	movs	r1, #2
 8002414:	fa01 f202 	lsl.w	r2, r1, r2
 8002418:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d038      	beq.n	800249c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002432:	e033      	b.n	800249c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	f003 031c 	and.w	r3, r3, #28
 800243c:	2208      	movs	r2, #8
 800243e:	409a      	lsls	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d02a      	beq.n	800249e <HAL_DMA_IRQHandler+0x156>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d025      	beq.n	800249e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 020e 	bic.w	r2, r2, #14
 8002460:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f003 021c 	and.w	r2, r3, #28
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2101      	movs	r1, #1
 8002470:	fa01 f202 	lsl.w	r2, r1, r2
 8002474:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002490:	2b00      	cmp	r3, #0
 8002492:	d004      	beq.n	800249e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800249c:	bf00      	nop
 800249e:	bf00      	nop
}
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	60f8      	str	r0, [r7, #12]
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	f003 021c 	and.w	r2, r3, #28
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	2101      	movs	r1, #1
 80024c2:	fa01 f202 	lsl.w	r2, r1, r2
 80024c6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d108      	bne.n	80024ea <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024e8:	e007      	b.n	80024fa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	60da      	str	r2, [r3, #12]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002516:	e17f      	b.n	8002818 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	2101      	movs	r1, #1
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	4013      	ands	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8171 	beq.w	8002812 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d005      	beq.n	8002548 <HAL_GPIO_Init+0x40>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d130      	bne.n	80025aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800257e:	2201      	movs	r2, #1
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 0201 	and.w	r2, r3, #1
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d118      	bne.n	80025e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025bc:	2201      	movs	r2, #1
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	08db      	lsrs	r3, r3, #3
 80025d2:	f003 0201 	and.w	r2, r3, #1
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d017      	beq.n	8002624 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0303 	and.w	r3, r3, #3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d123      	bne.n	8002678 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	08da      	lsrs	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3208      	adds	r2, #8
 8002638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	08da      	lsrs	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3208      	adds	r2, #8
 8002672:	6939      	ldr	r1, [r7, #16]
 8002674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0203 	and.w	r2, r3, #3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80ac 	beq.w	8002812 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ba:	4b5f      	ldr	r3, [pc, #380]	; (8002838 <HAL_GPIO_Init+0x330>)
 80026bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026be:	4a5e      	ldr	r2, [pc, #376]	; (8002838 <HAL_GPIO_Init+0x330>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6613      	str	r3, [r2, #96]	; 0x60
 80026c6:	4b5c      	ldr	r3, [pc, #368]	; (8002838 <HAL_GPIO_Init+0x330>)
 80026c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026d2:	4a5a      	ldr	r2, [pc, #360]	; (800283c <HAL_GPIO_Init+0x334>)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	3302      	adds	r3, #2
 80026da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	220f      	movs	r2, #15
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026fc:	d025      	beq.n	800274a <HAL_GPIO_Init+0x242>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4f      	ldr	r2, [pc, #316]	; (8002840 <HAL_GPIO_Init+0x338>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01f      	beq.n	8002746 <HAL_GPIO_Init+0x23e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4e      	ldr	r2, [pc, #312]	; (8002844 <HAL_GPIO_Init+0x33c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0x23a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4d      	ldr	r2, [pc, #308]	; (8002848 <HAL_GPIO_Init+0x340>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0x236>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4c      	ldr	r2, [pc, #304]	; (800284c <HAL_GPIO_Init+0x344>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x232>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4b      	ldr	r2, [pc, #300]	; (8002850 <HAL_GPIO_Init+0x348>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x22e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4a      	ldr	r2, [pc, #296]	; (8002854 <HAL_GPIO_Init+0x34c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x22a>
 800272e:	2306      	movs	r3, #6
 8002730:	e00c      	b.n	800274c <HAL_GPIO_Init+0x244>
 8002732:	2307      	movs	r3, #7
 8002734:	e00a      	b.n	800274c <HAL_GPIO_Init+0x244>
 8002736:	2305      	movs	r3, #5
 8002738:	e008      	b.n	800274c <HAL_GPIO_Init+0x244>
 800273a:	2304      	movs	r3, #4
 800273c:	e006      	b.n	800274c <HAL_GPIO_Init+0x244>
 800273e:	2303      	movs	r3, #3
 8002740:	e004      	b.n	800274c <HAL_GPIO_Init+0x244>
 8002742:	2302      	movs	r3, #2
 8002744:	e002      	b.n	800274c <HAL_GPIO_Init+0x244>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_GPIO_Init+0x244>
 800274a:	2300      	movs	r3, #0
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	f002 0203 	and.w	r2, r2, #3
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	4093      	lsls	r3, r2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800275c:	4937      	ldr	r1, [pc, #220]	; (800283c <HAL_GPIO_Init+0x334>)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800276a:	4b3b      	ldr	r3, [pc, #236]	; (8002858 <HAL_GPIO_Init+0x350>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800278e:	4a32      	ldr	r2, [pc, #200]	; (8002858 <HAL_GPIO_Init+0x350>)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_GPIO_Init+0x350>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027b8:	4a27      	ldr	r2, [pc, #156]	; (8002858 <HAL_GPIO_Init+0x350>)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <HAL_GPIO_Init+0x350>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027e2:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <HAL_GPIO_Init+0x350>)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_GPIO_Init+0x350>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800280c:	4a12      	ldr	r2, [pc, #72]	; (8002858 <HAL_GPIO_Init+0x350>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3301      	adds	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa22 f303 	lsr.w	r3, r2, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	f47f ae78 	bne.w	8002518 <HAL_GPIO_Init+0x10>
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	40010000 	.word	0x40010000
 8002840:	48000400 	.word	0x48000400
 8002844:	48000800 	.word	0x48000800
 8002848:	48000c00 	.word	0x48000c00
 800284c:	48001000 	.word	0x48001000
 8002850:	48001400 	.word	0x48001400
 8002854:	48001800 	.word	0x48001800
 8002858:	40010400 	.word	0x40010400

0800285c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
 8002868:	4613      	mov	r3, r2
 800286a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800286c:	787b      	ldrb	r3, [r7, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002878:	e002      	b.n	8002880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40007000 	.word	0x40007000

080028a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b6:	d130      	bne.n	800291a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028b8:	4b23      	ldr	r3, [pc, #140]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c4:	d038      	beq.n	8002938 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ce:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028d6:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2232      	movs	r2, #50	; 0x32
 80028dc:	fb02 f303 	mul.w	r3, r2, r3
 80028e0:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0c9b      	lsrs	r3, r3, #18
 80028e8:	3301      	adds	r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ec:	e002      	b.n	80028f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002900:	d102      	bne.n	8002908 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f2      	bne.n	80028ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002908:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002914:	d110      	bne.n	8002938 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e00f      	b.n	800293a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002926:	d007      	beq.n	8002938 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002930:	4a05      	ldr	r2, [pc, #20]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002936:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40007000 	.word	0x40007000
 800294c:	20000004 	.word	0x20000004
 8002950:	431bde83 	.word	0x431bde83

08002954 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e3ca      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002966:	4b97      	ldr	r3, [pc, #604]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002970:	4b94      	ldr	r3, [pc, #592]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80e4 	beq.w	8002b50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_RCC_OscConfig+0x4a>
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	f040 808b 	bne.w	8002aac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b01      	cmp	r3, #1
 800299a:	f040 8087 	bne.w	8002aac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800299e:	4b89      	ldr	r3, [pc, #548]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d005      	beq.n	80029b6 <HAL_RCC_OscConfig+0x62>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e3a2      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1a      	ldr	r2, [r3, #32]
 80029ba:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <HAL_RCC_OscConfig+0x7c>
 80029c6:	4b7f      	ldr	r3, [pc, #508]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ce:	e005      	b.n	80029dc <HAL_RCC_OscConfig+0x88>
 80029d0:	4b7c      	ldr	r3, [pc, #496]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029dc:	4293      	cmp	r3, r2
 80029de:	d223      	bcs.n	8002a28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fd55 	bl	8003494 <RCC_SetFlashLatencyFromMSIRange>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e383      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029f4:	4b73      	ldr	r3, [pc, #460]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a72      	ldr	r2, [pc, #456]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 80029fa:	f043 0308 	orr.w	r3, r3, #8
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b70      	ldr	r3, [pc, #448]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	496d      	ldr	r1, [pc, #436]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a12:	4b6c      	ldr	r3, [pc, #432]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	4968      	ldr	r1, [pc, #416]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
 8002a26:	e025      	b.n	8002a74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a28:	4b66      	ldr	r3, [pc, #408]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a65      	ldr	r2, [pc, #404]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	f043 0308 	orr.w	r3, r3, #8
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	4b63      	ldr	r3, [pc, #396]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4960      	ldr	r1, [pc, #384]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a46:	4b5f      	ldr	r3, [pc, #380]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	495b      	ldr	r1, [pc, #364]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fd15 	bl	8003494 <RCC_SetFlashLatencyFromMSIRange>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e343      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a74:	f000 fc4a 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b52      	ldr	r3, [pc, #328]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	4950      	ldr	r1, [pc, #320]	; (8002bc8 <HAL_RCC_OscConfig+0x274>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a90:	4a4e      	ldr	r2, [pc, #312]	; (8002bcc <HAL_RCC_OscConfig+0x278>)
 8002a92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a94:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <HAL_RCC_OscConfig+0x27c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe fb3b 	bl	8001114 <HAL_InitTick>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d052      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	e327      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d032      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ab4:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a42      	ldr	r2, [pc, #264]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fb78 	bl	80011b4 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ac8:	f7fe fb74 	bl	80011b4 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e310      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ada:	4b3a      	ldr	r3, [pc, #232]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae6:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a36      	ldr	r2, [pc, #216]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b34      	ldr	r3, [pc, #208]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4931      	ldr	r1, [pc, #196]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b04:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	492c      	ldr	r1, [pc, #176]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
 8002b18:	e01a      	b.n	8002b50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b26:	f7fe fb45 	bl	80011b4 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b2e:	f7fe fb41 	bl	80011b4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e2dd      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b40:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x1da>
 8002b4c:	e000      	b.n	8002b50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d074      	beq.n	8002c46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d005      	beq.n	8002b6e <HAL_RCC_OscConfig+0x21a>
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b0c      	cmp	r3, #12
 8002b66:	d10e      	bne.n	8002b86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d10b      	bne.n	8002b86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d064      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2f0>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d160      	bne.n	8002c44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e2ba      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8e:	d106      	bne.n	8002b9e <HAL_RCC_OscConfig+0x24a>
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0b      	ldr	r2, [pc, #44]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	e026      	b.n	8002bec <HAL_RCC_OscConfig+0x298>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba6:	d115      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x280>
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002bae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b03      	ldr	r3, [pc, #12]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a02      	ldr	r2, [pc, #8]	; (8002bc4 <HAL_RCC_OscConfig+0x270>)
 8002bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	e014      	b.n	8002bec <HAL_RCC_OscConfig+0x298>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08005db0 	.word	0x08005db0
 8002bcc:	20000004 	.word	0x20000004
 8002bd0:	20000008 	.word	0x20000008
 8002bd4:	4ba0      	ldr	r3, [pc, #640]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a9f      	ldr	r2, [pc, #636]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b9d      	ldr	r3, [pc, #628]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a9c      	ldr	r2, [pc, #624]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fade 	bl	80011b4 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fada 	bl	80011b4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e276      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c0e:	4b92      	ldr	r3, [pc, #584]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2a8>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe faca 	bl	80011b4 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe fac6 	bl	80011b4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e262      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c36:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2d0>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d060      	beq.n	8002d14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_OscConfig+0x310>
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d119      	bne.n	8002c92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d116      	bne.n	8002c92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c64:	4b7c      	ldr	r3, [pc, #496]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_OscConfig+0x328>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e23f      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7c:	4b76      	ldr	r3, [pc, #472]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	4973      	ldr	r1, [pc, #460]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c90:	e040      	b.n	8002d14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d023      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c9a:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6e      	ldr	r2, [pc, #440]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fa85 	bl	80011b4 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fe fa81 	bl	80011b4 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e21d      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc0:	4b65      	ldr	r3, [pc, #404]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b62      	ldr	r3, [pc, #392]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	495f      	ldr	r1, [pc, #380]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
 8002ce0:	e018      	b.n	8002d14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce2:	4b5d      	ldr	r3, [pc, #372]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a5c      	ldr	r2, [pc, #368]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe fa61 	bl	80011b4 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fa5d 	bl	80011b4 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e1f9      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d08:	4b53      	ldr	r3, [pc, #332]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f0      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d03c      	beq.n	8002d9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01c      	beq.n	8002d62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d28:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2e:	4a4a      	ldr	r2, [pc, #296]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe fa3c 	bl	80011b4 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d40:	f7fe fa38 	bl	80011b4 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1d4      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d52:	4b41      	ldr	r3, [pc, #260]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ef      	beq.n	8002d40 <HAL_RCC_OscConfig+0x3ec>
 8002d60:	e01b      	b.n	8002d9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d62:	4b3d      	ldr	r3, [pc, #244]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d68:	4a3b      	ldr	r2, [pc, #236]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7fe fa1f 	bl	80011b4 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7a:	f7fe fa1b 	bl	80011b4 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e1b7      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d8c:	4b32      	ldr	r3, [pc, #200]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ef      	bne.n	8002d7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80a6 	beq.w	8002ef4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da8:	2300      	movs	r3, #0
 8002daa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dac:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10d      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db8:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	4a26      	ldr	r2, [pc, #152]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002dc4:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd4:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_RCC_OscConfig+0x508>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d118      	bne.n	8002e12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002de0:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_RCC_OscConfig+0x508>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1d      	ldr	r2, [pc, #116]	; (8002e5c <HAL_RCC_OscConfig+0x508>)
 8002de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dec:	f7fe f9e2 	bl	80011b4 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df4:	f7fe f9de 	bl	80011b4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e17a      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_RCC_OscConfig+0x508>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d108      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4d8>
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e2a:	e029      	b.n	8002e80 <HAL_RCC_OscConfig+0x52c>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d115      	bne.n	8002e60 <HAL_RCC_OscConfig+0x50c>
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3a:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	4a03      	ldr	r2, [pc, #12]	; (8002e58 <HAL_RCC_OscConfig+0x504>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e54:	e014      	b.n	8002e80 <HAL_RCC_OscConfig+0x52c>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	4b9c      	ldr	r3, [pc, #624]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	4a9b      	ldr	r2, [pc, #620]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e70:	4b98      	ldr	r3, [pc, #608]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	4a97      	ldr	r2, [pc, #604]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d016      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe f994 	bl	80011b4 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe f990 	bl	80011b4 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e12a      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea6:	4b8b      	ldr	r3, [pc, #556]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ed      	beq.n	8002e90 <HAL_RCC_OscConfig+0x53c>
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7fe f97d 	bl	80011b4 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fe f979 	bl	80011b4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e113      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ed4:	4b7f      	ldr	r3, [pc, #508]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ed      	bne.n	8002ebe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee2:	7ffb      	ldrb	r3, [r7, #31]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee8:	4b7a      	ldr	r3, [pc, #488]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eec:	4a79      	ldr	r2, [pc, #484]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002eee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80fe 	beq.w	80030fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	f040 80d0 	bne.w	80030a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f08:	4b72      	ldr	r3, [pc, #456]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 0203 	and.w	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d130      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	3b01      	subs	r3, #1
 8002f28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d127      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d11f      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f48:	2a07      	cmp	r2, #7
 8002f4a:	bf14      	ite	ne
 8002f4c:	2201      	movne	r2, #1
 8002f4e:	2200      	moveq	r2, #0
 8002f50:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d113      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	3b01      	subs	r3, #1
 8002f64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d109      	bne.n	8002f7e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d06e      	beq.n	800305c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d069      	beq.n	8003058 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f90:	4b50      	ldr	r3, [pc, #320]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0ad      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a4b      	ldr	r2, [pc, #300]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002faa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fac:	f7fe f902 	bl	80011b4 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe f8fe 	bl	80011b4 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e09a      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc6:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd2:	4b40      	ldr	r3, [pc, #256]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <HAL_RCC_OscConfig+0x784>)
 8002fd8:	4013      	ands	r3, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fe2:	3a01      	subs	r2, #1
 8002fe4:	0112      	lsls	r2, r2, #4
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fec:	0212      	lsls	r2, r2, #8
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ff4:	0852      	lsrs	r2, r2, #1
 8002ff6:	3a01      	subs	r2, #1
 8002ff8:	0552      	lsls	r2, r2, #21
 8002ffa:	4311      	orrs	r1, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003000:	0852      	lsrs	r2, r2, #1
 8003002:	3a01      	subs	r2, #1
 8003004:	0652      	lsls	r2, r2, #25
 8003006:	4311      	orrs	r1, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800300c:	0912      	lsrs	r2, r2, #4
 800300e:	0452      	lsls	r2, r2, #17
 8003010:	430a      	orrs	r2, r1
 8003012:	4930      	ldr	r1, [pc, #192]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8003014:	4313      	orrs	r3, r2
 8003016:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003018:	4b2e      	ldr	r3, [pc, #184]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a2d      	ldr	r2, [pc, #180]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800301e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003022:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003024:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a2a      	ldr	r2, [pc, #168]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800302a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800302e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003030:	f7fe f8c0 	bl	80011b4 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003038:	f7fe f8bc 	bl	80011b4 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e058      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304a:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003056:	e050      	b.n	80030fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e04f      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305c:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d148      	bne.n	80030fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003068:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800306e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003072:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003074:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a16      	ldr	r2, [pc, #88]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800307a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003080:	f7fe f898 	bl	80011b4 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe f894 	bl	80011b4 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e030      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309a:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x734>
 80030a6:	e028      	b.n	80030fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d023      	beq.n	80030f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <HAL_RCC_OscConfig+0x780>)
 80030b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fe f87b 	bl	80011b4 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c0:	e00c      	b.n	80030dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fe f877 	bl	80011b4 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d905      	bls.n	80030dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e013      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
 80030d4:	40021000 	.word	0x40021000
 80030d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_RCC_OscConfig+0x7b0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1ec      	bne.n	80030c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_RCC_OscConfig+0x7b0>)
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	4905      	ldr	r1, [pc, #20]	; (8003104 <HAL_RCC_OscConfig+0x7b0>)
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_OscConfig+0x7b4>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	60cb      	str	r3, [r1, #12]
 80030f4:	e001      	b.n	80030fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40021000 	.word	0x40021000
 8003108:	feeefffc 	.word	0xfeeefffc

0800310c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0e7      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b75      	ldr	r3, [pc, #468]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d910      	bls.n	8003150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b72      	ldr	r3, [pc, #456]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	4970      	ldr	r1, [pc, #448]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b6e      	ldr	r3, [pc, #440]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0cf      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d010      	beq.n	800317e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	4b66      	ldr	r3, [pc, #408]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003168:	429a      	cmp	r2, r3
 800316a:	d908      	bls.n	800317e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316c:	4b63      	ldr	r3, [pc, #396]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4960      	ldr	r1, [pc, #384]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d04c      	beq.n	8003224 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	4b5a      	ldr	r3, [pc, #360]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d121      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e0a6      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031aa:	4b54      	ldr	r3, [pc, #336]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d115      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e09a      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031c2:	4b4e      	ldr	r3, [pc, #312]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e08e      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031d2:	4b4a      	ldr	r3, [pc, #296]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e086      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b46      	ldr	r3, [pc, #280]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4943      	ldr	r1, [pc, #268]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f4:	f7fd ffde 	bl	80011b4 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7fd ffda 	bl	80011b4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e06e      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d010      	beq.n	8003252 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800323c:	429a      	cmp	r2, r3
 800323e:	d208      	bcs.n	8003252 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003240:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	492b      	ldr	r1, [pc, #172]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003252:	4b29      	ldr	r3, [pc, #164]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d210      	bcs.n	8003282 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f023 0207 	bic.w	r2, r3, #7
 8003268:	4923      	ldr	r1, [pc, #140]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003270:	4b21      	ldr	r3, [pc, #132]	; (80032f8 <HAL_RCC_ClockConfig+0x1ec>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d001      	beq.n	8003282 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e036      	b.n	80032f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328e:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4918      	ldr	r1, [pc, #96]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d009      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ac:	4b13      	ldr	r3, [pc, #76]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4910      	ldr	r1, [pc, #64]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032c0:	f000 f824 	bl	800330c <HAL_RCC_GetSysClockFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <HAL_RCC_ClockConfig+0x1f0>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	490b      	ldr	r1, [pc, #44]	; (8003300 <HAL_RCC_ClockConfig+0x1f4>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
 80032dc:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x1f8>)
 80032de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <HAL_RCC_ClockConfig+0x1fc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd ff15 	bl	8001114 <HAL_InitTick>
 80032ea:	4603      	mov	r3, r0
 80032ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80032ee:	7afb      	ldrb	r3, [r7, #11]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40022000 	.word	0x40022000
 80032fc:	40021000 	.word	0x40021000
 8003300:	08005db0 	.word	0x08005db0
 8003304:	20000004 	.word	0x20000004
 8003308:	20000008 	.word	0x20000008

0800330c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331a:	4b3e      	ldr	r3, [pc, #248]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003324:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x34>
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d121      	bne.n	800337e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d11e      	bne.n	800337e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003340:	4b34      	ldr	r3, [pc, #208]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800334c:	4b31      	ldr	r3, [pc, #196]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 800334e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	e005      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800335c:	4b2d      	ldr	r3, [pc, #180]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003368:	4a2b      	ldr	r2, [pc, #172]	; (8003418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10d      	bne.n	8003394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b04      	cmp	r3, #4
 8003382:	d102      	bne.n	800338a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003384:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_RCC_GetSysClockFreq+0x110>)
 8003386:	61bb      	str	r3, [r7, #24]
 8003388:	e004      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d101      	bne.n	8003394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003390:	4b23      	ldr	r3, [pc, #140]	; (8003420 <HAL_RCC_GetSysClockFreq+0x114>)
 8003392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	2b0c      	cmp	r3, #12
 8003398:	d134      	bne.n	8003404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800339a:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d003      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0xac>
 80033b0:	e005      	b.n	80033be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCC_GetSysClockFreq+0x110>)
 80033b4:	617b      	str	r3, [r7, #20]
      break;
 80033b6:	e005      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ba:	617b      	str	r3, [r7, #20]
      break;
 80033bc:	e002      	b.n	80033c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	617b      	str	r3, [r7, #20]
      break;
 80033c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033c4:	4b13      	ldr	r3, [pc, #76]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	3301      	adds	r3, #1
 80033d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033d2:	4b10      	ldr	r3, [pc, #64]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	fb03 f202 	mul.w	r2, r3, r2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033ea:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	0e5b      	lsrs	r3, r3, #25
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	3301      	adds	r3, #1
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003404:	69bb      	ldr	r3, [r7, #24]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	; 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40021000 	.word	0x40021000
 8003418:	08005dc8 	.word	0x08005dc8
 800341c:	00f42400 	.word	0x00f42400
 8003420:	007a1200 	.word	0x007a1200

08003424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003428:	4b03      	ldr	r3, [pc, #12]	; (8003438 <HAL_RCC_GetHCLKFreq+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000004 	.word	0x20000004

0800343c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003440:	f7ff fff0 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0a1b      	lsrs	r3, r3, #8
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4904      	ldr	r1, [pc, #16]	; (8003464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000
 8003464:	08005dc0 	.word	0x08005dc0

08003468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800346c:	f7ff ffda 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0adb      	lsrs	r3, r3, #11
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4904      	ldr	r1, [pc, #16]	; (8003490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	08005dc0 	.word	0x08005dc0

08003494 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800349c:	2300      	movs	r3, #0
 800349e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80034a0:	4b2a      	ldr	r3, [pc, #168]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034ac:	f7ff f9ee 	bl	800288c <HAL_PWREx_GetVoltageRange>
 80034b0:	6178      	str	r0, [r7, #20]
 80034b2:	e014      	b.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	4a24      	ldr	r2, [pc, #144]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034be:	6593      	str	r3, [r2, #88]	; 0x58
 80034c0:	4b22      	ldr	r3, [pc, #136]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034cc:	f7ff f9de 	bl	800288c <HAL_PWREx_GetVoltageRange>
 80034d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034d2:	4b1e      	ldr	r3, [pc, #120]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	4a1d      	ldr	r2, [pc, #116]	; (800354c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e4:	d10b      	bne.n	80034fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b80      	cmp	r3, #128	; 0x80
 80034ea:	d919      	bls.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2ba0      	cmp	r3, #160	; 0xa0
 80034f0:	d902      	bls.n	80034f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034f2:	2302      	movs	r3, #2
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	e013      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034f8:	2301      	movs	r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	e010      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b80      	cmp	r3, #128	; 0x80
 8003502:	d902      	bls.n	800350a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003504:	2303      	movs	r3, #3
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	e00a      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b80      	cmp	r3, #128	; 0x80
 800350e:	d102      	bne.n	8003516 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003510:	2302      	movs	r3, #2
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	e004      	b.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b70      	cmp	r3, #112	; 0x70
 800351a:	d101      	bne.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800351c:	2301      	movs	r3, #1
 800351e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 0207 	bic.w	r2, r3, #7
 8003528:	4909      	ldr	r1, [pc, #36]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	429a      	cmp	r2, r3
 800353c:	d001      	beq.n	8003542 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	40022000 	.word	0x40022000

08003554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800355c:	2300      	movs	r3, #0
 800355e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003560:	2300      	movs	r3, #0
 8003562:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356c:	2b00      	cmp	r3, #0
 800356e:	d041      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003574:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003578:	d02a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800357a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800357e:	d824      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003580:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003584:	d008      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003586:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800358a:	d81e      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003594:	d010      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003596:	e018      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003598:	4b86      	ldr	r3, [pc, #536]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4a85      	ldr	r2, [pc, #532]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035a4:	e015      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fabb 	bl	8003b28 <RCCEx_PLLSAI1_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035b6:	e00c      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3320      	adds	r3, #32
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fba6 	bl	8003d10 <RCCEx_PLLSAI2_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035c8:	e003      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	74fb      	strb	r3, [r7, #19]
      break;
 80035ce:	e000      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035d8:	4b76      	ldr	r3, [pc, #472]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e6:	4973      	ldr	r1, [pc, #460]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ee:	e001      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f0:	7cfb      	ldrb	r3, [r7, #19]
 80035f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d041      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003604:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003608:	d02a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800360a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800360e:	d824      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003614:	d008      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800361a:	d81e      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003624:	d010      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003626:	e018      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003628:	4b62      	ldr	r3, [pc, #392]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a61      	ldr	r2, [pc, #388]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003632:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003634:	e015      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fa73 	bl	8003b28 <RCCEx_PLLSAI1_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003646:	e00c      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3320      	adds	r3, #32
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fb5e 	bl	8003d10 <RCCEx_PLLSAI2_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	74fb      	strb	r3, [r7, #19]
      break;
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003668:	4b52      	ldr	r3, [pc, #328]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003676:	494f      	ldr	r1, [pc, #316]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800367e:	e001      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 80a0 	beq.w	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003692:	2300      	movs	r3, #0
 8003694:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003696:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80036a6:	2300      	movs	r3, #0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00d      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ac:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	4a40      	ldr	r2, [pc, #256]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6593      	str	r3, [r2, #88]	; 0x58
 80036b8:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c4:	2301      	movs	r3, #1
 80036c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c8:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a3a      	ldr	r2, [pc, #232]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036d4:	f7fd fd6e 	bl	80011b4 <HAL_GetTick>
 80036d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036da:	e009      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036dc:	f7fd fd6a 	bl	80011b4 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d902      	bls.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	74fb      	strb	r3, [r7, #19]
        break;
 80036ee:	e005      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ef      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d15c      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003702:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01f      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	429a      	cmp	r2, r3
 800371e:	d019      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003720:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800372c:	4b21      	ldr	r3, [pc, #132]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003732:	4a20      	ldr	r2, [pc, #128]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800373c:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	4a1c      	ldr	r2, [pc, #112]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800374c:	4a19      	ldr	r2, [pc, #100]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d016      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fd fd29 	bl	80011b4 <HAL_GetTick>
 8003762:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003764:	e00b      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fd fd25 	bl	80011b4 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d902      	bls.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	74fb      	strb	r3, [r7, #19]
            break;
 800377c:	e006      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800377e:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ec      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10c      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a2:	4904      	ldr	r1, [pc, #16]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037aa:	e009      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	74bb      	strb	r3, [r7, #18]
 80037b0:	e006      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80037b2:	bf00      	nop
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c0:	7c7b      	ldrb	r3, [r7, #17]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d105      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c6:	4b9e      	ldr	r3, [pc, #632]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	4a9d      	ldr	r2, [pc, #628]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037de:	4b98      	ldr	r3, [pc, #608]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f023 0203 	bic.w	r2, r3, #3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	4994      	ldr	r1, [pc, #592]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003800:	4b8f      	ldr	r3, [pc, #572]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f023 020c 	bic.w	r2, r3, #12
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	498c      	ldr	r1, [pc, #560]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0304 	and.w	r3, r3, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003822:	4b87      	ldr	r3, [pc, #540]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	4983      	ldr	r1, [pc, #524]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003844:	4b7e      	ldr	r3, [pc, #504]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	497b      	ldr	r1, [pc, #492]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003866:	4b76      	ldr	r3, [pc, #472]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003874:	4972      	ldr	r1, [pc, #456]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003888:	4b6d      	ldr	r3, [pc, #436]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003896:	496a      	ldr	r1, [pc, #424]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038aa:	4b65      	ldr	r3, [pc, #404]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	4961      	ldr	r1, [pc, #388]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038cc:	4b5c      	ldr	r3, [pc, #368]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038da:	4959      	ldr	r1, [pc, #356]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ee:	4b54      	ldr	r3, [pc, #336]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fc:	4950      	ldr	r1, [pc, #320]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003910:	4b4b      	ldr	r3, [pc, #300]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	4948      	ldr	r1, [pc, #288]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003932:	4b43      	ldr	r3, [pc, #268]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	493f      	ldr	r1, [pc, #252]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d028      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003954:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003962:	4937      	ldr	r1, [pc, #220]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003972:	d106      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003974:	4b32      	ldr	r3, [pc, #200]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4a31      	ldr	r2, [pc, #196]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800397e:	60d3      	str	r3, [r2, #12]
 8003980:	e011      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003986:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800398a:	d10c      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	2101      	movs	r1, #1
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f8c8 	bl	8003b28 <RCCEx_PLLSAI1_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800399c:	7cfb      	ldrb	r3, [r7, #19]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d028      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039b2:	4b23      	ldr	r3, [pc, #140]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	491f      	ldr	r1, [pc, #124]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d0:	d106      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	4a1a      	ldr	r2, [pc, #104]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039dc:	60d3      	str	r3, [r2, #12]
 80039de:	e011      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2101      	movs	r1, #1
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 f899 	bl	8003b28 <RCCEx_PLLSAI1_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039fa:	7cfb      	ldrb	r3, [r7, #19]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a00:	7cfb      	ldrb	r3, [r7, #19]
 8003a02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d02b      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1e:	4908      	ldr	r1, [pc, #32]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a2e:	d109      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a02      	ldr	r2, [pc, #8]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3a:	60d3      	str	r3, [r2, #12]
 8003a3c:	e014      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a4c:	d10c      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2101      	movs	r1, #1
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f867 	bl	8003b28 <RCCEx_PLLSAI1_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d02f      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a74:	4b2b      	ldr	r3, [pc, #172]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a82:	4928      	ldr	r1, [pc, #160]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a92:	d10d      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	2102      	movs	r1, #2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f844 	bl	8003b28 <RCCEx_PLLSAI1_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d014      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003aaa:	7cfb      	ldrb	r3, [r7, #19]
 8003aac:	74bb      	strb	r3, [r7, #18]
 8003aae:	e011      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3320      	adds	r3, #32
 8003abe:	2102      	movs	r1, #2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 f925 	bl	8003d10 <RCCEx_PLLSAI2_Config>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ad0:	7cfb      	ldrb	r3, [r7, #19]
 8003ad2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aee:	490d      	ldr	r1, [pc, #52]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b12:	4904      	ldr	r1, [pc, #16]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40021000 	.word	0x40021000

08003b28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b36:	4b75      	ldr	r3, [pc, #468]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d018      	beq.n	8003b74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b42:	4b72      	ldr	r3, [pc, #456]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0203 	and.w	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d10d      	bne.n	8003b6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
       ||
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b5a:	4b6c      	ldr	r3, [pc, #432]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
       ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d047      	beq.n	8003bfe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	e044      	b.n	8003bfe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d018      	beq.n	8003bae <RCCEx_PLLSAI1_Config+0x86>
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d825      	bhi.n	8003bcc <RCCEx_PLLSAI1_Config+0xa4>
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d002      	beq.n	8003b8a <RCCEx_PLLSAI1_Config+0x62>
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d009      	beq.n	8003b9c <RCCEx_PLLSAI1_Config+0x74>
 8003b88:	e020      	b.n	8003bcc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b8a:	4b60      	ldr	r3, [pc, #384]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d11d      	bne.n	8003bd2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9a:	e01a      	b.n	8003bd2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b9c:	4b5b      	ldr	r3, [pc, #364]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d116      	bne.n	8003bd6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bac:	e013      	b.n	8003bd6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bae:	4b57      	ldr	r3, [pc, #348]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bba:	4b54      	ldr	r3, [pc, #336]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bca:	e006      	b.n	8003bda <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd0:	e004      	b.n	8003bdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e002      	b.n	8003bdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bda:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10d      	bne.n	8003bfe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003be2:	4b4a      	ldr	r3, [pc, #296]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	4944      	ldr	r1, [pc, #272]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d17d      	bne.n	8003d00 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c04:	4b41      	ldr	r3, [pc, #260]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a40      	ldr	r2, [pc, #256]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fd fad0 	bl	80011b4 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c16:	e009      	b.n	8003c2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c18:	f7fd facc 	bl	80011b4 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d902      	bls.n	8003c2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	73fb      	strb	r3, [r7, #15]
        break;
 8003c2a:	e005      	b.n	8003c38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c2c:	4b37      	ldr	r3, [pc, #220]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1ef      	bne.n	8003c18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d160      	bne.n	8003d00 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d111      	bne.n	8003c68 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c44:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6892      	ldr	r2, [r2, #8]
 8003c54:	0211      	lsls	r1, r2, #8
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68d2      	ldr	r2, [r2, #12]
 8003c5a:	0912      	lsrs	r2, r2, #4
 8003c5c:	0452      	lsls	r2, r2, #17
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	492a      	ldr	r1, [pc, #168]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	610b      	str	r3, [r1, #16]
 8003c66:	e027      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d112      	bne.n	8003c94 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c6e:	4b27      	ldr	r3, [pc, #156]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6892      	ldr	r2, [r2, #8]
 8003c7e:	0211      	lsls	r1, r2, #8
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6912      	ldr	r2, [r2, #16]
 8003c84:	0852      	lsrs	r2, r2, #1
 8003c86:	3a01      	subs	r2, #1
 8003c88:	0552      	lsls	r2, r2, #21
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	491f      	ldr	r1, [pc, #124]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	610b      	str	r3, [r1, #16]
 8003c92:	e011      	b.n	8003cb8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6892      	ldr	r2, [r2, #8]
 8003ca4:	0211      	lsls	r1, r2, #8
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6952      	ldr	r2, [r2, #20]
 8003caa:	0852      	lsrs	r2, r2, #1
 8003cac:	3a01      	subs	r2, #1
 8003cae:	0652      	lsls	r2, r2, #25
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	4916      	ldr	r1, [pc, #88]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003cb8:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a13      	ldr	r2, [pc, #76]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc4:	f7fd fa76 	bl	80011b4 <HAL_GetTick>
 8003cc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cca:	e009      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ccc:	f7fd fa72 	bl	80011b4 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d902      	bls.n	8003ce0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	73fb      	strb	r3, [r7, #15]
          break;
 8003cde:	e005      	b.n	8003cec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ef      	beq.n	8003ccc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	4904      	ldr	r1, [pc, #16]	; (8003d0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40021000 	.word	0x40021000

08003d10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d1e:	4b6a      	ldr	r3, [pc, #424]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d018      	beq.n	8003d5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003d2a:	4b67      	ldr	r3, [pc, #412]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0203 	and.w	r2, r3, #3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d10d      	bne.n	8003d56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d42:	4b61      	ldr	r3, [pc, #388]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
       ||
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d047      	beq.n	8003de6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
 8003d5a:	e044      	b.n	8003de6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d018      	beq.n	8003d96 <RCCEx_PLLSAI2_Config+0x86>
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d825      	bhi.n	8003db4 <RCCEx_PLLSAI2_Config+0xa4>
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d002      	beq.n	8003d72 <RCCEx_PLLSAI2_Config+0x62>
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d009      	beq.n	8003d84 <RCCEx_PLLSAI2_Config+0x74>
 8003d70:	e020      	b.n	8003db4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d72:	4b55      	ldr	r3, [pc, #340]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11d      	bne.n	8003dba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d82:	e01a      	b.n	8003dba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d84:	4b50      	ldr	r3, [pc, #320]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d116      	bne.n	8003dbe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d94:	e013      	b.n	8003dbe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d96:	4b4c      	ldr	r3, [pc, #304]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10f      	bne.n	8003dc2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003da2:	4b49      	ldr	r3, [pc, #292]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003db2:	e006      	b.n	8003dc2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
      break;
 8003db8:	e004      	b.n	8003dc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dba:	bf00      	nop
 8003dbc:	e002      	b.n	8003dc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dbe:	bf00      	nop
 8003dc0:	e000      	b.n	8003dc4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003dc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10d      	bne.n	8003de6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dca:	4b3f      	ldr	r3, [pc, #252]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6819      	ldr	r1, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	430b      	orrs	r3, r1
 8003de0:	4939      	ldr	r1, [pc, #228]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d167      	bne.n	8003ebc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dec:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a35      	ldr	r2, [pc, #212]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df8:	f7fd f9dc 	bl	80011b4 <HAL_GetTick>
 8003dfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dfe:	e009      	b.n	8003e14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e00:	f7fd f9d8 	bl	80011b4 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d902      	bls.n	8003e14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	73fb      	strb	r3, [r7, #15]
        break;
 8003e12:	e005      	b.n	8003e20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e14:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ef      	bne.n	8003e00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d14a      	bne.n	8003ebc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d111      	bne.n	8003e50 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e2c:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6892      	ldr	r2, [r2, #8]
 8003e3c:	0211      	lsls	r1, r2, #8
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68d2      	ldr	r2, [r2, #12]
 8003e42:	0912      	lsrs	r2, r2, #4
 8003e44:	0452      	lsls	r2, r2, #17
 8003e46:	430a      	orrs	r2, r1
 8003e48:	491f      	ldr	r1, [pc, #124]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	614b      	str	r3, [r1, #20]
 8003e4e:	e011      	b.n	8003e74 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e50:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6892      	ldr	r2, [r2, #8]
 8003e60:	0211      	lsls	r1, r2, #8
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6912      	ldr	r2, [r2, #16]
 8003e66:	0852      	lsrs	r2, r2, #1
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	0652      	lsls	r2, r2, #25
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	4916      	ldr	r1, [pc, #88]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e74:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e80:	f7fd f998 	bl	80011b4 <HAL_GetTick>
 8003e84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e86:	e009      	b.n	8003e9c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e88:	f7fd f994 	bl	80011b4 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d902      	bls.n	8003e9c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	73fb      	strb	r3, [r7, #15]
          break;
 8003e9a:	e005      	b.n	8003ea8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0ef      	beq.n	8003e88 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003eae:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	4904      	ldr	r1, [pc, #16]	; (8003ec8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40021000 	.word	0x40021000

08003ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e049      	b.n	8003f72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd f842 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f000 f89e 	bl	800404c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d001      	beq.n	8003f94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e047      	b.n	8004024 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a23      	ldr	r2, [pc, #140]	; (8004030 <HAL_TIM_Base_Start+0xb4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01d      	beq.n	8003fe2 <HAL_TIM_Base_Start+0x66>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fae:	d018      	beq.n	8003fe2 <HAL_TIM_Base_Start+0x66>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <HAL_TIM_Base_Start+0xb8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <HAL_TIM_Base_Start+0x66>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1e      	ldr	r2, [pc, #120]	; (8004038 <HAL_TIM_Base_Start+0xbc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d00e      	beq.n	8003fe2 <HAL_TIM_Base_Start+0x66>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	; (800403c <HAL_TIM_Base_Start+0xc0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d009      	beq.n	8003fe2 <HAL_TIM_Base_Start+0x66>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <HAL_TIM_Base_Start+0xc4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_TIM_Base_Start+0x66>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a19      	ldr	r2, [pc, #100]	; (8004044 <HAL_TIM_Base_Start+0xc8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d115      	bne.n	800400e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	4b17      	ldr	r3, [pc, #92]	; (8004048 <HAL_TIM_Base_Start+0xcc>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b06      	cmp	r3, #6
 8003ff2:	d015      	beq.n	8004020 <HAL_TIM_Base_Start+0xa4>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffa:	d011      	beq.n	8004020 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400c:	e008      	b.n	8004020 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e000      	b.n	8004022 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004020:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40000400 	.word	0x40000400
 8004038:	40000800 	.word	0x40000800
 800403c:	40000c00 	.word	0x40000c00
 8004040:	40013400 	.word	0x40013400
 8004044:	40014000 	.word	0x40014000
 8004048:	00010007 	.word	0x00010007

0800404c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a40      	ldr	r2, [pc, #256]	; (8004160 <TIM_Base_SetConfig+0x114>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d013      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406a:	d00f      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a3d      	ldr	r2, [pc, #244]	; (8004164 <TIM_Base_SetConfig+0x118>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00b      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a3c      	ldr	r2, [pc, #240]	; (8004168 <TIM_Base_SetConfig+0x11c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d007      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a3b      	ldr	r2, [pc, #236]	; (800416c <TIM_Base_SetConfig+0x120>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a3a      	ldr	r2, [pc, #232]	; (8004170 <TIM_Base_SetConfig+0x124>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d108      	bne.n	800409e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a2f      	ldr	r2, [pc, #188]	; (8004160 <TIM_Base_SetConfig+0x114>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01f      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d01b      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <TIM_Base_SetConfig+0x118>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d017      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a2b      	ldr	r2, [pc, #172]	; (8004168 <TIM_Base_SetConfig+0x11c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d013      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a2a      	ldr	r2, [pc, #168]	; (800416c <TIM_Base_SetConfig+0x120>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00f      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a29      	ldr	r2, [pc, #164]	; (8004170 <TIM_Base_SetConfig+0x124>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00b      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a28      	ldr	r2, [pc, #160]	; (8004174 <TIM_Base_SetConfig+0x128>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d007      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a27      	ldr	r2, [pc, #156]	; (8004178 <TIM_Base_SetConfig+0x12c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_Base_SetConfig+0x9a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a26      	ldr	r2, [pc, #152]	; (800417c <TIM_Base_SetConfig+0x130>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d108      	bne.n	80040f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a10      	ldr	r2, [pc, #64]	; (8004160 <TIM_Base_SetConfig+0x114>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00f      	beq.n	8004144 <TIM_Base_SetConfig+0xf8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a12      	ldr	r2, [pc, #72]	; (8004170 <TIM_Base_SetConfig+0x124>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00b      	beq.n	8004144 <TIM_Base_SetConfig+0xf8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a11      	ldr	r2, [pc, #68]	; (8004174 <TIM_Base_SetConfig+0x128>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d007      	beq.n	8004144 <TIM_Base_SetConfig+0xf8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a10      	ldr	r2, [pc, #64]	; (8004178 <TIM_Base_SetConfig+0x12c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_Base_SetConfig+0xf8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a0f      	ldr	r2, [pc, #60]	; (800417c <TIM_Base_SetConfig+0x130>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d103      	bne.n	800414c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	615a      	str	r2, [r3, #20]
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40012c00 	.word	0x40012c00
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800
 800416c:	40000c00 	.word	0x40000c00
 8004170:	40013400 	.word	0x40013400
 8004174:	40014000 	.word	0x40014000
 8004178:	40014400 	.word	0x40014400
 800417c:	40014800 	.word	0x40014800

08004180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004194:	2302      	movs	r3, #2
 8004196:	e068      	b.n	800426a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a2e      	ldr	r2, [pc, #184]	; (8004278 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a2d      	ldr	r2, [pc, #180]	; (800427c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d108      	bne.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80041d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01d      	beq.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d018      	beq.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a1a      	ldr	r2, [pc, #104]	; (8004284 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00e      	beq.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a18      	ldr	r2, [pc, #96]	; (8004288 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d009      	beq.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a13      	ldr	r2, [pc, #76]	; (800427c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a14      	ldr	r2, [pc, #80]	; (800428c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d10c      	bne.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	4313      	orrs	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40012c00 	.word	0x40012c00
 800427c:	40013400 	.word	0x40013400
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40014000 	.word	0x40014000

08004290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e040      	b.n	8004324 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7fc feb6 	bl	8001024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2224      	movs	r2, #36	; 0x24
 80042bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fb6a 	bl	80049b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f8af 	bl	8004440 <UART_SetConfig>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e01b      	b.n	8004324 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800430a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fbe9 	bl	8004af4 <UART_CheckIdleState>
 8004322:	4603      	mov	r3, r0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004340:	2b20      	cmp	r3, #32
 8004342:	d178      	bne.n	8004436 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <HAL_UART_Transmit+0x24>
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e071      	b.n	8004438 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2221      	movs	r2, #33	; 0x21
 8004360:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004362:	f7fc ff27 	bl	80011b4 <HAL_GetTick>
 8004366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	88fa      	ldrh	r2, [r7, #6]
 800436c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	88fa      	ldrh	r2, [r7, #6]
 8004374:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004380:	d108      	bne.n	8004394 <HAL_UART_Transmit+0x68>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d104      	bne.n	8004394 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	e003      	b.n	800439c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004398:	2300      	movs	r3, #0
 800439a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800439c:	e030      	b.n	8004400 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2180      	movs	r1, #128	; 0x80
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fc4b 	bl	8004c44 <UART_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d004      	beq.n	80043be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e03c      	b.n	8004438 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	881a      	ldrh	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043d0:	b292      	uxth	r2, r2
 80043d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	3302      	adds	r3, #2
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	e008      	b.n	80043ee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	781a      	ldrb	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	b292      	uxth	r2, r2
 80043e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	3301      	adds	r3, #1
 80043ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1c8      	bne.n	800439e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2200      	movs	r2, #0
 8004414:	2140      	movs	r1, #64	; 0x40
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fc14 	bl	8004c44 <UART_WaitOnFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e005      	b.n	8004438 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e000      	b.n	8004438 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004436:	2302      	movs	r3, #2
  }
}
 8004438:	4618      	mov	r0, r3
 800443a:	3720      	adds	r7, #32
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004444:	b08a      	sub	sp, #40	; 0x28
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	431a      	orrs	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	431a      	orrs	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	4313      	orrs	r3, r2
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4ba4      	ldr	r3, [pc, #656]	; (8004700 <UART_SetConfig+0x2c0>)
 8004470:	4013      	ands	r3, r2
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004478:	430b      	orrs	r3, r1
 800447a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a99      	ldr	r2, [pc, #612]	; (8004704 <UART_SetConfig+0x2c4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a8:	4313      	orrs	r3, r2
 80044aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a90      	ldr	r2, [pc, #576]	; (8004708 <UART_SetConfig+0x2c8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d126      	bne.n	8004518 <UART_SetConfig+0xd8>
 80044ca:	4b90      	ldr	r3, [pc, #576]	; (800470c <UART_SetConfig+0x2cc>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d81b      	bhi.n	8004510 <UART_SetConfig+0xd0>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0xa0>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	080044f1 	.word	0x080044f1
 80044e4:	08004501 	.word	0x08004501
 80044e8:	080044f9 	.word	0x080044f9
 80044ec:	08004509 	.word	0x08004509
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f6:	e116      	b.n	8004726 <UART_SetConfig+0x2e6>
 80044f8:	2302      	movs	r3, #2
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fe:	e112      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004500:	2304      	movs	r3, #4
 8004502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004506:	e10e      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004508:	2308      	movs	r3, #8
 800450a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800450e:	e10a      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004510:	2310      	movs	r3, #16
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004516:	e106      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a7c      	ldr	r2, [pc, #496]	; (8004710 <UART_SetConfig+0x2d0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d138      	bne.n	8004594 <UART_SetConfig+0x154>
 8004522:	4b7a      	ldr	r3, [pc, #488]	; (800470c <UART_SetConfig+0x2cc>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b0c      	cmp	r3, #12
 800452e:	d82d      	bhi.n	800458c <UART_SetConfig+0x14c>
 8004530:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <UART_SetConfig+0xf8>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	0800456d 	.word	0x0800456d
 800453c:	0800458d 	.word	0x0800458d
 8004540:	0800458d 	.word	0x0800458d
 8004544:	0800458d 	.word	0x0800458d
 8004548:	0800457d 	.word	0x0800457d
 800454c:	0800458d 	.word	0x0800458d
 8004550:	0800458d 	.word	0x0800458d
 8004554:	0800458d 	.word	0x0800458d
 8004558:	08004575 	.word	0x08004575
 800455c:	0800458d 	.word	0x0800458d
 8004560:	0800458d 	.word	0x0800458d
 8004564:	0800458d 	.word	0x0800458d
 8004568:	08004585 	.word	0x08004585
 800456c:	2300      	movs	r3, #0
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004572:	e0d8      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004574:	2302      	movs	r3, #2
 8004576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457a:	e0d4      	b.n	8004726 <UART_SetConfig+0x2e6>
 800457c:	2304      	movs	r3, #4
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004582:	e0d0      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004584:	2308      	movs	r3, #8
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458a:	e0cc      	b.n	8004726 <UART_SetConfig+0x2e6>
 800458c:	2310      	movs	r3, #16
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004592:	e0c8      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a5e      	ldr	r2, [pc, #376]	; (8004714 <UART_SetConfig+0x2d4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d125      	bne.n	80045ea <UART_SetConfig+0x1aa>
 800459e:	4b5b      	ldr	r3, [pc, #364]	; (800470c <UART_SetConfig+0x2cc>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045a8:	2b30      	cmp	r3, #48	; 0x30
 80045aa:	d016      	beq.n	80045da <UART_SetConfig+0x19a>
 80045ac:	2b30      	cmp	r3, #48	; 0x30
 80045ae:	d818      	bhi.n	80045e2 <UART_SetConfig+0x1a2>
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d00a      	beq.n	80045ca <UART_SetConfig+0x18a>
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d814      	bhi.n	80045e2 <UART_SetConfig+0x1a2>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <UART_SetConfig+0x182>
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d008      	beq.n	80045d2 <UART_SetConfig+0x192>
 80045c0:	e00f      	b.n	80045e2 <UART_SetConfig+0x1a2>
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c8:	e0ad      	b.n	8004726 <UART_SetConfig+0x2e6>
 80045ca:	2302      	movs	r3, #2
 80045cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d0:	e0a9      	b.n	8004726 <UART_SetConfig+0x2e6>
 80045d2:	2304      	movs	r3, #4
 80045d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d8:	e0a5      	b.n	8004726 <UART_SetConfig+0x2e6>
 80045da:	2308      	movs	r3, #8
 80045dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e0:	e0a1      	b.n	8004726 <UART_SetConfig+0x2e6>
 80045e2:	2310      	movs	r3, #16
 80045e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e8:	e09d      	b.n	8004726 <UART_SetConfig+0x2e6>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a4a      	ldr	r2, [pc, #296]	; (8004718 <UART_SetConfig+0x2d8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d125      	bne.n	8004640 <UART_SetConfig+0x200>
 80045f4:	4b45      	ldr	r3, [pc, #276]	; (800470c <UART_SetConfig+0x2cc>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004600:	d016      	beq.n	8004630 <UART_SetConfig+0x1f0>
 8004602:	2bc0      	cmp	r3, #192	; 0xc0
 8004604:	d818      	bhi.n	8004638 <UART_SetConfig+0x1f8>
 8004606:	2b80      	cmp	r3, #128	; 0x80
 8004608:	d00a      	beq.n	8004620 <UART_SetConfig+0x1e0>
 800460a:	2b80      	cmp	r3, #128	; 0x80
 800460c:	d814      	bhi.n	8004638 <UART_SetConfig+0x1f8>
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <UART_SetConfig+0x1d8>
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d008      	beq.n	8004628 <UART_SetConfig+0x1e8>
 8004616:	e00f      	b.n	8004638 <UART_SetConfig+0x1f8>
 8004618:	2300      	movs	r3, #0
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461e:	e082      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004620:	2302      	movs	r3, #2
 8004622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004626:	e07e      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004628:	2304      	movs	r3, #4
 800462a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462e:	e07a      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004630:	2308      	movs	r3, #8
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004636:	e076      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004638:	2310      	movs	r3, #16
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463e:	e072      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a35      	ldr	r2, [pc, #212]	; (800471c <UART_SetConfig+0x2dc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d12a      	bne.n	80046a0 <UART_SetConfig+0x260>
 800464a:	4b30      	ldr	r3, [pc, #192]	; (800470c <UART_SetConfig+0x2cc>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004658:	d01a      	beq.n	8004690 <UART_SetConfig+0x250>
 800465a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465e:	d81b      	bhi.n	8004698 <UART_SetConfig+0x258>
 8004660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004664:	d00c      	beq.n	8004680 <UART_SetConfig+0x240>
 8004666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466a:	d815      	bhi.n	8004698 <UART_SetConfig+0x258>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <UART_SetConfig+0x238>
 8004670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004674:	d008      	beq.n	8004688 <UART_SetConfig+0x248>
 8004676:	e00f      	b.n	8004698 <UART_SetConfig+0x258>
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e052      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004680:	2302      	movs	r3, #2
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004686:	e04e      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004688:	2304      	movs	r3, #4
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468e:	e04a      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004690:	2308      	movs	r3, #8
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004696:	e046      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004698:	2310      	movs	r3, #16
 800469a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469e:	e042      	b.n	8004726 <UART_SetConfig+0x2e6>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a17      	ldr	r2, [pc, #92]	; (8004704 <UART_SetConfig+0x2c4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d13a      	bne.n	8004720 <UART_SetConfig+0x2e0>
 80046aa:	4b18      	ldr	r3, [pc, #96]	; (800470c <UART_SetConfig+0x2cc>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046b8:	d01a      	beq.n	80046f0 <UART_SetConfig+0x2b0>
 80046ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046be:	d81b      	bhi.n	80046f8 <UART_SetConfig+0x2b8>
 80046c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c4:	d00c      	beq.n	80046e0 <UART_SetConfig+0x2a0>
 80046c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ca:	d815      	bhi.n	80046f8 <UART_SetConfig+0x2b8>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <UART_SetConfig+0x298>
 80046d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d4:	d008      	beq.n	80046e8 <UART_SetConfig+0x2a8>
 80046d6:	e00f      	b.n	80046f8 <UART_SetConfig+0x2b8>
 80046d8:	2300      	movs	r3, #0
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e022      	b.n	8004726 <UART_SetConfig+0x2e6>
 80046e0:	2302      	movs	r3, #2
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e6:	e01e      	b.n	8004726 <UART_SetConfig+0x2e6>
 80046e8:	2304      	movs	r3, #4
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ee:	e01a      	b.n	8004726 <UART_SetConfig+0x2e6>
 80046f0:	2308      	movs	r3, #8
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f6:	e016      	b.n	8004726 <UART_SetConfig+0x2e6>
 80046f8:	2310      	movs	r3, #16
 80046fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fe:	e012      	b.n	8004726 <UART_SetConfig+0x2e6>
 8004700:	efff69f3 	.word	0xefff69f3
 8004704:	40008000 	.word	0x40008000
 8004708:	40013800 	.word	0x40013800
 800470c:	40021000 	.word	0x40021000
 8004710:	40004400 	.word	0x40004400
 8004714:	40004800 	.word	0x40004800
 8004718:	40004c00 	.word	0x40004c00
 800471c:	40005000 	.word	0x40005000
 8004720:	2310      	movs	r3, #16
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a9f      	ldr	r2, [pc, #636]	; (80049a8 <UART_SetConfig+0x568>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d17a      	bne.n	8004826 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004734:	2b08      	cmp	r3, #8
 8004736:	d824      	bhi.n	8004782 <UART_SetConfig+0x342>
 8004738:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <UART_SetConfig+0x300>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004765 	.word	0x08004765
 8004744:	08004783 	.word	0x08004783
 8004748:	0800476d 	.word	0x0800476d
 800474c:	08004783 	.word	0x08004783
 8004750:	08004773 	.word	0x08004773
 8004754:	08004783 	.word	0x08004783
 8004758:	08004783 	.word	0x08004783
 800475c:	08004783 	.word	0x08004783
 8004760:	0800477b 	.word	0x0800477b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004764:	f7fe fe6a 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 8004768:	61f8      	str	r0, [r7, #28]
        break;
 800476a:	e010      	b.n	800478e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800476c:	4b8f      	ldr	r3, [pc, #572]	; (80049ac <UART_SetConfig+0x56c>)
 800476e:	61fb      	str	r3, [r7, #28]
        break;
 8004770:	e00d      	b.n	800478e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004772:	f7fe fdcb 	bl	800330c <HAL_RCC_GetSysClockFreq>
 8004776:	61f8      	str	r0, [r7, #28]
        break;
 8004778:	e009      	b.n	800478e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800477a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477e:	61fb      	str	r3, [r7, #28]
        break;
 8004780:	e005      	b.n	800478e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800478c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80fb 	beq.w	800498c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	4413      	add	r3, r2
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d305      	bcc.n	80047b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047ac:	69fa      	ldr	r2, [r7, #28]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d903      	bls.n	80047ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047b8:	e0e8      	b.n	800498c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	2200      	movs	r2, #0
 80047be:	461c      	mov	r4, r3
 80047c0:	4615      	mov	r5, r2
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	022b      	lsls	r3, r5, #8
 80047cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047d0:	0222      	lsls	r2, r4, #8
 80047d2:	68f9      	ldr	r1, [r7, #12]
 80047d4:	6849      	ldr	r1, [r1, #4]
 80047d6:	0849      	lsrs	r1, r1, #1
 80047d8:	2000      	movs	r0, #0
 80047da:	4688      	mov	r8, r1
 80047dc:	4681      	mov	r9, r0
 80047de:	eb12 0a08 	adds.w	sl, r2, r8
 80047e2:	eb43 0b09 	adc.w	fp, r3, r9
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047f4:	4650      	mov	r0, sl
 80047f6:	4659      	mov	r1, fp
 80047f8:	f7fb fd3a 	bl	8000270 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4613      	mov	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800480a:	d308      	bcc.n	800481e <UART_SetConfig+0x3de>
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004812:	d204      	bcs.n	800481e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	60da      	str	r2, [r3, #12]
 800481c:	e0b6      	b.n	800498c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004824:	e0b2      	b.n	800498c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800482e:	d15e      	bne.n	80048ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004834:	2b08      	cmp	r3, #8
 8004836:	d828      	bhi.n	800488a <UART_SetConfig+0x44a>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <UART_SetConfig+0x400>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004865 	.word	0x08004865
 8004844:	0800486d 	.word	0x0800486d
 8004848:	08004875 	.word	0x08004875
 800484c:	0800488b 	.word	0x0800488b
 8004850:	0800487b 	.word	0x0800487b
 8004854:	0800488b 	.word	0x0800488b
 8004858:	0800488b 	.word	0x0800488b
 800485c:	0800488b 	.word	0x0800488b
 8004860:	08004883 	.word	0x08004883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004864:	f7fe fdea 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 8004868:	61f8      	str	r0, [r7, #28]
        break;
 800486a:	e014      	b.n	8004896 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800486c:	f7fe fdfc 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 8004870:	61f8      	str	r0, [r7, #28]
        break;
 8004872:	e010      	b.n	8004896 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004874:	4b4d      	ldr	r3, [pc, #308]	; (80049ac <UART_SetConfig+0x56c>)
 8004876:	61fb      	str	r3, [r7, #28]
        break;
 8004878:	e00d      	b.n	8004896 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800487a:	f7fe fd47 	bl	800330c <HAL_RCC_GetSysClockFreq>
 800487e:	61f8      	str	r0, [r7, #28]
        break;
 8004880:	e009      	b.n	8004896 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004886:	61fb      	str	r3, [r7, #28]
        break;
 8004888:	e005      	b.n	8004896 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004894:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d077      	beq.n	800498c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005a      	lsls	r2, r3, #1
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	441a      	add	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b0f      	cmp	r3, #15
 80048b6:	d916      	bls.n	80048e6 <UART_SetConfig+0x4a6>
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048be:	d212      	bcs.n	80048e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	f023 030f 	bic.w	r3, r3, #15
 80048c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	8afb      	ldrh	r3, [r7, #22]
 80048d8:	4313      	orrs	r3, r2
 80048da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	8afa      	ldrh	r2, [r7, #22]
 80048e2:	60da      	str	r2, [r3, #12]
 80048e4:	e052      	b.n	800498c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048ec:	e04e      	b.n	800498c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d827      	bhi.n	8004946 <UART_SetConfig+0x506>
 80048f6:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <UART_SetConfig+0x4bc>)
 80048f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fc:	08004921 	.word	0x08004921
 8004900:	08004929 	.word	0x08004929
 8004904:	08004931 	.word	0x08004931
 8004908:	08004947 	.word	0x08004947
 800490c:	08004937 	.word	0x08004937
 8004910:	08004947 	.word	0x08004947
 8004914:	08004947 	.word	0x08004947
 8004918:	08004947 	.word	0x08004947
 800491c:	0800493f 	.word	0x0800493f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004920:	f7fe fd8c 	bl	800343c <HAL_RCC_GetPCLK1Freq>
 8004924:	61f8      	str	r0, [r7, #28]
        break;
 8004926:	e014      	b.n	8004952 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004928:	f7fe fd9e 	bl	8003468 <HAL_RCC_GetPCLK2Freq>
 800492c:	61f8      	str	r0, [r7, #28]
        break;
 800492e:	e010      	b.n	8004952 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004930:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <UART_SetConfig+0x56c>)
 8004932:	61fb      	str	r3, [r7, #28]
        break;
 8004934:	e00d      	b.n	8004952 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004936:	f7fe fce9 	bl	800330c <HAL_RCC_GetSysClockFreq>
 800493a:	61f8      	str	r0, [r7, #28]
        break;
 800493c:	e009      	b.n	8004952 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800493e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004942:	61fb      	str	r3, [r7, #28]
        break;
 8004944:	e005      	b.n	8004952 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004950:	bf00      	nop
    }

    if (pclk != 0U)
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d019      	beq.n	800498c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	085a      	lsrs	r2, r3, #1
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	441a      	add	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b0f      	cmp	r3, #15
 8004970:	d909      	bls.n	8004986 <UART_SetConfig+0x546>
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d205      	bcs.n	8004986 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60da      	str	r2, [r3, #12]
 8004984:	e002      	b.n	800498c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004998:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800499c:	4618      	mov	r0, r3
 800499e:	3728      	adds	r7, #40	; 0x28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a6:	bf00      	nop
 80049a8:	40008000 	.word	0x40008000
 80049ac:	00f42400 	.word	0x00f42400

080049b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	f003 0310 	and.w	r3, r3, #16
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d01a      	beq.n	8004ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aae:	d10a      	bne.n	8004ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
  }
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b098      	sub	sp, #96	; 0x60
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b04:	f7fc fb56 	bl	80011b4 <HAL_GetTick>
 8004b08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d12e      	bne.n	8004b76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b20:	2200      	movs	r2, #0
 8004b22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f88c 	bl	8004c44 <UART_WaitOnFlagUntilTimeout>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d021      	beq.n	8004b76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b46:	653b      	str	r3, [r7, #80]	; 0x50
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b50:	647b      	str	r3, [r7, #68]	; 0x44
 8004b52:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e6      	bne.n	8004b32 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e062      	b.n	8004c3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d149      	bne.n	8004c18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f856 	bl	8004c44 <UART_WaitOnFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d03c      	beq.n	8004c18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	623b      	str	r3, [r7, #32]
   return(result);
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8004bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e6      	bne.n	8004b9e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3308      	adds	r3, #8
 8004bee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bf0:	61fa      	str	r2, [r7, #28]
 8004bf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	69b9      	ldr	r1, [r7, #24]
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e5      	bne.n	8004bd0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e011      	b.n	8004c3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3758      	adds	r7, #88	; 0x58
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c54:	e049      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5c:	d045      	beq.n	8004cea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5e:	f7fc faa9 	bl	80011b4 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d302      	bcc.n	8004c74 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e048      	b.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d031      	beq.n	8004cea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d110      	bne.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f838 	bl	8004d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e029      	b.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc4:	d111      	bne.n	8004cea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f81e 	bl	8004d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e00f      	b.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	bf0c      	ite	eq
 8004cfa:	2301      	moveq	r3, #1
 8004cfc:	2300      	movne	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d0a6      	beq.n	8004c56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b095      	sub	sp, #84	; 0x54
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d38:	643b      	str	r3, [r7, #64]	; 0x40
 8004d3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e6      	bne.n	8004d1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3308      	adds	r3, #8
 8004d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	e853 3f00 	ldrex	r3, [r3]
 8004d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f023 0301 	bic.w	r3, r3, #1
 8004d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e5      	bne.n	8004d4c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d118      	bne.n	8004dba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f023 0310 	bic.w	r3, r3, #16
 8004d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6979      	ldr	r1, [r7, #20]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	613b      	str	r3, [r7, #16]
   return(result);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e6      	bne.n	8004d88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004dce:	bf00      	nop
 8004dd0:	3754      	adds	r7, #84	; 0x54
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <std>:
 8004ddc:	2300      	movs	r3, #0
 8004dde:	b510      	push	{r4, lr}
 8004de0:	4604      	mov	r4, r0
 8004de2:	e9c0 3300 	strd	r3, r3, [r0]
 8004de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dea:	6083      	str	r3, [r0, #8]
 8004dec:	8181      	strh	r1, [r0, #12]
 8004dee:	6643      	str	r3, [r0, #100]	; 0x64
 8004df0:	81c2      	strh	r2, [r0, #14]
 8004df2:	6183      	str	r3, [r0, #24]
 8004df4:	4619      	mov	r1, r3
 8004df6:	2208      	movs	r2, #8
 8004df8:	305c      	adds	r0, #92	; 0x5c
 8004dfa:	f000 f9f7 	bl	80051ec <memset>
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <std+0x58>)
 8004e00:	6263      	str	r3, [r4, #36]	; 0x24
 8004e02:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <std+0x5c>)
 8004e04:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e06:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <std+0x60>)
 8004e08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e0a:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <std+0x64>)
 8004e0c:	6323      	str	r3, [r4, #48]	; 0x30
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <std+0x68>)
 8004e10:	6224      	str	r4, [r4, #32]
 8004e12:	429c      	cmp	r4, r3
 8004e14:	d006      	beq.n	8004e24 <std+0x48>
 8004e16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004e1a:	4294      	cmp	r4, r2
 8004e1c:	d002      	beq.n	8004e24 <std+0x48>
 8004e1e:	33d0      	adds	r3, #208	; 0xd0
 8004e20:	429c      	cmp	r4, r3
 8004e22:	d105      	bne.n	8004e30 <std+0x54>
 8004e24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e2c:	f000 ba56 	b.w	80052dc <__retarget_lock_init_recursive>
 8004e30:	bd10      	pop	{r4, pc}
 8004e32:	bf00      	nop
 8004e34:	0800503d 	.word	0x0800503d
 8004e38:	0800505f 	.word	0x0800505f
 8004e3c:	08005097 	.word	0x08005097
 8004e40:	080050bb 	.word	0x080050bb
 8004e44:	20000364 	.word	0x20000364

08004e48 <stdio_exit_handler>:
 8004e48:	4a02      	ldr	r2, [pc, #8]	; (8004e54 <stdio_exit_handler+0xc>)
 8004e4a:	4903      	ldr	r1, [pc, #12]	; (8004e58 <stdio_exit_handler+0x10>)
 8004e4c:	4803      	ldr	r0, [pc, #12]	; (8004e5c <stdio_exit_handler+0x14>)
 8004e4e:	f000 b869 	b.w	8004f24 <_fwalk_sglue>
 8004e52:	bf00      	nop
 8004e54:	20000010 	.word	0x20000010
 8004e58:	08005b89 	.word	0x08005b89
 8004e5c:	2000001c 	.word	0x2000001c

08004e60 <cleanup_stdio>:
 8004e60:	6841      	ldr	r1, [r0, #4]
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <cleanup_stdio+0x34>)
 8004e64:	4299      	cmp	r1, r3
 8004e66:	b510      	push	{r4, lr}
 8004e68:	4604      	mov	r4, r0
 8004e6a:	d001      	beq.n	8004e70 <cleanup_stdio+0x10>
 8004e6c:	f000 fe8c 	bl	8005b88 <_fflush_r>
 8004e70:	68a1      	ldr	r1, [r4, #8]
 8004e72:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <cleanup_stdio+0x38>)
 8004e74:	4299      	cmp	r1, r3
 8004e76:	d002      	beq.n	8004e7e <cleanup_stdio+0x1e>
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f000 fe85 	bl	8005b88 <_fflush_r>
 8004e7e:	68e1      	ldr	r1, [r4, #12]
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <cleanup_stdio+0x3c>)
 8004e82:	4299      	cmp	r1, r3
 8004e84:	d004      	beq.n	8004e90 <cleanup_stdio+0x30>
 8004e86:	4620      	mov	r0, r4
 8004e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e8c:	f000 be7c 	b.w	8005b88 <_fflush_r>
 8004e90:	bd10      	pop	{r4, pc}
 8004e92:	bf00      	nop
 8004e94:	20000364 	.word	0x20000364
 8004e98:	200003cc 	.word	0x200003cc
 8004e9c:	20000434 	.word	0x20000434

08004ea0 <global_stdio_init.part.0>:
 8004ea0:	b510      	push	{r4, lr}
 8004ea2:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <global_stdio_init.part.0+0x30>)
 8004ea4:	4c0b      	ldr	r4, [pc, #44]	; (8004ed4 <global_stdio_init.part.0+0x34>)
 8004ea6:	4a0c      	ldr	r2, [pc, #48]	; (8004ed8 <global_stdio_init.part.0+0x38>)
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	4620      	mov	r0, r4
 8004eac:	2200      	movs	r2, #0
 8004eae:	2104      	movs	r1, #4
 8004eb0:	f7ff ff94 	bl	8004ddc <std>
 8004eb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004eb8:	2201      	movs	r2, #1
 8004eba:	2109      	movs	r1, #9
 8004ebc:	f7ff ff8e 	bl	8004ddc <std>
 8004ec0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eca:	2112      	movs	r1, #18
 8004ecc:	f7ff bf86 	b.w	8004ddc <std>
 8004ed0:	2000049c 	.word	0x2000049c
 8004ed4:	20000364 	.word	0x20000364
 8004ed8:	08004e49 	.word	0x08004e49

08004edc <__sfp_lock_acquire>:
 8004edc:	4801      	ldr	r0, [pc, #4]	; (8004ee4 <__sfp_lock_acquire+0x8>)
 8004ede:	f000 b9fe 	b.w	80052de <__retarget_lock_acquire_recursive>
 8004ee2:	bf00      	nop
 8004ee4:	200004a5 	.word	0x200004a5

08004ee8 <__sfp_lock_release>:
 8004ee8:	4801      	ldr	r0, [pc, #4]	; (8004ef0 <__sfp_lock_release+0x8>)
 8004eea:	f000 b9f9 	b.w	80052e0 <__retarget_lock_release_recursive>
 8004eee:	bf00      	nop
 8004ef0:	200004a5 	.word	0x200004a5

08004ef4 <__sinit>:
 8004ef4:	b510      	push	{r4, lr}
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	f7ff fff0 	bl	8004edc <__sfp_lock_acquire>
 8004efc:	6a23      	ldr	r3, [r4, #32]
 8004efe:	b11b      	cbz	r3, 8004f08 <__sinit+0x14>
 8004f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f04:	f7ff bff0 	b.w	8004ee8 <__sfp_lock_release>
 8004f08:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <__sinit+0x28>)
 8004f0a:	6223      	str	r3, [r4, #32]
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <__sinit+0x2c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f5      	bne.n	8004f00 <__sinit+0xc>
 8004f14:	f7ff ffc4 	bl	8004ea0 <global_stdio_init.part.0>
 8004f18:	e7f2      	b.n	8004f00 <__sinit+0xc>
 8004f1a:	bf00      	nop
 8004f1c:	08004e61 	.word	0x08004e61
 8004f20:	2000049c 	.word	0x2000049c

08004f24 <_fwalk_sglue>:
 8004f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f28:	4607      	mov	r7, r0
 8004f2a:	4688      	mov	r8, r1
 8004f2c:	4614      	mov	r4, r2
 8004f2e:	2600      	movs	r6, #0
 8004f30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f34:	f1b9 0901 	subs.w	r9, r9, #1
 8004f38:	d505      	bpl.n	8004f46 <_fwalk_sglue+0x22>
 8004f3a:	6824      	ldr	r4, [r4, #0]
 8004f3c:	2c00      	cmp	r4, #0
 8004f3e:	d1f7      	bne.n	8004f30 <_fwalk_sglue+0xc>
 8004f40:	4630      	mov	r0, r6
 8004f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f46:	89ab      	ldrh	r3, [r5, #12]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d907      	bls.n	8004f5c <_fwalk_sglue+0x38>
 8004f4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f50:	3301      	adds	r3, #1
 8004f52:	d003      	beq.n	8004f5c <_fwalk_sglue+0x38>
 8004f54:	4629      	mov	r1, r5
 8004f56:	4638      	mov	r0, r7
 8004f58:	47c0      	blx	r8
 8004f5a:	4306      	orrs	r6, r0
 8004f5c:	3568      	adds	r5, #104	; 0x68
 8004f5e:	e7e9      	b.n	8004f34 <_fwalk_sglue+0x10>

08004f60 <iprintf>:
 8004f60:	b40f      	push	{r0, r1, r2, r3}
 8004f62:	b507      	push	{r0, r1, r2, lr}
 8004f64:	4906      	ldr	r1, [pc, #24]	; (8004f80 <iprintf+0x20>)
 8004f66:	ab04      	add	r3, sp, #16
 8004f68:	6808      	ldr	r0, [r1, #0]
 8004f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f6e:	6881      	ldr	r1, [r0, #8]
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	f000 fad9 	bl	8005528 <_vfiprintf_r>
 8004f76:	b003      	add	sp, #12
 8004f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f7c:	b004      	add	sp, #16
 8004f7e:	4770      	bx	lr
 8004f80:	20000068 	.word	0x20000068

08004f84 <_puts_r>:
 8004f84:	6a03      	ldr	r3, [r0, #32]
 8004f86:	b570      	push	{r4, r5, r6, lr}
 8004f88:	6884      	ldr	r4, [r0, #8]
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	460e      	mov	r6, r1
 8004f8e:	b90b      	cbnz	r3, 8004f94 <_puts_r+0x10>
 8004f90:	f7ff ffb0 	bl	8004ef4 <__sinit>
 8004f94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f96:	07db      	lsls	r3, r3, #31
 8004f98:	d405      	bmi.n	8004fa6 <_puts_r+0x22>
 8004f9a:	89a3      	ldrh	r3, [r4, #12]
 8004f9c:	0598      	lsls	r0, r3, #22
 8004f9e:	d402      	bmi.n	8004fa6 <_puts_r+0x22>
 8004fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fa2:	f000 f99c 	bl	80052de <__retarget_lock_acquire_recursive>
 8004fa6:	89a3      	ldrh	r3, [r4, #12]
 8004fa8:	0719      	lsls	r1, r3, #28
 8004faa:	d513      	bpl.n	8004fd4 <_puts_r+0x50>
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	b18b      	cbz	r3, 8004fd4 <_puts_r+0x50>
 8004fb0:	3e01      	subs	r6, #1
 8004fb2:	68a3      	ldr	r3, [r4, #8]
 8004fb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	60a3      	str	r3, [r4, #8]
 8004fbc:	b9e9      	cbnz	r1, 8004ffa <_puts_r+0x76>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	da2e      	bge.n	8005020 <_puts_r+0x9c>
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	210a      	movs	r1, #10
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f000 f87b 	bl	80050c2 <__swbuf_r>
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d007      	beq.n	8004fe0 <_puts_r+0x5c>
 8004fd0:	250a      	movs	r5, #10
 8004fd2:	e007      	b.n	8004fe4 <_puts_r+0x60>
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f000 f8b0 	bl	800513c <__swsetup_r>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d0e7      	beq.n	8004fb0 <_puts_r+0x2c>
 8004fe0:	f04f 35ff 	mov.w	r5, #4294967295
 8004fe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fe6:	07da      	lsls	r2, r3, #31
 8004fe8:	d405      	bmi.n	8004ff6 <_puts_r+0x72>
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	059b      	lsls	r3, r3, #22
 8004fee:	d402      	bmi.n	8004ff6 <_puts_r+0x72>
 8004ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ff2:	f000 f975 	bl	80052e0 <__retarget_lock_release_recursive>
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	bd70      	pop	{r4, r5, r6, pc}
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	da04      	bge.n	8005008 <_puts_r+0x84>
 8004ffe:	69a2      	ldr	r2, [r4, #24]
 8005000:	429a      	cmp	r2, r3
 8005002:	dc06      	bgt.n	8005012 <_puts_r+0x8e>
 8005004:	290a      	cmp	r1, #10
 8005006:	d004      	beq.n	8005012 <_puts_r+0x8e>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	6022      	str	r2, [r4, #0]
 800500e:	7019      	strb	r1, [r3, #0]
 8005010:	e7cf      	b.n	8004fb2 <_puts_r+0x2e>
 8005012:	4622      	mov	r2, r4
 8005014:	4628      	mov	r0, r5
 8005016:	f000 f854 	bl	80050c2 <__swbuf_r>
 800501a:	3001      	adds	r0, #1
 800501c:	d1c9      	bne.n	8004fb2 <_puts_r+0x2e>
 800501e:	e7df      	b.n	8004fe0 <_puts_r+0x5c>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	250a      	movs	r5, #10
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	6022      	str	r2, [r4, #0]
 8005028:	701d      	strb	r5, [r3, #0]
 800502a:	e7db      	b.n	8004fe4 <_puts_r+0x60>

0800502c <puts>:
 800502c:	4b02      	ldr	r3, [pc, #8]	; (8005038 <puts+0xc>)
 800502e:	4601      	mov	r1, r0
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	f7ff bfa7 	b.w	8004f84 <_puts_r>
 8005036:	bf00      	nop
 8005038:	20000068 	.word	0x20000068

0800503c <__sread>:
 800503c:	b510      	push	{r4, lr}
 800503e:	460c      	mov	r4, r1
 8005040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005044:	f000 f8fc 	bl	8005240 <_read_r>
 8005048:	2800      	cmp	r0, #0
 800504a:	bfab      	itete	ge
 800504c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800504e:	89a3      	ldrhlt	r3, [r4, #12]
 8005050:	181b      	addge	r3, r3, r0
 8005052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005056:	bfac      	ite	ge
 8005058:	6563      	strge	r3, [r4, #84]	; 0x54
 800505a:	81a3      	strhlt	r3, [r4, #12]
 800505c:	bd10      	pop	{r4, pc}

0800505e <__swrite>:
 800505e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005062:	461f      	mov	r7, r3
 8005064:	898b      	ldrh	r3, [r1, #12]
 8005066:	05db      	lsls	r3, r3, #23
 8005068:	4605      	mov	r5, r0
 800506a:	460c      	mov	r4, r1
 800506c:	4616      	mov	r6, r2
 800506e:	d505      	bpl.n	800507c <__swrite+0x1e>
 8005070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005074:	2302      	movs	r3, #2
 8005076:	2200      	movs	r2, #0
 8005078:	f000 f8d0 	bl	800521c <_lseek_r>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005086:	81a3      	strh	r3, [r4, #12]
 8005088:	4632      	mov	r2, r6
 800508a:	463b      	mov	r3, r7
 800508c:	4628      	mov	r0, r5
 800508e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005092:	f000 b8e7 	b.w	8005264 <_write_r>

08005096 <__sseek>:
 8005096:	b510      	push	{r4, lr}
 8005098:	460c      	mov	r4, r1
 800509a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800509e:	f000 f8bd 	bl	800521c <_lseek_r>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	bf15      	itete	ne
 80050a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80050aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050b2:	81a3      	strheq	r3, [r4, #12]
 80050b4:	bf18      	it	ne
 80050b6:	81a3      	strhne	r3, [r4, #12]
 80050b8:	bd10      	pop	{r4, pc}

080050ba <__sclose>:
 80050ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050be:	f000 b89d 	b.w	80051fc <_close_r>

080050c2 <__swbuf_r>:
 80050c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c4:	460e      	mov	r6, r1
 80050c6:	4614      	mov	r4, r2
 80050c8:	4605      	mov	r5, r0
 80050ca:	b118      	cbz	r0, 80050d4 <__swbuf_r+0x12>
 80050cc:	6a03      	ldr	r3, [r0, #32]
 80050ce:	b90b      	cbnz	r3, 80050d4 <__swbuf_r+0x12>
 80050d0:	f7ff ff10 	bl	8004ef4 <__sinit>
 80050d4:	69a3      	ldr	r3, [r4, #24]
 80050d6:	60a3      	str	r3, [r4, #8]
 80050d8:	89a3      	ldrh	r3, [r4, #12]
 80050da:	071a      	lsls	r2, r3, #28
 80050dc:	d525      	bpl.n	800512a <__swbuf_r+0x68>
 80050de:	6923      	ldr	r3, [r4, #16]
 80050e0:	b31b      	cbz	r3, 800512a <__swbuf_r+0x68>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	6922      	ldr	r2, [r4, #16]
 80050e6:	1a98      	subs	r0, r3, r2
 80050e8:	6963      	ldr	r3, [r4, #20]
 80050ea:	b2f6      	uxtb	r6, r6
 80050ec:	4283      	cmp	r3, r0
 80050ee:	4637      	mov	r7, r6
 80050f0:	dc04      	bgt.n	80050fc <__swbuf_r+0x3a>
 80050f2:	4621      	mov	r1, r4
 80050f4:	4628      	mov	r0, r5
 80050f6:	f000 fd47 	bl	8005b88 <_fflush_r>
 80050fa:	b9e0      	cbnz	r0, 8005136 <__swbuf_r+0x74>
 80050fc:	68a3      	ldr	r3, [r4, #8]
 80050fe:	3b01      	subs	r3, #1
 8005100:	60a3      	str	r3, [r4, #8]
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	6022      	str	r2, [r4, #0]
 8005108:	701e      	strb	r6, [r3, #0]
 800510a:	6962      	ldr	r2, [r4, #20]
 800510c:	1c43      	adds	r3, r0, #1
 800510e:	429a      	cmp	r2, r3
 8005110:	d004      	beq.n	800511c <__swbuf_r+0x5a>
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	07db      	lsls	r3, r3, #31
 8005116:	d506      	bpl.n	8005126 <__swbuf_r+0x64>
 8005118:	2e0a      	cmp	r6, #10
 800511a:	d104      	bne.n	8005126 <__swbuf_r+0x64>
 800511c:	4621      	mov	r1, r4
 800511e:	4628      	mov	r0, r5
 8005120:	f000 fd32 	bl	8005b88 <_fflush_r>
 8005124:	b938      	cbnz	r0, 8005136 <__swbuf_r+0x74>
 8005126:	4638      	mov	r0, r7
 8005128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800512a:	4621      	mov	r1, r4
 800512c:	4628      	mov	r0, r5
 800512e:	f000 f805 	bl	800513c <__swsetup_r>
 8005132:	2800      	cmp	r0, #0
 8005134:	d0d5      	beq.n	80050e2 <__swbuf_r+0x20>
 8005136:	f04f 37ff 	mov.w	r7, #4294967295
 800513a:	e7f4      	b.n	8005126 <__swbuf_r+0x64>

0800513c <__swsetup_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4b2a      	ldr	r3, [pc, #168]	; (80051e8 <__swsetup_r+0xac>)
 8005140:	4605      	mov	r5, r0
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	460c      	mov	r4, r1
 8005146:	b118      	cbz	r0, 8005150 <__swsetup_r+0x14>
 8005148:	6a03      	ldr	r3, [r0, #32]
 800514a:	b90b      	cbnz	r3, 8005150 <__swsetup_r+0x14>
 800514c:	f7ff fed2 	bl	8004ef4 <__sinit>
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005156:	0718      	lsls	r0, r3, #28
 8005158:	d422      	bmi.n	80051a0 <__swsetup_r+0x64>
 800515a:	06d9      	lsls	r1, r3, #27
 800515c:	d407      	bmi.n	800516e <__swsetup_r+0x32>
 800515e:	2309      	movs	r3, #9
 8005160:	602b      	str	r3, [r5, #0]
 8005162:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005166:	81a3      	strh	r3, [r4, #12]
 8005168:	f04f 30ff 	mov.w	r0, #4294967295
 800516c:	e034      	b.n	80051d8 <__swsetup_r+0x9c>
 800516e:	0758      	lsls	r0, r3, #29
 8005170:	d512      	bpl.n	8005198 <__swsetup_r+0x5c>
 8005172:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005174:	b141      	cbz	r1, 8005188 <__swsetup_r+0x4c>
 8005176:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800517a:	4299      	cmp	r1, r3
 800517c:	d002      	beq.n	8005184 <__swsetup_r+0x48>
 800517e:	4628      	mov	r0, r5
 8005180:	f000 f8b0 	bl	80052e4 <_free_r>
 8005184:	2300      	movs	r3, #0
 8005186:	6363      	str	r3, [r4, #52]	; 0x34
 8005188:	89a3      	ldrh	r3, [r4, #12]
 800518a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800518e:	81a3      	strh	r3, [r4, #12]
 8005190:	2300      	movs	r3, #0
 8005192:	6063      	str	r3, [r4, #4]
 8005194:	6923      	ldr	r3, [r4, #16]
 8005196:	6023      	str	r3, [r4, #0]
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	f043 0308 	orr.w	r3, r3, #8
 800519e:	81a3      	strh	r3, [r4, #12]
 80051a0:	6923      	ldr	r3, [r4, #16]
 80051a2:	b94b      	cbnz	r3, 80051b8 <__swsetup_r+0x7c>
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ae:	d003      	beq.n	80051b8 <__swsetup_r+0x7c>
 80051b0:	4621      	mov	r1, r4
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 fd36 	bl	8005c24 <__smakebuf_r>
 80051b8:	89a0      	ldrh	r0, [r4, #12]
 80051ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051be:	f010 0301 	ands.w	r3, r0, #1
 80051c2:	d00a      	beq.n	80051da <__swsetup_r+0x9e>
 80051c4:	2300      	movs	r3, #0
 80051c6:	60a3      	str	r3, [r4, #8]
 80051c8:	6963      	ldr	r3, [r4, #20]
 80051ca:	425b      	negs	r3, r3
 80051cc:	61a3      	str	r3, [r4, #24]
 80051ce:	6923      	ldr	r3, [r4, #16]
 80051d0:	b943      	cbnz	r3, 80051e4 <__swsetup_r+0xa8>
 80051d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051d6:	d1c4      	bne.n	8005162 <__swsetup_r+0x26>
 80051d8:	bd38      	pop	{r3, r4, r5, pc}
 80051da:	0781      	lsls	r1, r0, #30
 80051dc:	bf58      	it	pl
 80051de:	6963      	ldrpl	r3, [r4, #20]
 80051e0:	60a3      	str	r3, [r4, #8]
 80051e2:	e7f4      	b.n	80051ce <__swsetup_r+0x92>
 80051e4:	2000      	movs	r0, #0
 80051e6:	e7f7      	b.n	80051d8 <__swsetup_r+0x9c>
 80051e8:	20000068 	.word	0x20000068

080051ec <memset>:
 80051ec:	4402      	add	r2, r0
 80051ee:	4603      	mov	r3, r0
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d100      	bne.n	80051f6 <memset+0xa>
 80051f4:	4770      	bx	lr
 80051f6:	f803 1b01 	strb.w	r1, [r3], #1
 80051fa:	e7f9      	b.n	80051f0 <memset+0x4>

080051fc <_close_r>:
 80051fc:	b538      	push	{r3, r4, r5, lr}
 80051fe:	4d06      	ldr	r5, [pc, #24]	; (8005218 <_close_r+0x1c>)
 8005200:	2300      	movs	r3, #0
 8005202:	4604      	mov	r4, r0
 8005204:	4608      	mov	r0, r1
 8005206:	602b      	str	r3, [r5, #0]
 8005208:	f7fb fe03 	bl	8000e12 <_close>
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	d102      	bne.n	8005216 <_close_r+0x1a>
 8005210:	682b      	ldr	r3, [r5, #0]
 8005212:	b103      	cbz	r3, 8005216 <_close_r+0x1a>
 8005214:	6023      	str	r3, [r4, #0]
 8005216:	bd38      	pop	{r3, r4, r5, pc}
 8005218:	200004a0 	.word	0x200004a0

0800521c <_lseek_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4d07      	ldr	r5, [pc, #28]	; (800523c <_lseek_r+0x20>)
 8005220:	4604      	mov	r4, r0
 8005222:	4608      	mov	r0, r1
 8005224:	4611      	mov	r1, r2
 8005226:	2200      	movs	r2, #0
 8005228:	602a      	str	r2, [r5, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	f7fb fe18 	bl	8000e60 <_lseek>
 8005230:	1c43      	adds	r3, r0, #1
 8005232:	d102      	bne.n	800523a <_lseek_r+0x1e>
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	b103      	cbz	r3, 800523a <_lseek_r+0x1e>
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	bd38      	pop	{r3, r4, r5, pc}
 800523c:	200004a0 	.word	0x200004a0

08005240 <_read_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4d07      	ldr	r5, [pc, #28]	; (8005260 <_read_r+0x20>)
 8005244:	4604      	mov	r4, r0
 8005246:	4608      	mov	r0, r1
 8005248:	4611      	mov	r1, r2
 800524a:	2200      	movs	r2, #0
 800524c:	602a      	str	r2, [r5, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	f7fb fdc2 	bl	8000dd8 <_read>
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	d102      	bne.n	800525e <_read_r+0x1e>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	b103      	cbz	r3, 800525e <_read_r+0x1e>
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	200004a0 	.word	0x200004a0

08005264 <_write_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	4d07      	ldr	r5, [pc, #28]	; (8005284 <_write_r+0x20>)
 8005268:	4604      	mov	r4, r0
 800526a:	4608      	mov	r0, r1
 800526c:	4611      	mov	r1, r2
 800526e:	2200      	movs	r2, #0
 8005270:	602a      	str	r2, [r5, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	f7fb fd26 	bl	8000cc4 <_write>
 8005278:	1c43      	adds	r3, r0, #1
 800527a:	d102      	bne.n	8005282 <_write_r+0x1e>
 800527c:	682b      	ldr	r3, [r5, #0]
 800527e:	b103      	cbz	r3, 8005282 <_write_r+0x1e>
 8005280:	6023      	str	r3, [r4, #0]
 8005282:	bd38      	pop	{r3, r4, r5, pc}
 8005284:	200004a0 	.word	0x200004a0

08005288 <__errno>:
 8005288:	4b01      	ldr	r3, [pc, #4]	; (8005290 <__errno+0x8>)
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20000068 	.word	0x20000068

08005294 <__libc_init_array>:
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	4d0d      	ldr	r5, [pc, #52]	; (80052cc <__libc_init_array+0x38>)
 8005298:	4c0d      	ldr	r4, [pc, #52]	; (80052d0 <__libc_init_array+0x3c>)
 800529a:	1b64      	subs	r4, r4, r5
 800529c:	10a4      	asrs	r4, r4, #2
 800529e:	2600      	movs	r6, #0
 80052a0:	42a6      	cmp	r6, r4
 80052a2:	d109      	bne.n	80052b8 <__libc_init_array+0x24>
 80052a4:	4d0b      	ldr	r5, [pc, #44]	; (80052d4 <__libc_init_array+0x40>)
 80052a6:	4c0c      	ldr	r4, [pc, #48]	; (80052d8 <__libc_init_array+0x44>)
 80052a8:	f000 fd2a 	bl	8005d00 <_init>
 80052ac:	1b64      	subs	r4, r4, r5
 80052ae:	10a4      	asrs	r4, r4, #2
 80052b0:	2600      	movs	r6, #0
 80052b2:	42a6      	cmp	r6, r4
 80052b4:	d105      	bne.n	80052c2 <__libc_init_array+0x2e>
 80052b6:	bd70      	pop	{r4, r5, r6, pc}
 80052b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052bc:	4798      	blx	r3
 80052be:	3601      	adds	r6, #1
 80052c0:	e7ee      	b.n	80052a0 <__libc_init_array+0xc>
 80052c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c6:	4798      	blx	r3
 80052c8:	3601      	adds	r6, #1
 80052ca:	e7f2      	b.n	80052b2 <__libc_init_array+0x1e>
 80052cc:	08005e34 	.word	0x08005e34
 80052d0:	08005e34 	.word	0x08005e34
 80052d4:	08005e34 	.word	0x08005e34
 80052d8:	08005e38 	.word	0x08005e38

080052dc <__retarget_lock_init_recursive>:
 80052dc:	4770      	bx	lr

080052de <__retarget_lock_acquire_recursive>:
 80052de:	4770      	bx	lr

080052e0 <__retarget_lock_release_recursive>:
 80052e0:	4770      	bx	lr
	...

080052e4 <_free_r>:
 80052e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052e6:	2900      	cmp	r1, #0
 80052e8:	d044      	beq.n	8005374 <_free_r+0x90>
 80052ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ee:	9001      	str	r0, [sp, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f1a1 0404 	sub.w	r4, r1, #4
 80052f6:	bfb8      	it	lt
 80052f8:	18e4      	addlt	r4, r4, r3
 80052fa:	f000 f8df 	bl	80054bc <__malloc_lock>
 80052fe:	4a1e      	ldr	r2, [pc, #120]	; (8005378 <_free_r+0x94>)
 8005300:	9801      	ldr	r0, [sp, #4]
 8005302:	6813      	ldr	r3, [r2, #0]
 8005304:	b933      	cbnz	r3, 8005314 <_free_r+0x30>
 8005306:	6063      	str	r3, [r4, #4]
 8005308:	6014      	str	r4, [r2, #0]
 800530a:	b003      	add	sp, #12
 800530c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005310:	f000 b8da 	b.w	80054c8 <__malloc_unlock>
 8005314:	42a3      	cmp	r3, r4
 8005316:	d908      	bls.n	800532a <_free_r+0x46>
 8005318:	6825      	ldr	r5, [r4, #0]
 800531a:	1961      	adds	r1, r4, r5
 800531c:	428b      	cmp	r3, r1
 800531e:	bf01      	itttt	eq
 8005320:	6819      	ldreq	r1, [r3, #0]
 8005322:	685b      	ldreq	r3, [r3, #4]
 8005324:	1949      	addeq	r1, r1, r5
 8005326:	6021      	streq	r1, [r4, #0]
 8005328:	e7ed      	b.n	8005306 <_free_r+0x22>
 800532a:	461a      	mov	r2, r3
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	b10b      	cbz	r3, 8005334 <_free_r+0x50>
 8005330:	42a3      	cmp	r3, r4
 8005332:	d9fa      	bls.n	800532a <_free_r+0x46>
 8005334:	6811      	ldr	r1, [r2, #0]
 8005336:	1855      	adds	r5, r2, r1
 8005338:	42a5      	cmp	r5, r4
 800533a:	d10b      	bne.n	8005354 <_free_r+0x70>
 800533c:	6824      	ldr	r4, [r4, #0]
 800533e:	4421      	add	r1, r4
 8005340:	1854      	adds	r4, r2, r1
 8005342:	42a3      	cmp	r3, r4
 8005344:	6011      	str	r1, [r2, #0]
 8005346:	d1e0      	bne.n	800530a <_free_r+0x26>
 8005348:	681c      	ldr	r4, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	6053      	str	r3, [r2, #4]
 800534e:	440c      	add	r4, r1
 8005350:	6014      	str	r4, [r2, #0]
 8005352:	e7da      	b.n	800530a <_free_r+0x26>
 8005354:	d902      	bls.n	800535c <_free_r+0x78>
 8005356:	230c      	movs	r3, #12
 8005358:	6003      	str	r3, [r0, #0]
 800535a:	e7d6      	b.n	800530a <_free_r+0x26>
 800535c:	6825      	ldr	r5, [r4, #0]
 800535e:	1961      	adds	r1, r4, r5
 8005360:	428b      	cmp	r3, r1
 8005362:	bf04      	itt	eq
 8005364:	6819      	ldreq	r1, [r3, #0]
 8005366:	685b      	ldreq	r3, [r3, #4]
 8005368:	6063      	str	r3, [r4, #4]
 800536a:	bf04      	itt	eq
 800536c:	1949      	addeq	r1, r1, r5
 800536e:	6021      	streq	r1, [r4, #0]
 8005370:	6054      	str	r4, [r2, #4]
 8005372:	e7ca      	b.n	800530a <_free_r+0x26>
 8005374:	b003      	add	sp, #12
 8005376:	bd30      	pop	{r4, r5, pc}
 8005378:	200004a8 	.word	0x200004a8

0800537c <sbrk_aligned>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4e0e      	ldr	r6, [pc, #56]	; (80053b8 <sbrk_aligned+0x3c>)
 8005380:	460c      	mov	r4, r1
 8005382:	6831      	ldr	r1, [r6, #0]
 8005384:	4605      	mov	r5, r0
 8005386:	b911      	cbnz	r1, 800538e <sbrk_aligned+0x12>
 8005388:	f000 fcaa 	bl	8005ce0 <_sbrk_r>
 800538c:	6030      	str	r0, [r6, #0]
 800538e:	4621      	mov	r1, r4
 8005390:	4628      	mov	r0, r5
 8005392:	f000 fca5 	bl	8005ce0 <_sbrk_r>
 8005396:	1c43      	adds	r3, r0, #1
 8005398:	d00a      	beq.n	80053b0 <sbrk_aligned+0x34>
 800539a:	1cc4      	adds	r4, r0, #3
 800539c:	f024 0403 	bic.w	r4, r4, #3
 80053a0:	42a0      	cmp	r0, r4
 80053a2:	d007      	beq.n	80053b4 <sbrk_aligned+0x38>
 80053a4:	1a21      	subs	r1, r4, r0
 80053a6:	4628      	mov	r0, r5
 80053a8:	f000 fc9a 	bl	8005ce0 <_sbrk_r>
 80053ac:	3001      	adds	r0, #1
 80053ae:	d101      	bne.n	80053b4 <sbrk_aligned+0x38>
 80053b0:	f04f 34ff 	mov.w	r4, #4294967295
 80053b4:	4620      	mov	r0, r4
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	200004ac 	.word	0x200004ac

080053bc <_malloc_r>:
 80053bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c0:	1ccd      	adds	r5, r1, #3
 80053c2:	f025 0503 	bic.w	r5, r5, #3
 80053c6:	3508      	adds	r5, #8
 80053c8:	2d0c      	cmp	r5, #12
 80053ca:	bf38      	it	cc
 80053cc:	250c      	movcc	r5, #12
 80053ce:	2d00      	cmp	r5, #0
 80053d0:	4607      	mov	r7, r0
 80053d2:	db01      	blt.n	80053d8 <_malloc_r+0x1c>
 80053d4:	42a9      	cmp	r1, r5
 80053d6:	d905      	bls.n	80053e4 <_malloc_r+0x28>
 80053d8:	230c      	movs	r3, #12
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	2600      	movs	r6, #0
 80053de:	4630      	mov	r0, r6
 80053e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80054b8 <_malloc_r+0xfc>
 80053e8:	f000 f868 	bl	80054bc <__malloc_lock>
 80053ec:	f8d8 3000 	ldr.w	r3, [r8]
 80053f0:	461c      	mov	r4, r3
 80053f2:	bb5c      	cbnz	r4, 800544c <_malloc_r+0x90>
 80053f4:	4629      	mov	r1, r5
 80053f6:	4638      	mov	r0, r7
 80053f8:	f7ff ffc0 	bl	800537c <sbrk_aligned>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	4604      	mov	r4, r0
 8005400:	d155      	bne.n	80054ae <_malloc_r+0xf2>
 8005402:	f8d8 4000 	ldr.w	r4, [r8]
 8005406:	4626      	mov	r6, r4
 8005408:	2e00      	cmp	r6, #0
 800540a:	d145      	bne.n	8005498 <_malloc_r+0xdc>
 800540c:	2c00      	cmp	r4, #0
 800540e:	d048      	beq.n	80054a2 <_malloc_r+0xe6>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	4631      	mov	r1, r6
 8005414:	4638      	mov	r0, r7
 8005416:	eb04 0903 	add.w	r9, r4, r3
 800541a:	f000 fc61 	bl	8005ce0 <_sbrk_r>
 800541e:	4581      	cmp	r9, r0
 8005420:	d13f      	bne.n	80054a2 <_malloc_r+0xe6>
 8005422:	6821      	ldr	r1, [r4, #0]
 8005424:	1a6d      	subs	r5, r5, r1
 8005426:	4629      	mov	r1, r5
 8005428:	4638      	mov	r0, r7
 800542a:	f7ff ffa7 	bl	800537c <sbrk_aligned>
 800542e:	3001      	adds	r0, #1
 8005430:	d037      	beq.n	80054a2 <_malloc_r+0xe6>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	442b      	add	r3, r5
 8005436:	6023      	str	r3, [r4, #0]
 8005438:	f8d8 3000 	ldr.w	r3, [r8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d038      	beq.n	80054b2 <_malloc_r+0xf6>
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	42a2      	cmp	r2, r4
 8005444:	d12b      	bne.n	800549e <_malloc_r+0xe2>
 8005446:	2200      	movs	r2, #0
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	e00f      	b.n	800546c <_malloc_r+0xb0>
 800544c:	6822      	ldr	r2, [r4, #0]
 800544e:	1b52      	subs	r2, r2, r5
 8005450:	d41f      	bmi.n	8005492 <_malloc_r+0xd6>
 8005452:	2a0b      	cmp	r2, #11
 8005454:	d917      	bls.n	8005486 <_malloc_r+0xca>
 8005456:	1961      	adds	r1, r4, r5
 8005458:	42a3      	cmp	r3, r4
 800545a:	6025      	str	r5, [r4, #0]
 800545c:	bf18      	it	ne
 800545e:	6059      	strne	r1, [r3, #4]
 8005460:	6863      	ldr	r3, [r4, #4]
 8005462:	bf08      	it	eq
 8005464:	f8c8 1000 	streq.w	r1, [r8]
 8005468:	5162      	str	r2, [r4, r5]
 800546a:	604b      	str	r3, [r1, #4]
 800546c:	4638      	mov	r0, r7
 800546e:	f104 060b 	add.w	r6, r4, #11
 8005472:	f000 f829 	bl	80054c8 <__malloc_unlock>
 8005476:	f026 0607 	bic.w	r6, r6, #7
 800547a:	1d23      	adds	r3, r4, #4
 800547c:	1af2      	subs	r2, r6, r3
 800547e:	d0ae      	beq.n	80053de <_malloc_r+0x22>
 8005480:	1b9b      	subs	r3, r3, r6
 8005482:	50a3      	str	r3, [r4, r2]
 8005484:	e7ab      	b.n	80053de <_malloc_r+0x22>
 8005486:	42a3      	cmp	r3, r4
 8005488:	6862      	ldr	r2, [r4, #4]
 800548a:	d1dd      	bne.n	8005448 <_malloc_r+0x8c>
 800548c:	f8c8 2000 	str.w	r2, [r8]
 8005490:	e7ec      	b.n	800546c <_malloc_r+0xb0>
 8005492:	4623      	mov	r3, r4
 8005494:	6864      	ldr	r4, [r4, #4]
 8005496:	e7ac      	b.n	80053f2 <_malloc_r+0x36>
 8005498:	4634      	mov	r4, r6
 800549a:	6876      	ldr	r6, [r6, #4]
 800549c:	e7b4      	b.n	8005408 <_malloc_r+0x4c>
 800549e:	4613      	mov	r3, r2
 80054a0:	e7cc      	b.n	800543c <_malloc_r+0x80>
 80054a2:	230c      	movs	r3, #12
 80054a4:	603b      	str	r3, [r7, #0]
 80054a6:	4638      	mov	r0, r7
 80054a8:	f000 f80e 	bl	80054c8 <__malloc_unlock>
 80054ac:	e797      	b.n	80053de <_malloc_r+0x22>
 80054ae:	6025      	str	r5, [r4, #0]
 80054b0:	e7dc      	b.n	800546c <_malloc_r+0xb0>
 80054b2:	605b      	str	r3, [r3, #4]
 80054b4:	deff      	udf	#255	; 0xff
 80054b6:	bf00      	nop
 80054b8:	200004a8 	.word	0x200004a8

080054bc <__malloc_lock>:
 80054bc:	4801      	ldr	r0, [pc, #4]	; (80054c4 <__malloc_lock+0x8>)
 80054be:	f7ff bf0e 	b.w	80052de <__retarget_lock_acquire_recursive>
 80054c2:	bf00      	nop
 80054c4:	200004a4 	.word	0x200004a4

080054c8 <__malloc_unlock>:
 80054c8:	4801      	ldr	r0, [pc, #4]	; (80054d0 <__malloc_unlock+0x8>)
 80054ca:	f7ff bf09 	b.w	80052e0 <__retarget_lock_release_recursive>
 80054ce:	bf00      	nop
 80054d0:	200004a4 	.word	0x200004a4

080054d4 <__sfputc_r>:
 80054d4:	6893      	ldr	r3, [r2, #8]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	b410      	push	{r4}
 80054dc:	6093      	str	r3, [r2, #8]
 80054de:	da08      	bge.n	80054f2 <__sfputc_r+0x1e>
 80054e0:	6994      	ldr	r4, [r2, #24]
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	db01      	blt.n	80054ea <__sfputc_r+0x16>
 80054e6:	290a      	cmp	r1, #10
 80054e8:	d103      	bne.n	80054f2 <__sfputc_r+0x1e>
 80054ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ee:	f7ff bde8 	b.w	80050c2 <__swbuf_r>
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	1c58      	adds	r0, r3, #1
 80054f6:	6010      	str	r0, [r2, #0]
 80054f8:	7019      	strb	r1, [r3, #0]
 80054fa:	4608      	mov	r0, r1
 80054fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005500:	4770      	bx	lr

08005502 <__sfputs_r>:
 8005502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005504:	4606      	mov	r6, r0
 8005506:	460f      	mov	r7, r1
 8005508:	4614      	mov	r4, r2
 800550a:	18d5      	adds	r5, r2, r3
 800550c:	42ac      	cmp	r4, r5
 800550e:	d101      	bne.n	8005514 <__sfputs_r+0x12>
 8005510:	2000      	movs	r0, #0
 8005512:	e007      	b.n	8005524 <__sfputs_r+0x22>
 8005514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005518:	463a      	mov	r2, r7
 800551a:	4630      	mov	r0, r6
 800551c:	f7ff ffda 	bl	80054d4 <__sfputc_r>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d1f3      	bne.n	800550c <__sfputs_r+0xa>
 8005524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005528 <_vfiprintf_r>:
 8005528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	460d      	mov	r5, r1
 800552e:	b09d      	sub	sp, #116	; 0x74
 8005530:	4614      	mov	r4, r2
 8005532:	4698      	mov	r8, r3
 8005534:	4606      	mov	r6, r0
 8005536:	b118      	cbz	r0, 8005540 <_vfiprintf_r+0x18>
 8005538:	6a03      	ldr	r3, [r0, #32]
 800553a:	b90b      	cbnz	r3, 8005540 <_vfiprintf_r+0x18>
 800553c:	f7ff fcda 	bl	8004ef4 <__sinit>
 8005540:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005542:	07d9      	lsls	r1, r3, #31
 8005544:	d405      	bmi.n	8005552 <_vfiprintf_r+0x2a>
 8005546:	89ab      	ldrh	r3, [r5, #12]
 8005548:	059a      	lsls	r2, r3, #22
 800554a:	d402      	bmi.n	8005552 <_vfiprintf_r+0x2a>
 800554c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800554e:	f7ff fec6 	bl	80052de <__retarget_lock_acquire_recursive>
 8005552:	89ab      	ldrh	r3, [r5, #12]
 8005554:	071b      	lsls	r3, r3, #28
 8005556:	d501      	bpl.n	800555c <_vfiprintf_r+0x34>
 8005558:	692b      	ldr	r3, [r5, #16]
 800555a:	b99b      	cbnz	r3, 8005584 <_vfiprintf_r+0x5c>
 800555c:	4629      	mov	r1, r5
 800555e:	4630      	mov	r0, r6
 8005560:	f7ff fdec 	bl	800513c <__swsetup_r>
 8005564:	b170      	cbz	r0, 8005584 <_vfiprintf_r+0x5c>
 8005566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005568:	07dc      	lsls	r4, r3, #31
 800556a:	d504      	bpl.n	8005576 <_vfiprintf_r+0x4e>
 800556c:	f04f 30ff 	mov.w	r0, #4294967295
 8005570:	b01d      	add	sp, #116	; 0x74
 8005572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005576:	89ab      	ldrh	r3, [r5, #12]
 8005578:	0598      	lsls	r0, r3, #22
 800557a:	d4f7      	bmi.n	800556c <_vfiprintf_r+0x44>
 800557c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800557e:	f7ff feaf 	bl	80052e0 <__retarget_lock_release_recursive>
 8005582:	e7f3      	b.n	800556c <_vfiprintf_r+0x44>
 8005584:	2300      	movs	r3, #0
 8005586:	9309      	str	r3, [sp, #36]	; 0x24
 8005588:	2320      	movs	r3, #32
 800558a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800558e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005592:	2330      	movs	r3, #48	; 0x30
 8005594:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005748 <_vfiprintf_r+0x220>
 8005598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800559c:	f04f 0901 	mov.w	r9, #1
 80055a0:	4623      	mov	r3, r4
 80055a2:	469a      	mov	sl, r3
 80055a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055a8:	b10a      	cbz	r2, 80055ae <_vfiprintf_r+0x86>
 80055aa:	2a25      	cmp	r2, #37	; 0x25
 80055ac:	d1f9      	bne.n	80055a2 <_vfiprintf_r+0x7a>
 80055ae:	ebba 0b04 	subs.w	fp, sl, r4
 80055b2:	d00b      	beq.n	80055cc <_vfiprintf_r+0xa4>
 80055b4:	465b      	mov	r3, fp
 80055b6:	4622      	mov	r2, r4
 80055b8:	4629      	mov	r1, r5
 80055ba:	4630      	mov	r0, r6
 80055bc:	f7ff ffa1 	bl	8005502 <__sfputs_r>
 80055c0:	3001      	adds	r0, #1
 80055c2:	f000 80a9 	beq.w	8005718 <_vfiprintf_r+0x1f0>
 80055c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055c8:	445a      	add	r2, fp
 80055ca:	9209      	str	r2, [sp, #36]	; 0x24
 80055cc:	f89a 3000 	ldrb.w	r3, [sl]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80a1 	beq.w	8005718 <_vfiprintf_r+0x1f0>
 80055d6:	2300      	movs	r3, #0
 80055d8:	f04f 32ff 	mov.w	r2, #4294967295
 80055dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055e0:	f10a 0a01 	add.w	sl, sl, #1
 80055e4:	9304      	str	r3, [sp, #16]
 80055e6:	9307      	str	r3, [sp, #28]
 80055e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055ec:	931a      	str	r3, [sp, #104]	; 0x68
 80055ee:	4654      	mov	r4, sl
 80055f0:	2205      	movs	r2, #5
 80055f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055f6:	4854      	ldr	r0, [pc, #336]	; (8005748 <_vfiprintf_r+0x220>)
 80055f8:	f7fa fdea 	bl	80001d0 <memchr>
 80055fc:	9a04      	ldr	r2, [sp, #16]
 80055fe:	b9d8      	cbnz	r0, 8005638 <_vfiprintf_r+0x110>
 8005600:	06d1      	lsls	r1, r2, #27
 8005602:	bf44      	itt	mi
 8005604:	2320      	movmi	r3, #32
 8005606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800560a:	0713      	lsls	r3, r2, #28
 800560c:	bf44      	itt	mi
 800560e:	232b      	movmi	r3, #43	; 0x2b
 8005610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005614:	f89a 3000 	ldrb.w	r3, [sl]
 8005618:	2b2a      	cmp	r3, #42	; 0x2a
 800561a:	d015      	beq.n	8005648 <_vfiprintf_r+0x120>
 800561c:	9a07      	ldr	r2, [sp, #28]
 800561e:	4654      	mov	r4, sl
 8005620:	2000      	movs	r0, #0
 8005622:	f04f 0c0a 	mov.w	ip, #10
 8005626:	4621      	mov	r1, r4
 8005628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800562c:	3b30      	subs	r3, #48	; 0x30
 800562e:	2b09      	cmp	r3, #9
 8005630:	d94d      	bls.n	80056ce <_vfiprintf_r+0x1a6>
 8005632:	b1b0      	cbz	r0, 8005662 <_vfiprintf_r+0x13a>
 8005634:	9207      	str	r2, [sp, #28]
 8005636:	e014      	b.n	8005662 <_vfiprintf_r+0x13a>
 8005638:	eba0 0308 	sub.w	r3, r0, r8
 800563c:	fa09 f303 	lsl.w	r3, r9, r3
 8005640:	4313      	orrs	r3, r2
 8005642:	9304      	str	r3, [sp, #16]
 8005644:	46a2      	mov	sl, r4
 8005646:	e7d2      	b.n	80055ee <_vfiprintf_r+0xc6>
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	1d19      	adds	r1, r3, #4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	9103      	str	r1, [sp, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	bfbb      	ittet	lt
 8005654:	425b      	neglt	r3, r3
 8005656:	f042 0202 	orrlt.w	r2, r2, #2
 800565a:	9307      	strge	r3, [sp, #28]
 800565c:	9307      	strlt	r3, [sp, #28]
 800565e:	bfb8      	it	lt
 8005660:	9204      	strlt	r2, [sp, #16]
 8005662:	7823      	ldrb	r3, [r4, #0]
 8005664:	2b2e      	cmp	r3, #46	; 0x2e
 8005666:	d10c      	bne.n	8005682 <_vfiprintf_r+0x15a>
 8005668:	7863      	ldrb	r3, [r4, #1]
 800566a:	2b2a      	cmp	r3, #42	; 0x2a
 800566c:	d134      	bne.n	80056d8 <_vfiprintf_r+0x1b0>
 800566e:	9b03      	ldr	r3, [sp, #12]
 8005670:	1d1a      	adds	r2, r3, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	9203      	str	r2, [sp, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	bfb8      	it	lt
 800567a:	f04f 33ff 	movlt.w	r3, #4294967295
 800567e:	3402      	adds	r4, #2
 8005680:	9305      	str	r3, [sp, #20]
 8005682:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005758 <_vfiprintf_r+0x230>
 8005686:	7821      	ldrb	r1, [r4, #0]
 8005688:	2203      	movs	r2, #3
 800568a:	4650      	mov	r0, sl
 800568c:	f7fa fda0 	bl	80001d0 <memchr>
 8005690:	b138      	cbz	r0, 80056a2 <_vfiprintf_r+0x17a>
 8005692:	9b04      	ldr	r3, [sp, #16]
 8005694:	eba0 000a 	sub.w	r0, r0, sl
 8005698:	2240      	movs	r2, #64	; 0x40
 800569a:	4082      	lsls	r2, r0
 800569c:	4313      	orrs	r3, r2
 800569e:	3401      	adds	r4, #1
 80056a0:	9304      	str	r3, [sp, #16]
 80056a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a6:	4829      	ldr	r0, [pc, #164]	; (800574c <_vfiprintf_r+0x224>)
 80056a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056ac:	2206      	movs	r2, #6
 80056ae:	f7fa fd8f 	bl	80001d0 <memchr>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d03f      	beq.n	8005736 <_vfiprintf_r+0x20e>
 80056b6:	4b26      	ldr	r3, [pc, #152]	; (8005750 <_vfiprintf_r+0x228>)
 80056b8:	bb1b      	cbnz	r3, 8005702 <_vfiprintf_r+0x1da>
 80056ba:	9b03      	ldr	r3, [sp, #12]
 80056bc:	3307      	adds	r3, #7
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	3308      	adds	r3, #8
 80056c4:	9303      	str	r3, [sp, #12]
 80056c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c8:	443b      	add	r3, r7
 80056ca:	9309      	str	r3, [sp, #36]	; 0x24
 80056cc:	e768      	b.n	80055a0 <_vfiprintf_r+0x78>
 80056ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80056d2:	460c      	mov	r4, r1
 80056d4:	2001      	movs	r0, #1
 80056d6:	e7a6      	b.n	8005626 <_vfiprintf_r+0xfe>
 80056d8:	2300      	movs	r3, #0
 80056da:	3401      	adds	r4, #1
 80056dc:	9305      	str	r3, [sp, #20]
 80056de:	4619      	mov	r1, r3
 80056e0:	f04f 0c0a 	mov.w	ip, #10
 80056e4:	4620      	mov	r0, r4
 80056e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056ea:	3a30      	subs	r2, #48	; 0x30
 80056ec:	2a09      	cmp	r2, #9
 80056ee:	d903      	bls.n	80056f8 <_vfiprintf_r+0x1d0>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0c6      	beq.n	8005682 <_vfiprintf_r+0x15a>
 80056f4:	9105      	str	r1, [sp, #20]
 80056f6:	e7c4      	b.n	8005682 <_vfiprintf_r+0x15a>
 80056f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80056fc:	4604      	mov	r4, r0
 80056fe:	2301      	movs	r3, #1
 8005700:	e7f0      	b.n	80056e4 <_vfiprintf_r+0x1bc>
 8005702:	ab03      	add	r3, sp, #12
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	462a      	mov	r2, r5
 8005708:	4b12      	ldr	r3, [pc, #72]	; (8005754 <_vfiprintf_r+0x22c>)
 800570a:	a904      	add	r1, sp, #16
 800570c:	4630      	mov	r0, r6
 800570e:	f3af 8000 	nop.w
 8005712:	4607      	mov	r7, r0
 8005714:	1c78      	adds	r0, r7, #1
 8005716:	d1d6      	bne.n	80056c6 <_vfiprintf_r+0x19e>
 8005718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800571a:	07d9      	lsls	r1, r3, #31
 800571c:	d405      	bmi.n	800572a <_vfiprintf_r+0x202>
 800571e:	89ab      	ldrh	r3, [r5, #12]
 8005720:	059a      	lsls	r2, r3, #22
 8005722:	d402      	bmi.n	800572a <_vfiprintf_r+0x202>
 8005724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005726:	f7ff fddb 	bl	80052e0 <__retarget_lock_release_recursive>
 800572a:	89ab      	ldrh	r3, [r5, #12]
 800572c:	065b      	lsls	r3, r3, #25
 800572e:	f53f af1d 	bmi.w	800556c <_vfiprintf_r+0x44>
 8005732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005734:	e71c      	b.n	8005570 <_vfiprintf_r+0x48>
 8005736:	ab03      	add	r3, sp, #12
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	462a      	mov	r2, r5
 800573c:	4b05      	ldr	r3, [pc, #20]	; (8005754 <_vfiprintf_r+0x22c>)
 800573e:	a904      	add	r1, sp, #16
 8005740:	4630      	mov	r0, r6
 8005742:	f000 f879 	bl	8005838 <_printf_i>
 8005746:	e7e4      	b.n	8005712 <_vfiprintf_r+0x1ea>
 8005748:	08005df8 	.word	0x08005df8
 800574c:	08005e02 	.word	0x08005e02
 8005750:	00000000 	.word	0x00000000
 8005754:	08005503 	.word	0x08005503
 8005758:	08005dfe 	.word	0x08005dfe

0800575c <_printf_common>:
 800575c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	4616      	mov	r6, r2
 8005762:	4699      	mov	r9, r3
 8005764:	688a      	ldr	r2, [r1, #8]
 8005766:	690b      	ldr	r3, [r1, #16]
 8005768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800576c:	4293      	cmp	r3, r2
 800576e:	bfb8      	it	lt
 8005770:	4613      	movlt	r3, r2
 8005772:	6033      	str	r3, [r6, #0]
 8005774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005778:	4607      	mov	r7, r0
 800577a:	460c      	mov	r4, r1
 800577c:	b10a      	cbz	r2, 8005782 <_printf_common+0x26>
 800577e:	3301      	adds	r3, #1
 8005780:	6033      	str	r3, [r6, #0]
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	0699      	lsls	r1, r3, #26
 8005786:	bf42      	ittt	mi
 8005788:	6833      	ldrmi	r3, [r6, #0]
 800578a:	3302      	addmi	r3, #2
 800578c:	6033      	strmi	r3, [r6, #0]
 800578e:	6825      	ldr	r5, [r4, #0]
 8005790:	f015 0506 	ands.w	r5, r5, #6
 8005794:	d106      	bne.n	80057a4 <_printf_common+0x48>
 8005796:	f104 0a19 	add.w	sl, r4, #25
 800579a:	68e3      	ldr	r3, [r4, #12]
 800579c:	6832      	ldr	r2, [r6, #0]
 800579e:	1a9b      	subs	r3, r3, r2
 80057a0:	42ab      	cmp	r3, r5
 80057a2:	dc26      	bgt.n	80057f2 <_printf_common+0x96>
 80057a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057a8:	1e13      	subs	r3, r2, #0
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	bf18      	it	ne
 80057ae:	2301      	movne	r3, #1
 80057b0:	0692      	lsls	r2, r2, #26
 80057b2:	d42b      	bmi.n	800580c <_printf_common+0xb0>
 80057b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b8:	4649      	mov	r1, r9
 80057ba:	4638      	mov	r0, r7
 80057bc:	47c0      	blx	r8
 80057be:	3001      	adds	r0, #1
 80057c0:	d01e      	beq.n	8005800 <_printf_common+0xa4>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	6922      	ldr	r2, [r4, #16]
 80057c6:	f003 0306 	and.w	r3, r3, #6
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	bf02      	ittt	eq
 80057ce:	68e5      	ldreq	r5, [r4, #12]
 80057d0:	6833      	ldreq	r3, [r6, #0]
 80057d2:	1aed      	subeq	r5, r5, r3
 80057d4:	68a3      	ldr	r3, [r4, #8]
 80057d6:	bf0c      	ite	eq
 80057d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057dc:	2500      	movne	r5, #0
 80057de:	4293      	cmp	r3, r2
 80057e0:	bfc4      	itt	gt
 80057e2:	1a9b      	subgt	r3, r3, r2
 80057e4:	18ed      	addgt	r5, r5, r3
 80057e6:	2600      	movs	r6, #0
 80057e8:	341a      	adds	r4, #26
 80057ea:	42b5      	cmp	r5, r6
 80057ec:	d11a      	bne.n	8005824 <_printf_common+0xc8>
 80057ee:	2000      	movs	r0, #0
 80057f0:	e008      	b.n	8005804 <_printf_common+0xa8>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4652      	mov	r2, sl
 80057f6:	4649      	mov	r1, r9
 80057f8:	4638      	mov	r0, r7
 80057fa:	47c0      	blx	r8
 80057fc:	3001      	adds	r0, #1
 80057fe:	d103      	bne.n	8005808 <_printf_common+0xac>
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005808:	3501      	adds	r5, #1
 800580a:	e7c6      	b.n	800579a <_printf_common+0x3e>
 800580c:	18e1      	adds	r1, r4, r3
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	2030      	movs	r0, #48	; 0x30
 8005812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005816:	4422      	add	r2, r4
 8005818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800581c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005820:	3302      	adds	r3, #2
 8005822:	e7c7      	b.n	80057b4 <_printf_common+0x58>
 8005824:	2301      	movs	r3, #1
 8005826:	4622      	mov	r2, r4
 8005828:	4649      	mov	r1, r9
 800582a:	4638      	mov	r0, r7
 800582c:	47c0      	blx	r8
 800582e:	3001      	adds	r0, #1
 8005830:	d0e6      	beq.n	8005800 <_printf_common+0xa4>
 8005832:	3601      	adds	r6, #1
 8005834:	e7d9      	b.n	80057ea <_printf_common+0x8e>
	...

08005838 <_printf_i>:
 8005838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800583c:	7e0f      	ldrb	r7, [r1, #24]
 800583e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005840:	2f78      	cmp	r7, #120	; 0x78
 8005842:	4691      	mov	r9, r2
 8005844:	4680      	mov	r8, r0
 8005846:	460c      	mov	r4, r1
 8005848:	469a      	mov	sl, r3
 800584a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800584e:	d807      	bhi.n	8005860 <_printf_i+0x28>
 8005850:	2f62      	cmp	r7, #98	; 0x62
 8005852:	d80a      	bhi.n	800586a <_printf_i+0x32>
 8005854:	2f00      	cmp	r7, #0
 8005856:	f000 80d4 	beq.w	8005a02 <_printf_i+0x1ca>
 800585a:	2f58      	cmp	r7, #88	; 0x58
 800585c:	f000 80c0 	beq.w	80059e0 <_printf_i+0x1a8>
 8005860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005868:	e03a      	b.n	80058e0 <_printf_i+0xa8>
 800586a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800586e:	2b15      	cmp	r3, #21
 8005870:	d8f6      	bhi.n	8005860 <_printf_i+0x28>
 8005872:	a101      	add	r1, pc, #4	; (adr r1, 8005878 <_printf_i+0x40>)
 8005874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005878:	080058d1 	.word	0x080058d1
 800587c:	080058e5 	.word	0x080058e5
 8005880:	08005861 	.word	0x08005861
 8005884:	08005861 	.word	0x08005861
 8005888:	08005861 	.word	0x08005861
 800588c:	08005861 	.word	0x08005861
 8005890:	080058e5 	.word	0x080058e5
 8005894:	08005861 	.word	0x08005861
 8005898:	08005861 	.word	0x08005861
 800589c:	08005861 	.word	0x08005861
 80058a0:	08005861 	.word	0x08005861
 80058a4:	080059e9 	.word	0x080059e9
 80058a8:	08005911 	.word	0x08005911
 80058ac:	080059a3 	.word	0x080059a3
 80058b0:	08005861 	.word	0x08005861
 80058b4:	08005861 	.word	0x08005861
 80058b8:	08005a0b 	.word	0x08005a0b
 80058bc:	08005861 	.word	0x08005861
 80058c0:	08005911 	.word	0x08005911
 80058c4:	08005861 	.word	0x08005861
 80058c8:	08005861 	.word	0x08005861
 80058cc:	080059ab 	.word	0x080059ab
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	1d1a      	adds	r2, r3, #4
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	602a      	str	r2, [r5, #0]
 80058d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058e0:	2301      	movs	r3, #1
 80058e2:	e09f      	b.n	8005a24 <_printf_i+0x1ec>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	682b      	ldr	r3, [r5, #0]
 80058e8:	0607      	lsls	r7, r0, #24
 80058ea:	f103 0104 	add.w	r1, r3, #4
 80058ee:	6029      	str	r1, [r5, #0]
 80058f0:	d501      	bpl.n	80058f6 <_printf_i+0xbe>
 80058f2:	681e      	ldr	r6, [r3, #0]
 80058f4:	e003      	b.n	80058fe <_printf_i+0xc6>
 80058f6:	0646      	lsls	r6, r0, #25
 80058f8:	d5fb      	bpl.n	80058f2 <_printf_i+0xba>
 80058fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058fe:	2e00      	cmp	r6, #0
 8005900:	da03      	bge.n	800590a <_printf_i+0xd2>
 8005902:	232d      	movs	r3, #45	; 0x2d
 8005904:	4276      	negs	r6, r6
 8005906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800590a:	485a      	ldr	r0, [pc, #360]	; (8005a74 <_printf_i+0x23c>)
 800590c:	230a      	movs	r3, #10
 800590e:	e012      	b.n	8005936 <_printf_i+0xfe>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	6820      	ldr	r0, [r4, #0]
 8005914:	1d19      	adds	r1, r3, #4
 8005916:	6029      	str	r1, [r5, #0]
 8005918:	0605      	lsls	r5, r0, #24
 800591a:	d501      	bpl.n	8005920 <_printf_i+0xe8>
 800591c:	681e      	ldr	r6, [r3, #0]
 800591e:	e002      	b.n	8005926 <_printf_i+0xee>
 8005920:	0641      	lsls	r1, r0, #25
 8005922:	d5fb      	bpl.n	800591c <_printf_i+0xe4>
 8005924:	881e      	ldrh	r6, [r3, #0]
 8005926:	4853      	ldr	r0, [pc, #332]	; (8005a74 <_printf_i+0x23c>)
 8005928:	2f6f      	cmp	r7, #111	; 0x6f
 800592a:	bf0c      	ite	eq
 800592c:	2308      	moveq	r3, #8
 800592e:	230a      	movne	r3, #10
 8005930:	2100      	movs	r1, #0
 8005932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005936:	6865      	ldr	r5, [r4, #4]
 8005938:	60a5      	str	r5, [r4, #8]
 800593a:	2d00      	cmp	r5, #0
 800593c:	bfa2      	ittt	ge
 800593e:	6821      	ldrge	r1, [r4, #0]
 8005940:	f021 0104 	bicge.w	r1, r1, #4
 8005944:	6021      	strge	r1, [r4, #0]
 8005946:	b90e      	cbnz	r6, 800594c <_printf_i+0x114>
 8005948:	2d00      	cmp	r5, #0
 800594a:	d04b      	beq.n	80059e4 <_printf_i+0x1ac>
 800594c:	4615      	mov	r5, r2
 800594e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005952:	fb03 6711 	mls	r7, r3, r1, r6
 8005956:	5dc7      	ldrb	r7, [r0, r7]
 8005958:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800595c:	4637      	mov	r7, r6
 800595e:	42bb      	cmp	r3, r7
 8005960:	460e      	mov	r6, r1
 8005962:	d9f4      	bls.n	800594e <_printf_i+0x116>
 8005964:	2b08      	cmp	r3, #8
 8005966:	d10b      	bne.n	8005980 <_printf_i+0x148>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	07de      	lsls	r6, r3, #31
 800596c:	d508      	bpl.n	8005980 <_printf_i+0x148>
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	6861      	ldr	r1, [r4, #4]
 8005972:	4299      	cmp	r1, r3
 8005974:	bfde      	ittt	le
 8005976:	2330      	movle	r3, #48	; 0x30
 8005978:	f805 3c01 	strble.w	r3, [r5, #-1]
 800597c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005980:	1b52      	subs	r2, r2, r5
 8005982:	6122      	str	r2, [r4, #16]
 8005984:	f8cd a000 	str.w	sl, [sp]
 8005988:	464b      	mov	r3, r9
 800598a:	aa03      	add	r2, sp, #12
 800598c:	4621      	mov	r1, r4
 800598e:	4640      	mov	r0, r8
 8005990:	f7ff fee4 	bl	800575c <_printf_common>
 8005994:	3001      	adds	r0, #1
 8005996:	d14a      	bne.n	8005a2e <_printf_i+0x1f6>
 8005998:	f04f 30ff 	mov.w	r0, #4294967295
 800599c:	b004      	add	sp, #16
 800599e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	f043 0320 	orr.w	r3, r3, #32
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	4833      	ldr	r0, [pc, #204]	; (8005a78 <_printf_i+0x240>)
 80059ac:	2778      	movs	r7, #120	; 0x78
 80059ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	6829      	ldr	r1, [r5, #0]
 80059b6:	061f      	lsls	r7, r3, #24
 80059b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80059bc:	d402      	bmi.n	80059c4 <_printf_i+0x18c>
 80059be:	065f      	lsls	r7, r3, #25
 80059c0:	bf48      	it	mi
 80059c2:	b2b6      	uxthmi	r6, r6
 80059c4:	07df      	lsls	r7, r3, #31
 80059c6:	bf48      	it	mi
 80059c8:	f043 0320 	orrmi.w	r3, r3, #32
 80059cc:	6029      	str	r1, [r5, #0]
 80059ce:	bf48      	it	mi
 80059d0:	6023      	strmi	r3, [r4, #0]
 80059d2:	b91e      	cbnz	r6, 80059dc <_printf_i+0x1a4>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	f023 0320 	bic.w	r3, r3, #32
 80059da:	6023      	str	r3, [r4, #0]
 80059dc:	2310      	movs	r3, #16
 80059de:	e7a7      	b.n	8005930 <_printf_i+0xf8>
 80059e0:	4824      	ldr	r0, [pc, #144]	; (8005a74 <_printf_i+0x23c>)
 80059e2:	e7e4      	b.n	80059ae <_printf_i+0x176>
 80059e4:	4615      	mov	r5, r2
 80059e6:	e7bd      	b.n	8005964 <_printf_i+0x12c>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	6826      	ldr	r6, [r4, #0]
 80059ec:	6961      	ldr	r1, [r4, #20]
 80059ee:	1d18      	adds	r0, r3, #4
 80059f0:	6028      	str	r0, [r5, #0]
 80059f2:	0635      	lsls	r5, r6, #24
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	d501      	bpl.n	80059fc <_printf_i+0x1c4>
 80059f8:	6019      	str	r1, [r3, #0]
 80059fa:	e002      	b.n	8005a02 <_printf_i+0x1ca>
 80059fc:	0670      	lsls	r0, r6, #25
 80059fe:	d5fb      	bpl.n	80059f8 <_printf_i+0x1c0>
 8005a00:	8019      	strh	r1, [r3, #0]
 8005a02:	2300      	movs	r3, #0
 8005a04:	6123      	str	r3, [r4, #16]
 8005a06:	4615      	mov	r5, r2
 8005a08:	e7bc      	b.n	8005984 <_printf_i+0x14c>
 8005a0a:	682b      	ldr	r3, [r5, #0]
 8005a0c:	1d1a      	adds	r2, r3, #4
 8005a0e:	602a      	str	r2, [r5, #0]
 8005a10:	681d      	ldr	r5, [r3, #0]
 8005a12:	6862      	ldr	r2, [r4, #4]
 8005a14:	2100      	movs	r1, #0
 8005a16:	4628      	mov	r0, r5
 8005a18:	f7fa fbda 	bl	80001d0 <memchr>
 8005a1c:	b108      	cbz	r0, 8005a22 <_printf_i+0x1ea>
 8005a1e:	1b40      	subs	r0, r0, r5
 8005a20:	6060      	str	r0, [r4, #4]
 8005a22:	6863      	ldr	r3, [r4, #4]
 8005a24:	6123      	str	r3, [r4, #16]
 8005a26:	2300      	movs	r3, #0
 8005a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a2c:	e7aa      	b.n	8005984 <_printf_i+0x14c>
 8005a2e:	6923      	ldr	r3, [r4, #16]
 8005a30:	462a      	mov	r2, r5
 8005a32:	4649      	mov	r1, r9
 8005a34:	4640      	mov	r0, r8
 8005a36:	47d0      	blx	sl
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d0ad      	beq.n	8005998 <_printf_i+0x160>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	079b      	lsls	r3, r3, #30
 8005a40:	d413      	bmi.n	8005a6a <_printf_i+0x232>
 8005a42:	68e0      	ldr	r0, [r4, #12]
 8005a44:	9b03      	ldr	r3, [sp, #12]
 8005a46:	4298      	cmp	r0, r3
 8005a48:	bfb8      	it	lt
 8005a4a:	4618      	movlt	r0, r3
 8005a4c:	e7a6      	b.n	800599c <_printf_i+0x164>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4632      	mov	r2, r6
 8005a52:	4649      	mov	r1, r9
 8005a54:	4640      	mov	r0, r8
 8005a56:	47d0      	blx	sl
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d09d      	beq.n	8005998 <_printf_i+0x160>
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	68e3      	ldr	r3, [r4, #12]
 8005a60:	9903      	ldr	r1, [sp, #12]
 8005a62:	1a5b      	subs	r3, r3, r1
 8005a64:	42ab      	cmp	r3, r5
 8005a66:	dcf2      	bgt.n	8005a4e <_printf_i+0x216>
 8005a68:	e7eb      	b.n	8005a42 <_printf_i+0x20a>
 8005a6a:	2500      	movs	r5, #0
 8005a6c:	f104 0619 	add.w	r6, r4, #25
 8005a70:	e7f5      	b.n	8005a5e <_printf_i+0x226>
 8005a72:	bf00      	nop
 8005a74:	08005e09 	.word	0x08005e09
 8005a78:	08005e1a 	.word	0x08005e1a

08005a7c <__sflush_r>:
 8005a7c:	898a      	ldrh	r2, [r1, #12]
 8005a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a82:	4605      	mov	r5, r0
 8005a84:	0710      	lsls	r0, r2, #28
 8005a86:	460c      	mov	r4, r1
 8005a88:	d458      	bmi.n	8005b3c <__sflush_r+0xc0>
 8005a8a:	684b      	ldr	r3, [r1, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	dc05      	bgt.n	8005a9c <__sflush_r+0x20>
 8005a90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	dc02      	bgt.n	8005a9c <__sflush_r+0x20>
 8005a96:	2000      	movs	r0, #0
 8005a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a9e:	2e00      	cmp	r6, #0
 8005aa0:	d0f9      	beq.n	8005a96 <__sflush_r+0x1a>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005aa8:	682f      	ldr	r7, [r5, #0]
 8005aaa:	6a21      	ldr	r1, [r4, #32]
 8005aac:	602b      	str	r3, [r5, #0]
 8005aae:	d032      	beq.n	8005b16 <__sflush_r+0x9a>
 8005ab0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ab2:	89a3      	ldrh	r3, [r4, #12]
 8005ab4:	075a      	lsls	r2, r3, #29
 8005ab6:	d505      	bpl.n	8005ac4 <__sflush_r+0x48>
 8005ab8:	6863      	ldr	r3, [r4, #4]
 8005aba:	1ac0      	subs	r0, r0, r3
 8005abc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005abe:	b10b      	cbz	r3, 8005ac4 <__sflush_r+0x48>
 8005ac0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ac2:	1ac0      	subs	r0, r0, r3
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005aca:	6a21      	ldr	r1, [r4, #32]
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b0      	blx	r6
 8005ad0:	1c43      	adds	r3, r0, #1
 8005ad2:	89a3      	ldrh	r3, [r4, #12]
 8005ad4:	d106      	bne.n	8005ae4 <__sflush_r+0x68>
 8005ad6:	6829      	ldr	r1, [r5, #0]
 8005ad8:	291d      	cmp	r1, #29
 8005ada:	d82b      	bhi.n	8005b34 <__sflush_r+0xb8>
 8005adc:	4a29      	ldr	r2, [pc, #164]	; (8005b84 <__sflush_r+0x108>)
 8005ade:	410a      	asrs	r2, r1
 8005ae0:	07d6      	lsls	r6, r2, #31
 8005ae2:	d427      	bmi.n	8005b34 <__sflush_r+0xb8>
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	6062      	str	r2, [r4, #4]
 8005ae8:	04d9      	lsls	r1, r3, #19
 8005aea:	6922      	ldr	r2, [r4, #16]
 8005aec:	6022      	str	r2, [r4, #0]
 8005aee:	d504      	bpl.n	8005afa <__sflush_r+0x7e>
 8005af0:	1c42      	adds	r2, r0, #1
 8005af2:	d101      	bne.n	8005af8 <__sflush_r+0x7c>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b903      	cbnz	r3, 8005afa <__sflush_r+0x7e>
 8005af8:	6560      	str	r0, [r4, #84]	; 0x54
 8005afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005afc:	602f      	str	r7, [r5, #0]
 8005afe:	2900      	cmp	r1, #0
 8005b00:	d0c9      	beq.n	8005a96 <__sflush_r+0x1a>
 8005b02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b06:	4299      	cmp	r1, r3
 8005b08:	d002      	beq.n	8005b10 <__sflush_r+0x94>
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f7ff fbea 	bl	80052e4 <_free_r>
 8005b10:	2000      	movs	r0, #0
 8005b12:	6360      	str	r0, [r4, #52]	; 0x34
 8005b14:	e7c0      	b.n	8005a98 <__sflush_r+0x1c>
 8005b16:	2301      	movs	r3, #1
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b0      	blx	r6
 8005b1c:	1c41      	adds	r1, r0, #1
 8005b1e:	d1c8      	bne.n	8005ab2 <__sflush_r+0x36>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0c5      	beq.n	8005ab2 <__sflush_r+0x36>
 8005b26:	2b1d      	cmp	r3, #29
 8005b28:	d001      	beq.n	8005b2e <__sflush_r+0xb2>
 8005b2a:	2b16      	cmp	r3, #22
 8005b2c:	d101      	bne.n	8005b32 <__sflush_r+0xb6>
 8005b2e:	602f      	str	r7, [r5, #0]
 8005b30:	e7b1      	b.n	8005a96 <__sflush_r+0x1a>
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b38:	81a3      	strh	r3, [r4, #12]
 8005b3a:	e7ad      	b.n	8005a98 <__sflush_r+0x1c>
 8005b3c:	690f      	ldr	r7, [r1, #16]
 8005b3e:	2f00      	cmp	r7, #0
 8005b40:	d0a9      	beq.n	8005a96 <__sflush_r+0x1a>
 8005b42:	0793      	lsls	r3, r2, #30
 8005b44:	680e      	ldr	r6, [r1, #0]
 8005b46:	bf08      	it	eq
 8005b48:	694b      	ldreq	r3, [r1, #20]
 8005b4a:	600f      	str	r7, [r1, #0]
 8005b4c:	bf18      	it	ne
 8005b4e:	2300      	movne	r3, #0
 8005b50:	eba6 0807 	sub.w	r8, r6, r7
 8005b54:	608b      	str	r3, [r1, #8]
 8005b56:	f1b8 0f00 	cmp.w	r8, #0
 8005b5a:	dd9c      	ble.n	8005a96 <__sflush_r+0x1a>
 8005b5c:	6a21      	ldr	r1, [r4, #32]
 8005b5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b60:	4643      	mov	r3, r8
 8005b62:	463a      	mov	r2, r7
 8005b64:	4628      	mov	r0, r5
 8005b66:	47b0      	blx	r6
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	dc06      	bgt.n	8005b7a <__sflush_r+0xfe>
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b72:	81a3      	strh	r3, [r4, #12]
 8005b74:	f04f 30ff 	mov.w	r0, #4294967295
 8005b78:	e78e      	b.n	8005a98 <__sflush_r+0x1c>
 8005b7a:	4407      	add	r7, r0
 8005b7c:	eba8 0800 	sub.w	r8, r8, r0
 8005b80:	e7e9      	b.n	8005b56 <__sflush_r+0xda>
 8005b82:	bf00      	nop
 8005b84:	dfbffffe 	.word	0xdfbffffe

08005b88 <_fflush_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	690b      	ldr	r3, [r1, #16]
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	460c      	mov	r4, r1
 8005b90:	b913      	cbnz	r3, 8005b98 <_fflush_r+0x10>
 8005b92:	2500      	movs	r5, #0
 8005b94:	4628      	mov	r0, r5
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	b118      	cbz	r0, 8005ba2 <_fflush_r+0x1a>
 8005b9a:	6a03      	ldr	r3, [r0, #32]
 8005b9c:	b90b      	cbnz	r3, 8005ba2 <_fflush_r+0x1a>
 8005b9e:	f7ff f9a9 	bl	8004ef4 <__sinit>
 8005ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0f3      	beq.n	8005b92 <_fflush_r+0xa>
 8005baa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bac:	07d0      	lsls	r0, r2, #31
 8005bae:	d404      	bmi.n	8005bba <_fflush_r+0x32>
 8005bb0:	0599      	lsls	r1, r3, #22
 8005bb2:	d402      	bmi.n	8005bba <_fflush_r+0x32>
 8005bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bb6:	f7ff fb92 	bl	80052de <__retarget_lock_acquire_recursive>
 8005bba:	4628      	mov	r0, r5
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	f7ff ff5d 	bl	8005a7c <__sflush_r>
 8005bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bc4:	07da      	lsls	r2, r3, #31
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	d4e4      	bmi.n	8005b94 <_fflush_r+0xc>
 8005bca:	89a3      	ldrh	r3, [r4, #12]
 8005bcc:	059b      	lsls	r3, r3, #22
 8005bce:	d4e1      	bmi.n	8005b94 <_fflush_r+0xc>
 8005bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bd2:	f7ff fb85 	bl	80052e0 <__retarget_lock_release_recursive>
 8005bd6:	e7dd      	b.n	8005b94 <_fflush_r+0xc>

08005bd8 <__swhatbuf_r>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	460c      	mov	r4, r1
 8005bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be0:	2900      	cmp	r1, #0
 8005be2:	b096      	sub	sp, #88	; 0x58
 8005be4:	4615      	mov	r5, r2
 8005be6:	461e      	mov	r6, r3
 8005be8:	da0d      	bge.n	8005c06 <__swhatbuf_r+0x2e>
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005bf0:	f04f 0100 	mov.w	r1, #0
 8005bf4:	bf0c      	ite	eq
 8005bf6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005bfa:	2340      	movne	r3, #64	; 0x40
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	6031      	str	r1, [r6, #0]
 8005c00:	602b      	str	r3, [r5, #0]
 8005c02:	b016      	add	sp, #88	; 0x58
 8005c04:	bd70      	pop	{r4, r5, r6, pc}
 8005c06:	466a      	mov	r2, sp
 8005c08:	f000 f848 	bl	8005c9c <_fstat_r>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	dbec      	blt.n	8005bea <__swhatbuf_r+0x12>
 8005c10:	9901      	ldr	r1, [sp, #4]
 8005c12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005c16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005c1a:	4259      	negs	r1, r3
 8005c1c:	4159      	adcs	r1, r3
 8005c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c22:	e7eb      	b.n	8005bfc <__swhatbuf_r+0x24>

08005c24 <__smakebuf_r>:
 8005c24:	898b      	ldrh	r3, [r1, #12]
 8005c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c28:	079d      	lsls	r5, r3, #30
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	d507      	bpl.n	8005c40 <__smakebuf_r+0x1c>
 8005c30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	6123      	str	r3, [r4, #16]
 8005c38:	2301      	movs	r3, #1
 8005c3a:	6163      	str	r3, [r4, #20]
 8005c3c:	b002      	add	sp, #8
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	ab01      	add	r3, sp, #4
 8005c42:	466a      	mov	r2, sp
 8005c44:	f7ff ffc8 	bl	8005bd8 <__swhatbuf_r>
 8005c48:	9900      	ldr	r1, [sp, #0]
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f7ff fbb5 	bl	80053bc <_malloc_r>
 8005c52:	b948      	cbnz	r0, 8005c68 <__smakebuf_r+0x44>
 8005c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c58:	059a      	lsls	r2, r3, #22
 8005c5a:	d4ef      	bmi.n	8005c3c <__smakebuf_r+0x18>
 8005c5c:	f023 0303 	bic.w	r3, r3, #3
 8005c60:	f043 0302 	orr.w	r3, r3, #2
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	e7e3      	b.n	8005c30 <__smakebuf_r+0xc>
 8005c68:	89a3      	ldrh	r3, [r4, #12]
 8005c6a:	6020      	str	r0, [r4, #0]
 8005c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	9b00      	ldr	r3, [sp, #0]
 8005c74:	6163      	str	r3, [r4, #20]
 8005c76:	9b01      	ldr	r3, [sp, #4]
 8005c78:	6120      	str	r0, [r4, #16]
 8005c7a:	b15b      	cbz	r3, 8005c94 <__smakebuf_r+0x70>
 8005c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c80:	4630      	mov	r0, r6
 8005c82:	f000 f81d 	bl	8005cc0 <_isatty_r>
 8005c86:	b128      	cbz	r0, 8005c94 <__smakebuf_r+0x70>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	f043 0301 	orr.w	r3, r3, #1
 8005c92:	81a3      	strh	r3, [r4, #12]
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	431d      	orrs	r5, r3
 8005c98:	81a5      	strh	r5, [r4, #12]
 8005c9a:	e7cf      	b.n	8005c3c <__smakebuf_r+0x18>

08005c9c <_fstat_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4d07      	ldr	r5, [pc, #28]	; (8005cbc <_fstat_r+0x20>)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	602b      	str	r3, [r5, #0]
 8005caa:	f7fb f8be 	bl	8000e2a <_fstat>
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	d102      	bne.n	8005cb8 <_fstat_r+0x1c>
 8005cb2:	682b      	ldr	r3, [r5, #0]
 8005cb4:	b103      	cbz	r3, 8005cb8 <_fstat_r+0x1c>
 8005cb6:	6023      	str	r3, [r4, #0]
 8005cb8:	bd38      	pop	{r3, r4, r5, pc}
 8005cba:	bf00      	nop
 8005cbc:	200004a0 	.word	0x200004a0

08005cc0 <_isatty_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	4d06      	ldr	r5, [pc, #24]	; (8005cdc <_isatty_r+0x1c>)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	4608      	mov	r0, r1
 8005cca:	602b      	str	r3, [r5, #0]
 8005ccc:	f7fb f8bd 	bl	8000e4a <_isatty>
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	d102      	bne.n	8005cda <_isatty_r+0x1a>
 8005cd4:	682b      	ldr	r3, [r5, #0]
 8005cd6:	b103      	cbz	r3, 8005cda <_isatty_r+0x1a>
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
 8005cdc:	200004a0 	.word	0x200004a0

08005ce0 <_sbrk_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4d06      	ldr	r5, [pc, #24]	; (8005cfc <_sbrk_r+0x1c>)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	4608      	mov	r0, r1
 8005cea:	602b      	str	r3, [r5, #0]
 8005cec:	f7fb f8c6 	bl	8000e7c <_sbrk>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d102      	bne.n	8005cfa <_sbrk_r+0x1a>
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	b103      	cbz	r3, 8005cfa <_sbrk_r+0x1a>
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	200004a0 	.word	0x200004a0

08005d00 <_init>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	bf00      	nop
 8005d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d06:	bc08      	pop	{r3}
 8005d08:	469e      	mov	lr, r3
 8005d0a:	4770      	bx	lr

08005d0c <_fini>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	bf00      	nop
 8005d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d12:	bc08      	pop	{r3}
 8005d14:	469e      	mov	lr, r3
 8005d16:	4770      	bx	lr
