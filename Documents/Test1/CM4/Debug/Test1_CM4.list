
Test1_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002314  10000000  10000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10002314  10002314  00022314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  10002364  10002364  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ARM.extab    00000000  10002364  10002364  0003000c  2**0
                  CONTENTS
  5 .ARM          00000000  10002364  10002364  0003000c  2**0
                  CONTENTS
  6 .preinit_array 00000000  10002364  10002364  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  10002364  10002364  00022364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  10002368  10002368  00022368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  10020000  1000236c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  1002000c  1002000c  0003000c  2**0
                  CONTENTS
 11 .bss          00000020  1002000c  10002378  0003000c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  1002002c  10002398  0003000c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00009c93  00000000  00000000  0003007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000010ff  00000000  00000000  00039d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000005d8  00000000  00000000  0003ae18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000044e  00000000  00000000  0003b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00043d16  00000000  00000000  0003b83e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00007e0c  00000000  00000000  0007f554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001bf6ce  00000000  00000000  00087360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000015d4  00000000  00000000  00246a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  00248004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	1002000c 	.word	0x1002000c
1000001c:	00000000 	.word	0x00000000
10000020:	100022fc 	.word	0x100022fc

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020010 	.word	0x10020010
1000003c:	100022fc 	.word	0x100022fc

10000040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000040:	b480      	push	{r7}
10000042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000044:	4b0f      	ldr	r3, [pc, #60]	; (10000084 <SystemInit+0x44>)
10000046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000004a:	4a0e      	ldr	r2, [pc, #56]	; (10000084 <SystemInit+0x44>)
1000004c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000054:	4b0c      	ldr	r3, [pc, #48]	; (10000088 <SystemInit+0x48>)
10000056:	2200      	movs	r2, #0
10000058:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000005a:	4b0b      	ldr	r3, [pc, #44]	; (10000088 <SystemInit+0x48>)
1000005c:	2200      	movs	r2, #0
1000005e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000060:	4b09      	ldr	r3, [pc, #36]	; (10000088 <SystemInit+0x48>)
10000062:	2200      	movs	r2, #0
10000064:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000066:	4b08      	ldr	r3, [pc, #32]	; (10000088 <SystemInit+0x48>)
10000068:	2200      	movs	r2, #0
1000006a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000006c:	4b06      	ldr	r3, [pc, #24]	; (10000088 <SystemInit+0x48>)
1000006e:	2200      	movs	r2, #0
10000070:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000072:	4b05      	ldr	r3, [pc, #20]	; (10000088 <SystemInit+0x48>)
10000074:	2200      	movs	r2, #0
10000076:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000078:	bf00      	nop
1000007a:	46bd      	mov	sp, r7
1000007c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000080:	4770      	bx	lr
10000082:	bf00      	nop
10000084:	e000ed00 	.word	0xe000ed00
10000088:	5000d0c0 	.word	0x5000d0c0

1000008c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
1000008c:	b580      	push	{r7, lr}
1000008e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000090:	f000 f9a2 	bl	100003d8 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000094:	4b05      	ldr	r3, [pc, #20]	; (100000ac <main+0x20>)
10000096:	681b      	ldr	r3, [r3, #0]
10000098:	f003 0307 	and.w	r3, r3, #7
1000009c:	2b04      	cmp	r3, #4
1000009e:	d101      	bne.n	100000a4 <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
100000a0:	f000 f806 	bl	100000b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
100000a4:	f000 f929 	bl	100002fa <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
100000a8:	e7fe      	b.n	100000a8 <main+0x1c>
100000aa:	bf00      	nop
100000ac:	50020000 	.word	0x50020000

100000b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
100000b0:	b580      	push	{r7, lr}
100000b2:	b0d2      	sub	sp, #328	; 0x148
100000b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100000b6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100000ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100000be:	4618      	mov	r0, r3
100000c0:	f44f 738a 	mov.w	r3, #276	; 0x114
100000c4:	461a      	mov	r2, r3
100000c6:	2100      	movs	r1, #0
100000c8:	f002 f8ec 	bl	100022a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
100000cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100000d0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100000d4:	4618      	mov	r0, r3
100000d6:	2330      	movs	r3, #48	; 0x30
100000d8:	461a      	mov	r2, r3
100000da:	2100      	movs	r1, #0
100000dc:	f002 f8e2 	bl	100022a4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
100000e0:	f000 fad0 	bl	10000684 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
100000e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100000ec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
100000f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100000f4:	f043 0320 	orr.w	r3, r3, #32
100000f8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
100000fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000100:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000104:	2205      	movs	r2, #5
10000106:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIG;
10000108:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000010c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000110:	f44f 62b0 	mov.w	r2, #1408	; 0x580
10000114:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
10000116:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000011a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000011e:	2201      	movs	r2, #1
10000120:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000122:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000126:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000012a:	2200      	movs	r2, #0
1000012c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_ON;
1000012e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000132:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000136:	2202      	movs	r2, #2
10000138:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLLSource = RCC_PLL12SOURCE_HSE;
1000013a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000013e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000142:	2201      	movs	r2, #1
10000144:	665a      	str	r2, [r3, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLLM = 3;
10000146:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000014a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000014e:	2203      	movs	r2, #3
10000150:	669a      	str	r2, [r3, #104]	; 0x68
  RCC_OscInitStruct.PLL2.PLLN = 66;
10000152:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000156:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000015a:	2242      	movs	r2, #66	; 0x42
1000015c:	66da      	str	r2, [r3, #108]	; 0x6c
  RCC_OscInitStruct.PLL2.PLLP = 2;
1000015e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000162:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000166:	2202      	movs	r2, #2
10000168:	671a      	str	r2, [r3, #112]	; 0x70
  RCC_OscInitStruct.PLL2.PLLQ = 1;
1000016a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000016e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000172:	2201      	movs	r2, #1
10000174:	675a      	str	r2, [r3, #116]	; 0x74
  RCC_OscInitStruct.PLL2.PLLR = 1;
10000176:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000017a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000017e:	2201      	movs	r2, #1
10000180:	679a      	str	r2, [r3, #120]	; 0x78
  RCC_OscInitStruct.PLL2.PLLFRACV = 0x1400;
10000182:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000186:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000018a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
1000018e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  RCC_OscInitStruct.PLL2.PLLMODE = RCC_PLL_FRACTIONAL;
10000192:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000196:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000019a:	2201      	movs	r2, #1
1000019c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
100001a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001a8:	2202      	movs	r2, #2
100001aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
100001ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001b6:	2201      	movs	r2, #1
100001b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
100001bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001c4:	2202      	movs	r2, #2
100001c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 34;
100001ca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001d2:	2222      	movs	r2, #34	; 0x22
100001d4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 2;
100001d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001dc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001e0:	2202      	movs	r2, #2
100001e2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 17;
100001e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001ee:	2211      	movs	r2, #17
100001f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 37;
100001f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001fc:	2225      	movs	r2, #37	; 0x25
100001fe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
10000202:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000206:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000020a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
1000020e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 6660;
10000212:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000216:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000021a:	f641 2204 	movw	r2, #6660	; 0x1a04
1000021e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
10000222:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000226:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000022a:	2201      	movs	r2, #1
1000022c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
10000230:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000234:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000238:	2200      	movs	r2, #0
1000023a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
1000023e:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000242:	4618      	mov	r0, r3
10000244:	f000 fa2e 	bl	100006a4 <HAL_RCC_OscConfig>
10000248:	4603      	mov	r3, r0
1000024a:	2b00      	cmp	r3, #0
1000024c:	d001      	beq.n	10000252 <SystemClock_Config+0x1a2>
  {
    Error_Handler();
1000024e:	f000 f865 	bl	1000031c <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000252:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000256:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000025a:	22fe      	movs	r2, #254	; 0xfe
1000025c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_PLL2;
1000025e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000262:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000266:	2202      	movs	r2, #2
10000268:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
1000026a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000026e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000272:	2200      	movs	r2, #0
10000274:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10000276:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000027a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000027e:	2203      	movs	r2, #3
10000280:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000282:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000286:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000028a:	2200      	movs	r2, #0
1000028c:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV2;
1000028e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000292:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000296:	2201      	movs	r2, #1
10000298:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV4;
1000029a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000029e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100002a2:	2202      	movs	r2, #2
100002a4:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
100002a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100002ae:	2201      	movs	r2, #1
100002b0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
100002b2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100002ba:	2201      	movs	r2, #1
100002bc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
100002be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100002c6:	2201      	movs	r2, #1
100002c8:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
100002ca:	1d3b      	adds	r3, r7, #4
100002cc:	4618      	mov	r0, r3
100002ce:	f000 ff87 	bl	100011e0 <HAL_RCC_ClockConfig>
100002d2:	4603      	mov	r3, r0
100002d4:	2b00      	cmp	r3, #0
100002d6:	d001      	beq.n	100002dc <SystemClock_Config+0x22c>
  {
    Error_Handler();
100002d8:	f000 f820 	bl	1000031c <Error_Handler>
  }

  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(24);
100002dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100002e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
100002e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
100002e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100002ea:	f043 0317 	orr.w	r3, r3, #23
100002ee:	6453      	str	r3, [r2, #68]	; 0x44
}
100002f0:	bf00      	nop
100002f2:	f507 77a4 	add.w	r7, r7, #328	; 0x148
100002f6:	46bd      	mov	sp, r7
100002f8:	bd80      	pop	{r7, pc}

100002fa <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
100002fa:	b480      	push	{r7}
100002fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
100002fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000302:	2204      	movs	r2, #4
10000304:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
10000308:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000030c:	2280      	movs	r2, #128	; 0x80
1000030e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
10000312:	bf00      	nop
10000314:	46bd      	mov	sp, r7
10000316:	f85d 7b04 	ldr.w	r7, [sp], #4
1000031a:	4770      	bx	lr

1000031c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
1000031c:	b480      	push	{r7}
1000031e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10000320:	b672      	cpsid	i
}
10000322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
10000324:	e7fe      	b.n	10000324 <Error_Handler+0x8>

10000326 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10000326:	b580      	push	{r7, lr}
10000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
1000032a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000032e:	f44f 6200 	mov.w	r2, #2048	; 0x800
10000332:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
10000336:	2200      	movs	r2, #0
10000338:	2101      	movs	r1, #1
1000033a:	f06f 000b 	mvn.w	r0, #11
1000033e:	f000 f978 	bl	10000632 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
10000342:	2200      	movs	r2, #0
10000344:	2101      	movs	r1, #1
10000346:	f06f 000a 	mvn.w	r0, #10
1000034a:	f000 f972 	bl	10000632 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
1000034e:	2200      	movs	r2, #0
10000350:	2101      	movs	r1, #1
10000352:	f06f 0009 	mvn.w	r0, #9
10000356:	f000 f96c 	bl	10000632 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
1000035a:	2200      	movs	r2, #0
1000035c:	2101      	movs	r1, #1
1000035e:	f06f 0004 	mvn.w	r0, #4
10000362:	f000 f966 	bl	10000632 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
10000366:	2200      	movs	r2, #0
10000368:	2101      	movs	r1, #1
1000036a:	f06f 0003 	mvn.w	r0, #3
1000036e:	f000 f960 	bl	10000632 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
10000372:	2200      	movs	r2, #0
10000374:	2101      	movs	r1, #1
10000376:	f06f 0001 	mvn.w	r0, #1
1000037a:	f000 f95a 	bl	10000632 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
1000037e:	bf00      	nop
10000380:	bd80      	pop	{r7, pc}

10000382 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10000382:	b480      	push	{r7}
10000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
10000386:	e7fe      	b.n	10000386 <NMI_Handler+0x4>

10000388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10000388:	b480      	push	{r7}
1000038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1000038c:	e7fe      	b.n	1000038c <HardFault_Handler+0x4>

1000038e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
1000038e:	b480      	push	{r7}
10000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10000392:	e7fe      	b.n	10000392 <MemManage_Handler+0x4>

10000394 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10000394:	b480      	push	{r7}
10000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10000398:	e7fe      	b.n	10000398 <BusFault_Handler+0x4>

1000039a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
1000039a:	b480      	push	{r7}
1000039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
1000039e:	e7fe      	b.n	1000039e <UsageFault_Handler+0x4>

100003a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100003a0:	b480      	push	{r7}
100003a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100003a4:	bf00      	nop
100003a6:	46bd      	mov	sp, r7
100003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
100003ac:	4770      	bx	lr

100003ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
100003ae:	b480      	push	{r7}
100003b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
100003b2:	bf00      	nop
100003b4:	46bd      	mov	sp, r7
100003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
100003ba:	4770      	bx	lr

100003bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
100003bc:	b480      	push	{r7}
100003be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
100003c0:	bf00      	nop
100003c2:	46bd      	mov	sp, r7
100003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
100003c8:	4770      	bx	lr

100003ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
100003ca:	b580      	push	{r7, lr}
100003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
100003ce:	f000 f853 	bl	10000478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100003d2:	bf00      	nop
100003d4:	bd80      	pop	{r7, pc}

100003d6 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
100003d6:	e7fe      	b.n	100003d6 <ADC1_IRQHandler>

100003d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100003d8:	b580      	push	{r7, lr}
100003da:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
100003dc:	2003      	movs	r0, #3
100003de:	f000 f91d 	bl	1000061c <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100003e2:	f001 fada 	bl	1000199a <HAL_RCC_GetSystemCoreClockFreq>
100003e6:	4603      	mov	r3, r0
100003e8:	4a07      	ldr	r2, [pc, #28]	; (10000408 <HAL_Init+0x30>)
100003ea:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100003ec:	2001      	movs	r0, #1
100003ee:	f000 f80d 	bl	1000040c <HAL_InitTick>
100003f2:	4603      	mov	r3, r0
100003f4:	2b00      	cmp	r3, #0
100003f6:	d001      	beq.n	100003fc <HAL_Init+0x24>
  {
    return HAL_ERROR;
100003f8:	2301      	movs	r3, #1
100003fa:	e002      	b.n	10000402 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
100003fc:	f7ff ff93 	bl	10000326 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10000400:	2300      	movs	r3, #0
}
10000402:	4618      	mov	r0, r3
10000404:	bd80      	pop	{r7, pc}
10000406:	bf00      	nop
10000408:	10020000 	.word	0x10020000

1000040c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
1000040c:	b580      	push	{r7, lr}
1000040e:	b082      	sub	sp, #8
10000410:	af00      	add	r7, sp, #0
10000412:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10000414:	4b15      	ldr	r3, [pc, #84]	; (1000046c <HAL_InitTick+0x60>)
10000416:	781b      	ldrb	r3, [r3, #0]
10000418:	2b00      	cmp	r3, #0
1000041a:	d101      	bne.n	10000420 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
1000041c:	2301      	movs	r3, #1
1000041e:	e021      	b.n	10000464 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10000420:	4b13      	ldr	r3, [pc, #76]	; (10000470 <HAL_InitTick+0x64>)
10000422:	681a      	ldr	r2, [r3, #0]
10000424:	4b11      	ldr	r3, [pc, #68]	; (1000046c <HAL_InitTick+0x60>)
10000426:	781b      	ldrb	r3, [r3, #0]
10000428:	4619      	mov	r1, r3
1000042a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1000042e:	fbb3 f3f1 	udiv	r3, r3, r1
10000432:	fbb2 f3f3 	udiv	r3, r2, r3
10000436:	4618      	mov	r0, r3
10000438:	f000 f917 	bl	1000066a <HAL_SYSTICK_Config>
1000043c:	4603      	mov	r3, r0
1000043e:	2b00      	cmp	r3, #0
10000440:	d001      	beq.n	10000446 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10000442:	2301      	movs	r3, #1
10000444:	e00e      	b.n	10000464 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10000446:	687b      	ldr	r3, [r7, #4]
10000448:	2b0f      	cmp	r3, #15
1000044a:	d80a      	bhi.n	10000462 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
1000044c:	2200      	movs	r2, #0
1000044e:	6879      	ldr	r1, [r7, #4]
10000450:	f04f 30ff 	mov.w	r0, #4294967295
10000454:	f000 f8ed 	bl	10000632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10000458:	4a06      	ldr	r2, [pc, #24]	; (10000474 <HAL_InitTick+0x68>)
1000045a:	687b      	ldr	r3, [r7, #4]
1000045c:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
1000045e:	2300      	movs	r3, #0
10000460:	e000      	b.n	10000464 <HAL_InitTick+0x58>
    return HAL_ERROR;
10000462:	2301      	movs	r3, #1
}
10000464:	4618      	mov	r0, r3
10000466:	3708      	adds	r7, #8
10000468:	46bd      	mov	sp, r7
1000046a:	bd80      	pop	{r7, pc}
1000046c:	10020008 	.word	0x10020008
10000470:	10020000 	.word	0x10020000
10000474:	10020004 	.word	0x10020004

10000478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10000478:	b480      	push	{r7}
1000047a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
1000047c:	4b06      	ldr	r3, [pc, #24]	; (10000498 <HAL_IncTick+0x20>)
1000047e:	781b      	ldrb	r3, [r3, #0]
10000480:	461a      	mov	r2, r3
10000482:	4b06      	ldr	r3, [pc, #24]	; (1000049c <HAL_IncTick+0x24>)
10000484:	681b      	ldr	r3, [r3, #0]
10000486:	4413      	add	r3, r2
10000488:	4a04      	ldr	r2, [pc, #16]	; (1000049c <HAL_IncTick+0x24>)
1000048a:	6013      	str	r3, [r2, #0]
}
1000048c:	bf00      	nop
1000048e:	46bd      	mov	sp, r7
10000490:	f85d 7b04 	ldr.w	r7, [sp], #4
10000494:	4770      	bx	lr
10000496:	bf00      	nop
10000498:	10020008 	.word	0x10020008
1000049c:	10020028 	.word	0x10020028

100004a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100004a0:	b480      	push	{r7}
100004a2:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
100004a4:	4b03      	ldr	r3, [pc, #12]	; (100004b4 <HAL_GetTick+0x14>)
100004a6:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
100004a8:	4618      	mov	r0, r3
100004aa:	46bd      	mov	sp, r7
100004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
100004b0:	4770      	bx	lr
100004b2:	bf00      	nop
100004b4:	10020028 	.word	0x10020028

100004b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
100004b8:	b480      	push	{r7}
100004ba:	b085      	sub	sp, #20
100004bc:	af00      	add	r7, sp, #0
100004be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
100004c0:	687b      	ldr	r3, [r7, #4]
100004c2:	f003 0307 	and.w	r3, r3, #7
100004c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
100004c8:	4b0c      	ldr	r3, [pc, #48]	; (100004fc <__NVIC_SetPriorityGrouping+0x44>)
100004ca:	68db      	ldr	r3, [r3, #12]
100004cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
100004ce:	68ba      	ldr	r2, [r7, #8]
100004d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
100004d4:	4013      	ands	r3, r2
100004d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
100004d8:	68fb      	ldr	r3, [r7, #12]
100004da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100004dc:	68bb      	ldr	r3, [r7, #8]
100004de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
100004e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
100004e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
100004e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
100004ea:	4a04      	ldr	r2, [pc, #16]	; (100004fc <__NVIC_SetPriorityGrouping+0x44>)
100004ec:	68bb      	ldr	r3, [r7, #8]
100004ee:	60d3      	str	r3, [r2, #12]
}
100004f0:	bf00      	nop
100004f2:	3714      	adds	r7, #20
100004f4:	46bd      	mov	sp, r7
100004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
100004fa:	4770      	bx	lr
100004fc:	e000ed00 	.word	0xe000ed00

10000500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10000500:	b480      	push	{r7}
10000502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10000504:	4b04      	ldr	r3, [pc, #16]	; (10000518 <__NVIC_GetPriorityGrouping+0x18>)
10000506:	68db      	ldr	r3, [r3, #12]
10000508:	0a1b      	lsrs	r3, r3, #8
1000050a:	f003 0307 	and.w	r3, r3, #7
}
1000050e:	4618      	mov	r0, r3
10000510:	46bd      	mov	sp, r7
10000512:	f85d 7b04 	ldr.w	r7, [sp], #4
10000516:	4770      	bx	lr
10000518:	e000ed00 	.word	0xe000ed00

1000051c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1000051c:	b480      	push	{r7}
1000051e:	b083      	sub	sp, #12
10000520:	af00      	add	r7, sp, #0
10000522:	4603      	mov	r3, r0
10000524:	6039      	str	r1, [r7, #0]
10000526:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000052c:	2b00      	cmp	r3, #0
1000052e:	db0a      	blt.n	10000546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000530:	683b      	ldr	r3, [r7, #0]
10000532:	b2da      	uxtb	r2, r3
10000534:	490c      	ldr	r1, [pc, #48]	; (10000568 <__NVIC_SetPriority+0x4c>)
10000536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000053a:	0112      	lsls	r2, r2, #4
1000053c:	b2d2      	uxtb	r2, r2
1000053e:	440b      	add	r3, r1
10000540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10000544:	e00a      	b.n	1000055c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000546:	683b      	ldr	r3, [r7, #0]
10000548:	b2da      	uxtb	r2, r3
1000054a:	4908      	ldr	r1, [pc, #32]	; (1000056c <__NVIC_SetPriority+0x50>)
1000054c:	88fb      	ldrh	r3, [r7, #6]
1000054e:	f003 030f 	and.w	r3, r3, #15
10000552:	3b04      	subs	r3, #4
10000554:	0112      	lsls	r2, r2, #4
10000556:	b2d2      	uxtb	r2, r2
10000558:	440b      	add	r3, r1
1000055a:	761a      	strb	r2, [r3, #24]
}
1000055c:	bf00      	nop
1000055e:	370c      	adds	r7, #12
10000560:	46bd      	mov	sp, r7
10000562:	f85d 7b04 	ldr.w	r7, [sp], #4
10000566:	4770      	bx	lr
10000568:	e000e100 	.word	0xe000e100
1000056c:	e000ed00 	.word	0xe000ed00

10000570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000570:	b480      	push	{r7}
10000572:	b089      	sub	sp, #36	; 0x24
10000574:	af00      	add	r7, sp, #0
10000576:	60f8      	str	r0, [r7, #12]
10000578:	60b9      	str	r1, [r7, #8]
1000057a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
1000057c:	68fb      	ldr	r3, [r7, #12]
1000057e:	f003 0307 	and.w	r3, r3, #7
10000582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10000584:	69fb      	ldr	r3, [r7, #28]
10000586:	f1c3 0307 	rsb	r3, r3, #7
1000058a:	2b04      	cmp	r3, #4
1000058c:	bf28      	it	cs
1000058e:	2304      	movcs	r3, #4
10000590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10000592:	69fb      	ldr	r3, [r7, #28]
10000594:	3304      	adds	r3, #4
10000596:	2b06      	cmp	r3, #6
10000598:	d902      	bls.n	100005a0 <NVIC_EncodePriority+0x30>
1000059a:	69fb      	ldr	r3, [r7, #28]
1000059c:	3b03      	subs	r3, #3
1000059e:	e000      	b.n	100005a2 <NVIC_EncodePriority+0x32>
100005a0:	2300      	movs	r3, #0
100005a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100005a4:	f04f 32ff 	mov.w	r2, #4294967295
100005a8:	69bb      	ldr	r3, [r7, #24]
100005aa:	fa02 f303 	lsl.w	r3, r2, r3
100005ae:	43da      	mvns	r2, r3
100005b0:	68bb      	ldr	r3, [r7, #8]
100005b2:	401a      	ands	r2, r3
100005b4:	697b      	ldr	r3, [r7, #20]
100005b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
100005b8:	f04f 31ff 	mov.w	r1, #4294967295
100005bc:	697b      	ldr	r3, [r7, #20]
100005be:	fa01 f303 	lsl.w	r3, r1, r3
100005c2:	43d9      	mvns	r1, r3
100005c4:	687b      	ldr	r3, [r7, #4]
100005c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100005c8:	4313      	orrs	r3, r2
         );
}
100005ca:	4618      	mov	r0, r3
100005cc:	3724      	adds	r7, #36	; 0x24
100005ce:	46bd      	mov	sp, r7
100005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
100005d4:	4770      	bx	lr
	...

100005d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100005d8:	b580      	push	{r7, lr}
100005da:	b082      	sub	sp, #8
100005dc:	af00      	add	r7, sp, #0
100005de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100005e0:	687b      	ldr	r3, [r7, #4]
100005e2:	3b01      	subs	r3, #1
100005e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
100005e8:	d301      	bcc.n	100005ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
100005ea:	2301      	movs	r3, #1
100005ec:	e00f      	b.n	1000060e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100005ee:	4a0a      	ldr	r2, [pc, #40]	; (10000618 <SysTick_Config+0x40>)
100005f0:	687b      	ldr	r3, [r7, #4]
100005f2:	3b01      	subs	r3, #1
100005f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100005f6:	210f      	movs	r1, #15
100005f8:	f04f 30ff 	mov.w	r0, #4294967295
100005fc:	f7ff ff8e 	bl	1000051c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10000600:	4b05      	ldr	r3, [pc, #20]	; (10000618 <SysTick_Config+0x40>)
10000602:	2200      	movs	r2, #0
10000604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10000606:	4b04      	ldr	r3, [pc, #16]	; (10000618 <SysTick_Config+0x40>)
10000608:	2207      	movs	r2, #7
1000060a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
1000060c:	2300      	movs	r3, #0
}
1000060e:	4618      	mov	r0, r3
10000610:	3708      	adds	r7, #8
10000612:	46bd      	mov	sp, r7
10000614:	bd80      	pop	{r7, pc}
10000616:	bf00      	nop
10000618:	e000e010 	.word	0xe000e010

1000061c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
1000061c:	b580      	push	{r7, lr}
1000061e:	b082      	sub	sp, #8
10000620:	af00      	add	r7, sp, #0
10000622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10000624:	6878      	ldr	r0, [r7, #4]
10000626:	f7ff ff47 	bl	100004b8 <__NVIC_SetPriorityGrouping>
}
1000062a:	bf00      	nop
1000062c:	3708      	adds	r7, #8
1000062e:	46bd      	mov	sp, r7
10000630:	bd80      	pop	{r7, pc}

10000632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000632:	b580      	push	{r7, lr}
10000634:	b086      	sub	sp, #24
10000636:	af00      	add	r7, sp, #0
10000638:	4603      	mov	r3, r0
1000063a:	60b9      	str	r1, [r7, #8]
1000063c:	607a      	str	r2, [r7, #4]
1000063e:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10000640:	2300      	movs	r3, #0
10000642:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10000644:	f7ff ff5c 	bl	10000500 <__NVIC_GetPriorityGrouping>
10000648:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
1000064a:	687a      	ldr	r2, [r7, #4]
1000064c:	68b9      	ldr	r1, [r7, #8]
1000064e:	6978      	ldr	r0, [r7, #20]
10000650:	f7ff ff8e 	bl	10000570 <NVIC_EncodePriority>
10000654:	4602      	mov	r2, r0
10000656:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
1000065a:	4611      	mov	r1, r2
1000065c:	4618      	mov	r0, r3
1000065e:	f7ff ff5d 	bl	1000051c <__NVIC_SetPriority>
}
10000662:	bf00      	nop
10000664:	3718      	adds	r7, #24
10000666:	46bd      	mov	sp, r7
10000668:	bd80      	pop	{r7, pc}

1000066a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1000066a:	b580      	push	{r7, lr}
1000066c:	b082      	sub	sp, #8
1000066e:	af00      	add	r7, sp, #0
10000670:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10000672:	6878      	ldr	r0, [r7, #4]
10000674:	f7ff ffb0 	bl	100005d8 <SysTick_Config>
10000678:	4603      	mov	r3, r0
}
1000067a:	4618      	mov	r0, r3
1000067c:	3708      	adds	r7, #8
1000067e:	46bd      	mov	sp, r7
10000680:	bd80      	pop	{r7, pc}
	...

10000684 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
10000684:	b480      	push	{r7}
10000686:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
10000688:	4b05      	ldr	r3, [pc, #20]	; (100006a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
1000068a:	681b      	ldr	r3, [r3, #0]
1000068c:	4a04      	ldr	r2, [pc, #16]	; (100006a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
1000068e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10000692:	6013      	str	r3, [r2, #0]
}
10000694:	bf00      	nop
10000696:	46bd      	mov	sp, r7
10000698:	f85d 7b04 	ldr.w	r7, [sp], #4
1000069c:	4770      	bx	lr
1000069e:	bf00      	nop
100006a0:	50001000 	.word	0x50001000

100006a4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
100006a4:	b580      	push	{r7, lr}
100006a6:	b084      	sub	sp, #16
100006a8:	af00      	add	r7, sp, #0
100006aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
100006ac:	2300      	movs	r3, #0
100006ae:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
100006b0:	687b      	ldr	r3, [r7, #4]
100006b2:	2b00      	cmp	r3, #0
100006b4:	d101      	bne.n	100006ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
100006b6:	2301      	movs	r3, #1
100006b8:	e320      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
100006ba:	687b      	ldr	r3, [r7, #4]
100006bc:	681b      	ldr	r3, [r3, #0]
100006be:	f003 0301 	and.w	r3, r3, #1
100006c2:	2b00      	cmp	r3, #0
100006c4:	f000 8081 	beq.w	100007ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
100006c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100006cc:	6a1b      	ldr	r3, [r3, #32]
100006ce:	f003 0303 	and.w	r3, r3, #3
100006d2:	2b01      	cmp	r3, #1
100006d4:	d107      	bne.n	100006e6 <HAL_RCC_OscConfig+0x42>
100006d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100006da:	6a1b      	ldr	r3, [r3, #32]
100006dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100006e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100006e4:	d054      	beq.n	10000790 <HAL_RCC_OscConfig+0xec>
100006e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100006ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100006ec:	f003 0307 	and.w	r3, r3, #7
100006f0:	2b01      	cmp	r3, #1
100006f2:	d107      	bne.n	10000704 <HAL_RCC_OscConfig+0x60>
100006f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100006f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100006fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100006fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000702:	d045      	beq.n	10000790 <HAL_RCC_OscConfig+0xec>
10000704:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000070a:	f003 0303 	and.w	r3, r3, #3
1000070e:	2b01      	cmp	r3, #1
10000710:	d107      	bne.n	10000722 <HAL_RCC_OscConfig+0x7e>
10000712:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000718:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000071c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000720:	d036      	beq.n	10000790 <HAL_RCC_OscConfig+0xec>
10000722:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000728:	f003 0303 	and.w	r3, r3, #3
1000072c:	2b01      	cmp	r3, #1
1000072e:	d10f      	bne.n	10000750 <HAL_RCC_OscConfig+0xac>
10000730:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000738:	f003 0302 	and.w	r3, r3, #2
1000073c:	2b02      	cmp	r3, #2
1000073e:	d027      	beq.n	10000790 <HAL_RCC_OscConfig+0xec>
10000740:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000748:	f003 0302 	and.w	r3, r3, #2
1000074c:	2b02      	cmp	r3, #2
1000074e:	d01f      	beq.n	10000790 <HAL_RCC_OscConfig+0xec>
10000750:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000754:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000758:	f003 0303 	and.w	r3, r3, #3
1000075c:	2b01      	cmp	r3, #1
1000075e:	d107      	bne.n	10000770 <HAL_RCC_OscConfig+0xcc>
10000760:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000764:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000768:	f003 0302 	and.w	r3, r3, #2
1000076c:	2b02      	cmp	r3, #2
1000076e:	d00f      	beq.n	10000790 <HAL_RCC_OscConfig+0xec>
10000770:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000774:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000778:	f003 0303 	and.w	r3, r3, #3
1000077c:	2b01      	cmp	r3, #1
1000077e:	d117      	bne.n	100007b0 <HAL_RCC_OscConfig+0x10c>
10000780:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000784:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000788:	f003 0302 	and.w	r3, r3, #2
1000078c:	2b02      	cmp	r3, #2
1000078e:	d10f      	bne.n	100007b0 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000790:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000794:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000798:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000079c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100007a0:	d112      	bne.n	100007c8 <HAL_RCC_OscConfig+0x124>
100007a2:	687b      	ldr	r3, [r7, #4]
100007a4:	685b      	ldr	r3, [r3, #4]
100007a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100007aa:	d00d      	beq.n	100007c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
100007ac:	2301      	movs	r3, #1
100007ae:	e2a5      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
100007b0:	687b      	ldr	r3, [r7, #4]
100007b2:	685b      	ldr	r3, [r3, #4]
100007b4:	4618      	mov	r0, r3
100007b6:	f000 faa7 	bl	10000d08 <HAL_RCC_HSEConfig>
100007ba:	4603      	mov	r3, r0
100007bc:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
100007be:	7bfb      	ldrb	r3, [r7, #15]
100007c0:	2b00      	cmp	r3, #0
100007c2:	d002      	beq.n	100007ca <HAL_RCC_OscConfig+0x126>
      {
        return result;
100007c4:	7bfb      	ldrb	r3, [r7, #15]
100007c6:	e299      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
100007c8:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
100007ca:	687b      	ldr	r3, [r7, #4]
100007cc:	681b      	ldr	r3, [r3, #0]
100007ce:	f003 0302 	and.w	r3, r3, #2
100007d2:	2b00      	cmp	r3, #0
100007d4:	f000 814e 	beq.w	10000a74 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
100007d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007dc:	6a1b      	ldr	r3, [r3, #32]
100007de:	f003 0303 	and.w	r3, r3, #3
100007e2:	2b00      	cmp	r3, #0
100007e4:	d107      	bne.n	100007f6 <HAL_RCC_OscConfig+0x152>
100007e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007ea:	6a1b      	ldr	r3, [r3, #32]
100007ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100007f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100007f4:	d055      	beq.n	100008a2 <HAL_RCC_OscConfig+0x1fe>
100007f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100007fc:	f003 0307 	and.w	r3, r3, #7
10000800:	2b00      	cmp	r3, #0
10000802:	d107      	bne.n	10000814 <HAL_RCC_OscConfig+0x170>
10000804:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000080a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000080e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000812:	d046      	beq.n	100008a2 <HAL_RCC_OscConfig+0x1fe>
10000814:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000081a:	f003 0303 	and.w	r3, r3, #3
1000081e:	2b00      	cmp	r3, #0
10000820:	d107      	bne.n	10000832 <HAL_RCC_OscConfig+0x18e>
10000822:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000082c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000830:	d037      	beq.n	100008a2 <HAL_RCC_OscConfig+0x1fe>
10000832:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000838:	f003 0303 	and.w	r3, r3, #3
1000083c:	2b00      	cmp	r3, #0
1000083e:	d10f      	bne.n	10000860 <HAL_RCC_OscConfig+0x1bc>
10000840:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000848:	f003 0302 	and.w	r3, r3, #2
1000084c:	2b02      	cmp	r3, #2
1000084e:	d028      	beq.n	100008a2 <HAL_RCC_OscConfig+0x1fe>
10000850:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000858:	f003 0302 	and.w	r3, r3, #2
1000085c:	2b02      	cmp	r3, #2
1000085e:	d020      	beq.n	100008a2 <HAL_RCC_OscConfig+0x1fe>
10000860:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000864:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000868:	f003 0303 	and.w	r3, r3, #3
1000086c:	2b00      	cmp	r3, #0
1000086e:	d107      	bne.n	10000880 <HAL_RCC_OscConfig+0x1dc>
10000870:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000874:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000878:	f003 0302 	and.w	r3, r3, #2
1000087c:	2b02      	cmp	r3, #2
1000087e:	d010      	beq.n	100008a2 <HAL_RCC_OscConfig+0x1fe>
10000880:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000884:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000888:	f003 0303 	and.w	r3, r3, #3
1000088c:	2b00      	cmp	r3, #0
1000088e:	f040 8088 	bne.w	100009a2 <HAL_RCC_OscConfig+0x2fe>
10000892:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000896:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000089a:	f003 0302 	and.w	r3, r3, #2
1000089e:	2b02      	cmp	r3, #2
100008a0:	d17f      	bne.n	100009a2 <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
100008a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100008a6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100008aa:	f003 0301 	and.w	r3, r3, #1
100008ae:	2b01      	cmp	r3, #1
100008b0:	d105      	bne.n	100008be <HAL_RCC_OscConfig+0x21a>
100008b2:	687b      	ldr	r3, [r7, #4]
100008b4:	68db      	ldr	r3, [r3, #12]
100008b6:	2b01      	cmp	r3, #1
100008b8:	d001      	beq.n	100008be <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
100008ba:	2301      	movs	r3, #1
100008bc:	e21e      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
100008be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100008c2:	699b      	ldr	r3, [r3, #24]
100008c4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
100008c8:	687b      	ldr	r3, [r7, #4]
100008ca:	691b      	ldr	r3, [r3, #16]
100008cc:	021b      	lsls	r3, r3, #8
100008ce:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100008d2:	4313      	orrs	r3, r2
100008d4:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100008d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100008da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100008dc:	f003 0303 	and.w	r3, r3, #3
100008e0:	2b00      	cmp	r3, #0
100008e2:	d10f      	bne.n	10000904 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
100008e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100008e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100008ec:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
100008f0:	2b02      	cmp	r3, #2
100008f2:	d047      	beq.n	10000984 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
100008f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100008f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100008fc:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000900:	2b02      	cmp	r3, #2
10000902:	d03f      	beq.n	10000984 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000904:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000908:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000090c:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000910:	2b00      	cmp	r3, #0
10000912:	d107      	bne.n	10000924 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000914:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000918:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000091c:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000920:	2b02      	cmp	r3, #2
10000922:	d02f      	beq.n	10000984 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000924:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000928:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000092c:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000930:	2b00      	cmp	r3, #0
10000932:	d107      	bne.n	10000944 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10000934:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000938:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000093c:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000940:	2b02      	cmp	r3, #2
10000942:	d01f      	beq.n	10000984 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000944:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000948:	699b      	ldr	r3, [r3, #24]
1000094a:	f023 0203 	bic.w	r2, r3, #3
1000094e:	687b      	ldr	r3, [r7, #4]
10000950:	695b      	ldr	r3, [r3, #20]
10000952:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000956:	4313      	orrs	r3, r2
10000958:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
1000095a:	f7ff fda1 	bl	100004a0 <HAL_GetTick>
1000095e:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000960:	e008      	b.n	10000974 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000962:	f7ff fd9d 	bl	100004a0 <HAL_GetTick>
10000966:	4602      	mov	r2, r0
10000968:	68bb      	ldr	r3, [r7, #8]
1000096a:	1ad3      	subs	r3, r2, r3
1000096c:	2b64      	cmp	r3, #100	; 0x64
1000096e:	d901      	bls.n	10000974 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10000970:	2303      	movs	r3, #3
10000972:	e1c3      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000974:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000978:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000097c:	f003 0304 	and.w	r3, r3, #4
10000980:	2b04      	cmp	r3, #4
10000982:	d1ee      	bne.n	10000962 <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10000984:	f001 f809 	bl	1000199a <HAL_RCC_GetSystemCoreClockFreq>
10000988:	4603      	mov	r3, r0
1000098a:	4ab3      	ldr	r2, [pc, #716]	; (10000c58 <HAL_RCC_OscConfig+0x5b4>)
1000098c:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
1000098e:	4bb3      	ldr	r3, [pc, #716]	; (10000c5c <HAL_RCC_OscConfig+0x5b8>)
10000990:	681b      	ldr	r3, [r3, #0]
10000992:	4618      	mov	r0, r3
10000994:	f7ff fd3a 	bl	1000040c <HAL_InitTick>
10000998:	4603      	mov	r3, r0
1000099a:	2b00      	cmp	r3, #0
1000099c:	d069      	beq.n	10000a72 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
1000099e:	2301      	movs	r3, #1
100009a0:	e1ac      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
100009a2:	687b      	ldr	r3, [r7, #4]
100009a4:	68db      	ldr	r3, [r3, #12]
100009a6:	2b00      	cmp	r3, #0
100009a8:	d049      	beq.n	10000a3e <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
100009aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100009ae:	68db      	ldr	r3, [r3, #12]
100009b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100009b4:	f043 0301 	orr.w	r3, r3, #1
100009b8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100009ba:	f7ff fd71 	bl	100004a0 <HAL_GetTick>
100009be:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100009c0:	e008      	b.n	100009d4 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
100009c2:	f7ff fd6d 	bl	100004a0 <HAL_GetTick>
100009c6:	4602      	mov	r2, r0
100009c8:	68bb      	ldr	r3, [r7, #8]
100009ca:	1ad3      	subs	r3, r2, r3
100009cc:	2b64      	cmp	r3, #100	; 0x64
100009ce:	d901      	bls.n	100009d4 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
100009d0:	2303      	movs	r3, #3
100009d2:	e193      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100009d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100009d8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100009dc:	f003 0301 	and.w	r3, r3, #1
100009e0:	2b01      	cmp	r3, #1
100009e2:	d1ee      	bne.n	100009c2 <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
100009e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100009e8:	699b      	ldr	r3, [r3, #24]
100009ea:	f023 0203 	bic.w	r2, r3, #3
100009ee:	687b      	ldr	r3, [r7, #4]
100009f0:	695b      	ldr	r3, [r3, #20]
100009f2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100009f6:	4313      	orrs	r3, r2
100009f8:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100009fa:	f7ff fd51 	bl	100004a0 <HAL_GetTick>
100009fe:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000a00:	e008      	b.n	10000a14 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000a02:	f7ff fd4d 	bl	100004a0 <HAL_GetTick>
10000a06:	4602      	mov	r2, r0
10000a08:	68bb      	ldr	r3, [r7, #8]
10000a0a:	1ad3      	subs	r3, r2, r3
10000a0c:	2b64      	cmp	r3, #100	; 0x64
10000a0e:	d901      	bls.n	10000a14 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10000a10:	2303      	movs	r3, #3
10000a12:	e173      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000a14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a18:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000a1c:	f003 0304 	and.w	r3, r3, #4
10000a20:	2b04      	cmp	r3, #4
10000a22:	d1ee      	bne.n	10000a02 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000a24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a28:	699b      	ldr	r3, [r3, #24]
10000a2a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10000a2e:	687b      	ldr	r3, [r7, #4]
10000a30:	691b      	ldr	r3, [r3, #16]
10000a32:	021b      	lsls	r3, r3, #8
10000a34:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000a38:	4313      	orrs	r3, r2
10000a3a:	618b      	str	r3, [r1, #24]
10000a3c:	e01a      	b.n	10000a74 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10000a3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a42:	2201      	movs	r2, #1
10000a44:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000a46:	f7ff fd2b 	bl	100004a0 <HAL_GetTick>
10000a4a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000a4c:	e008      	b.n	10000a60 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000a4e:	f7ff fd27 	bl	100004a0 <HAL_GetTick>
10000a52:	4602      	mov	r2, r0
10000a54:	68bb      	ldr	r3, [r7, #8]
10000a56:	1ad3      	subs	r3, r2, r3
10000a58:	2b64      	cmp	r3, #100	; 0x64
10000a5a:	d901      	bls.n	10000a60 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10000a5c:	2303      	movs	r3, #3
10000a5e:	e14d      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000a60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a64:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000a68:	f003 0301 	and.w	r3, r3, #1
10000a6c:	2b01      	cmp	r3, #1
10000a6e:	d0ee      	beq.n	10000a4e <HAL_RCC_OscConfig+0x3aa>
10000a70:	e000      	b.n	10000a74 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000a72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10000a74:	687b      	ldr	r3, [r7, #4]
10000a76:	681b      	ldr	r3, [r3, #0]
10000a78:	f003 0310 	and.w	r3, r3, #16
10000a7c:	2b00      	cmp	r3, #0
10000a7e:	f000 8091 	beq.w	10000ba4 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10000a82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a86:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000a8a:	f003 0303 	and.w	r3, r3, #3
10000a8e:	2b02      	cmp	r3, #2
10000a90:	d107      	bne.n	10000aa2 <HAL_RCC_OscConfig+0x3fe>
10000a92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000a96:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000a9a:	f003 0302 	and.w	r3, r3, #2
10000a9e:	2b02      	cmp	r3, #2
10000aa0:	d01e      	beq.n	10000ae0 <HAL_RCC_OscConfig+0x43c>
10000aa2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000aa8:	f003 0303 	and.w	r3, r3, #3
10000aac:	2b02      	cmp	r3, #2
10000aae:	d107      	bne.n	10000ac0 <HAL_RCC_OscConfig+0x41c>
10000ab0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000abe:	d00f      	beq.n	10000ae0 <HAL_RCC_OscConfig+0x43c>
10000ac0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ac4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000ac8:	f003 0303 	and.w	r3, r3, #3
10000acc:	2b02      	cmp	r3, #2
10000ace:	d122      	bne.n	10000b16 <HAL_RCC_OscConfig+0x472>
10000ad0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ad4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000ad8:	f003 0302 	and.w	r3, r3, #2
10000adc:	2b02      	cmp	r3, #2
10000ade:	d11a      	bne.n	10000b16 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000ae0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ae4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000ae8:	f003 0310 	and.w	r3, r3, #16
10000aec:	2b10      	cmp	r3, #16
10000aee:	d105      	bne.n	10000afc <HAL_RCC_OscConfig+0x458>
10000af0:	687b      	ldr	r3, [r7, #4]
10000af2:	69db      	ldr	r3, [r3, #28]
10000af4:	2b10      	cmp	r3, #16
10000af6:	d001      	beq.n	10000afc <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10000af8:	2301      	movs	r3, #1
10000afa:	e0ff      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000afc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b00:	69db      	ldr	r3, [r3, #28]
10000b02:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10000b06:	687b      	ldr	r3, [r7, #4]
10000b08:	6a1b      	ldr	r3, [r3, #32]
10000b0a:	021b      	lsls	r3, r3, #8
10000b0c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000b10:	4313      	orrs	r3, r2
10000b12:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000b14:	e046      	b.n	10000ba4 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10000b16:	687b      	ldr	r3, [r7, #4]
10000b18:	69db      	ldr	r3, [r3, #28]
10000b1a:	2b00      	cmp	r3, #0
10000b1c:	d029      	beq.n	10000b72 <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10000b1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b22:	68db      	ldr	r3, [r3, #12]
10000b24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000b28:	f043 0310 	orr.w	r3, r3, #16
10000b2c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000b2e:	f7ff fcb7 	bl	100004a0 <HAL_GetTick>
10000b32:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000b34:	e008      	b.n	10000b48 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000b36:	f7ff fcb3 	bl	100004a0 <HAL_GetTick>
10000b3a:	4602      	mov	r2, r0
10000b3c:	68bb      	ldr	r3, [r7, #8]
10000b3e:	1ad3      	subs	r3, r2, r3
10000b40:	2b64      	cmp	r3, #100	; 0x64
10000b42:	d901      	bls.n	10000b48 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10000b44:	2303      	movs	r3, #3
10000b46:	e0d9      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000b48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b4c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000b50:	f003 0310 	and.w	r3, r3, #16
10000b54:	2b10      	cmp	r3, #16
10000b56:	d1ee      	bne.n	10000b36 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000b58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b5c:	69db      	ldr	r3, [r3, #28]
10000b5e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10000b62:	687b      	ldr	r3, [r7, #4]
10000b64:	6a1b      	ldr	r3, [r3, #32]
10000b66:	021b      	lsls	r3, r3, #8
10000b68:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000b6c:	4313      	orrs	r3, r2
10000b6e:	61cb      	str	r3, [r1, #28]
10000b70:	e018      	b.n	10000ba4 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10000b72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b76:	2210      	movs	r2, #16
10000b78:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000b7a:	f7ff fc91 	bl	100004a0 <HAL_GetTick>
10000b7e:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000b80:	e008      	b.n	10000b94 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000b82:	f7ff fc8d 	bl	100004a0 <HAL_GetTick>
10000b86:	4602      	mov	r2, r0
10000b88:	68bb      	ldr	r3, [r7, #8]
10000b8a:	1ad3      	subs	r3, r2, r3
10000b8c:	2b64      	cmp	r3, #100	; 0x64
10000b8e:	d901      	bls.n	10000b94 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
10000b90:	2303      	movs	r3, #3
10000b92:	e0b3      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10000b94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b98:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000b9c:	f003 0310 	and.w	r3, r3, #16
10000ba0:	2b10      	cmp	r3, #16
10000ba2:	d0ee      	beq.n	10000b82 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10000ba4:	687b      	ldr	r3, [r7, #4]
10000ba6:	681b      	ldr	r3, [r3, #0]
10000ba8:	f003 0308 	and.w	r3, r3, #8
10000bac:	2b00      	cmp	r3, #0
10000bae:	d042      	beq.n	10000c36 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
10000bb0:	687b      	ldr	r3, [r7, #4]
10000bb2:	699b      	ldr	r3, [r3, #24]
10000bb4:	2b00      	cmp	r3, #0
10000bb6:	d01f      	beq.n	10000bf8 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10000bb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bbc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000bc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000bc4:	f043 0301 	orr.w	r3, r3, #1
10000bc8:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10000bcc:	f7ff fc68 	bl	100004a0 <HAL_GetTick>
10000bd0:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10000bd2:	e008      	b.n	10000be6 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10000bd4:	f7ff fc64 	bl	100004a0 <HAL_GetTick>
10000bd8:	4602      	mov	r2, r0
10000bda:	68bb      	ldr	r3, [r7, #8]
10000bdc:	1ad3      	subs	r3, r2, r3
10000bde:	2b64      	cmp	r3, #100	; 0x64
10000be0:	d901      	bls.n	10000be6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10000be2:	2303      	movs	r3, #3
10000be4:	e08a      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10000be6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bea:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000bee:	f003 0302 	and.w	r3, r3, #2
10000bf2:	2b02      	cmp	r3, #2
10000bf4:	d1ee      	bne.n	10000bd4 <HAL_RCC_OscConfig+0x530>
10000bf6:	e01e      	b.n	10000c36 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10000bf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bfc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000c00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000c04:	f023 0301 	bic.w	r3, r3, #1
10000c08:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10000c0c:	f7ff fc48 	bl	100004a0 <HAL_GetTick>
10000c10:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10000c12:	e008      	b.n	10000c26 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10000c14:	f7ff fc44 	bl	100004a0 <HAL_GetTick>
10000c18:	4602      	mov	r2, r0
10000c1a:	68bb      	ldr	r3, [r7, #8]
10000c1c:	1ad3      	subs	r3, r2, r3
10000c1e:	2b64      	cmp	r3, #100	; 0x64
10000c20:	d901      	bls.n	10000c26 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10000c22:	2303      	movs	r3, #3
10000c24:	e06a      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10000c26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c2a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10000c2e:	f003 0302 	and.w	r3, r3, #2
10000c32:	2b02      	cmp	r3, #2
10000c34:	d0ee      	beq.n	10000c14 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10000c36:	687b      	ldr	r3, [r7, #4]
10000c38:	681b      	ldr	r3, [r3, #0]
10000c3a:	f003 0304 	and.w	r3, r3, #4
10000c3e:	2b00      	cmp	r3, #0
10000c40:	d02b      	beq.n	10000c9a <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10000c42:	4b07      	ldr	r3, [pc, #28]	; (10000c60 <HAL_RCC_OscConfig+0x5bc>)
10000c44:	681b      	ldr	r3, [r3, #0]
10000c46:	4a06      	ldr	r2, [pc, #24]	; (10000c60 <HAL_RCC_OscConfig+0x5bc>)
10000c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10000c4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
10000c4e:	f7ff fc27 	bl	100004a0 <HAL_GetTick>
10000c52:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10000c54:	e00f      	b.n	10000c76 <HAL_RCC_OscConfig+0x5d2>
10000c56:	bf00      	nop
10000c58:	10020000 	.word	0x10020000
10000c5c:	10020004 	.word	0x10020004
10000c60:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10000c64:	f7ff fc1c 	bl	100004a0 <HAL_GetTick>
10000c68:	4602      	mov	r2, r0
10000c6a:	68bb      	ldr	r3, [r7, #8]
10000c6c:	1ad3      	subs	r3, r2, r3
10000c6e:	2b64      	cmp	r3, #100	; 0x64
10000c70:	d901      	bls.n	10000c76 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10000c72:	2303      	movs	r3, #3
10000c74:	e042      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10000c76:	4b23      	ldr	r3, [pc, #140]	; (10000d04 <HAL_RCC_OscConfig+0x660>)
10000c78:	681b      	ldr	r3, [r3, #0]
10000c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000c7e:	2b00      	cmp	r3, #0
10000c80:	d0f0      	beq.n	10000c64 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10000c82:	687b      	ldr	r3, [r7, #4]
10000c84:	689b      	ldr	r3, [r3, #8]
10000c86:	4618      	mov	r0, r3
10000c88:	f000 f8a9 	bl	10000dde <HAL_RCC_LSEConfig>
10000c8c:	4603      	mov	r3, r0
10000c8e:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
10000c90:	7bfb      	ldrb	r3, [r7, #15]
10000c92:	2b00      	cmp	r3, #0
10000c94:	d001      	beq.n	10000c9a <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10000c96:	7bfb      	ldrb	r3, [r7, #15]
10000c98:	e030      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10000c9a:	687b      	ldr	r3, [r7, #4]
10000c9c:	3324      	adds	r3, #36	; 0x24
10000c9e:	4618      	mov	r0, r3
10000ca0:	f000 f91a 	bl	10000ed8 <RCC_PLL1_Config>
10000ca4:	4603      	mov	r3, r0
10000ca6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10000ca8:	7bfb      	ldrb	r3, [r7, #15]
10000caa:	2b00      	cmp	r3, #0
10000cac:	d001      	beq.n	10000cb2 <HAL_RCC_OscConfig+0x60e>
  {
    return result;
10000cae:	7bfb      	ldrb	r3, [r7, #15]
10000cb0:	e024      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
10000cb2:	687b      	ldr	r3, [r7, #4]
10000cb4:	3360      	adds	r3, #96	; 0x60
10000cb6:	4618      	mov	r0, r3
10000cb8:	f000 feb0 	bl	10001a1c <RCCEx_PLL2_Config>
10000cbc:	4603      	mov	r3, r0
10000cbe:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10000cc0:	7bfb      	ldrb	r3, [r7, #15]
10000cc2:	2b00      	cmp	r3, #0
10000cc4:	d001      	beq.n	10000cca <HAL_RCC_OscConfig+0x626>
  {
    return result;
10000cc6:	7bfb      	ldrb	r3, [r7, #15]
10000cc8:	e018      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10000cca:	687b      	ldr	r3, [r7, #4]
10000ccc:	339c      	adds	r3, #156	; 0x9c
10000cce:	4618      	mov	r0, r3
10000cd0:	f001 f826 	bl	10001d20 <RCCEx_PLL3_Config>
10000cd4:	4603      	mov	r3, r0
10000cd6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10000cd8:	7bfb      	ldrb	r3, [r7, #15]
10000cda:	2b00      	cmp	r3, #0
10000cdc:	d001      	beq.n	10000ce2 <HAL_RCC_OscConfig+0x63e>
  {
    return result;
10000cde:	7bfb      	ldrb	r3, [r7, #15]
10000ce0:	e00c      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10000ce2:	687b      	ldr	r3, [r7, #4]
10000ce4:	33d8      	adds	r3, #216	; 0xd8
10000ce6:	4618      	mov	r0, r3
10000ce8:	f001 f984 	bl	10001ff4 <RCCEx_PLL4_Config>
10000cec:	4603      	mov	r3, r0
10000cee:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10000cf0:	7bfb      	ldrb	r3, [r7, #15]
10000cf2:	2b00      	cmp	r3, #0
10000cf4:	d001      	beq.n	10000cfa <HAL_RCC_OscConfig+0x656>
  {
    return result;
10000cf6:	7bfb      	ldrb	r3, [r7, #15]
10000cf8:	e000      	b.n	10000cfc <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10000cfa:	2300      	movs	r3, #0
}
10000cfc:	4618      	mov	r0, r3
10000cfe:	3710      	adds	r7, #16
10000d00:	46bd      	mov	sp, r7
10000d02:	bd80      	pop	{r7, pc}
10000d04:	50001000 	.word	0x50001000

10000d08 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10000d08:	b580      	push	{r7, lr}
10000d0a:	b084      	sub	sp, #16
10000d0c:	af00      	add	r7, sp, #0
10000d0e:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10000d10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d14:	f44f 7280 	mov.w	r2, #256	; 0x100
10000d18:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10000d1a:	f7ff fbc1 	bl	100004a0 <HAL_GetTick>
10000d1e:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10000d20:	e008      	b.n	10000d34 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10000d22:	f7ff fbbd 	bl	100004a0 <HAL_GetTick>
10000d26:	4602      	mov	r2, r0
10000d28:	68fb      	ldr	r3, [r7, #12]
10000d2a:	1ad3      	subs	r3, r2, r3
10000d2c:	2b64      	cmp	r3, #100	; 0x64
10000d2e:	d901      	bls.n	10000d34 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10000d30:	2303      	movs	r3, #3
10000d32:	e050      	b.n	10000dd6 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10000d34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d38:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000d44:	d0ed      	beq.n	10000d22 <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10000d46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d4a:	f44f 6290 	mov.w	r2, #1152	; 0x480
10000d4e:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10000d50:	687b      	ldr	r3, [r7, #4]
10000d52:	2b00      	cmp	r3, #0
10000d54:	d03e      	beq.n	10000dd4 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10000d56:	687b      	ldr	r3, [r7, #4]
10000d58:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
10000d5c:	d108      	bne.n	10000d70 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10000d5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d62:	68db      	ldr	r3, [r3, #12]
10000d64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10000d6c:	60d3      	str	r3, [r2, #12]
10000d6e:	e013      	b.n	10000d98 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10000d70:	687b      	ldr	r3, [r7, #4]
10000d72:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
10000d76:	d10f      	bne.n	10000d98 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10000d78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d7c:	68db      	ldr	r3, [r3, #12]
10000d7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10000d86:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10000d88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d8c:	68db      	ldr	r3, [r3, #12]
10000d8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10000d96:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10000d98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d9c:	68db      	ldr	r3, [r3, #12]
10000d9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10000da6:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10000da8:	f7ff fb7a 	bl	100004a0 <HAL_GetTick>
10000dac:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10000dae:	e008      	b.n	10000dc2 <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10000db0:	f7ff fb76 	bl	100004a0 <HAL_GetTick>
10000db4:	4602      	mov	r2, r0
10000db6:	68fb      	ldr	r3, [r7, #12]
10000db8:	1ad3      	subs	r3, r2, r3
10000dba:	2b64      	cmp	r3, #100	; 0x64
10000dbc:	d901      	bls.n	10000dc2 <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
10000dbe:	2303      	movs	r3, #3
10000dc0:	e009      	b.n	10000dd6 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10000dc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dc6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000dd2:	d1ed      	bne.n	10000db0 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10000dd4:	2300      	movs	r3, #0
}
10000dd6:	4618      	mov	r0, r3
10000dd8:	3710      	adds	r7, #16
10000dda:	46bd      	mov	sp, r7
10000ddc:	bd80      	pop	{r7, pc}

10000dde <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
10000dde:	b580      	push	{r7, lr}
10000de0:	b084      	sub	sp, #16
10000de2:	af00      	add	r7, sp, #0
10000de4:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10000de6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000dee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000df2:	f023 0301 	bic.w	r3, r3, #1
10000df6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10000dfa:	f7ff fb51 	bl	100004a0 <HAL_GetTick>
10000dfe:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10000e00:	e00a      	b.n	10000e18 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10000e02:	f7ff fb4d 	bl	100004a0 <HAL_GetTick>
10000e06:	4602      	mov	r2, r0
10000e08:	68fb      	ldr	r3, [r7, #12]
10000e0a:	1ad3      	subs	r3, r2, r3
10000e0c:	f241 3288 	movw	r2, #5000	; 0x1388
10000e10:	4293      	cmp	r3, r2
10000e12:	d901      	bls.n	10000e18 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10000e14:	2303      	movs	r3, #3
10000e16:	e05b      	b.n	10000ed0 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10000e18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000e20:	f003 0304 	and.w	r3, r3, #4
10000e24:	2b04      	cmp	r3, #4
10000e26:	d0ec      	beq.n	10000e02 <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10000e28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000e30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000e34:	f023 030a 	bic.w	r3, r3, #10
10000e38:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10000e3c:	687b      	ldr	r3, [r7, #4]
10000e3e:	2b00      	cmp	r3, #0
10000e40:	d045      	beq.n	10000ece <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10000e42:	687b      	ldr	r3, [r7, #4]
10000e44:	2b03      	cmp	r3, #3
10000e46:	d10a      	bne.n	10000e5e <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10000e48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000e50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000e54:	f043 0302 	orr.w	r3, r3, #2
10000e58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10000e5c:	e016      	b.n	10000e8c <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
10000e5e:	687b      	ldr	r3, [r7, #4]
10000e60:	2b0b      	cmp	r3, #11
10000e62:	d113      	bne.n	10000e8c <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10000e64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000e6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000e70:	f043 0308 	orr.w	r3, r3, #8
10000e74:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10000e78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000e80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000e84:	f043 0302 	orr.w	r3, r3, #2
10000e88:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10000e8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000e94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000e98:	f043 0301 	orr.w	r3, r3, #1
10000e9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10000ea0:	f7ff fafe 	bl	100004a0 <HAL_GetTick>
10000ea4:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10000ea6:	e00a      	b.n	10000ebe <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10000ea8:	f7ff fafa 	bl	100004a0 <HAL_GetTick>
10000eac:	4602      	mov	r2, r0
10000eae:	68fb      	ldr	r3, [r7, #12]
10000eb0:	1ad3      	subs	r3, r2, r3
10000eb2:	f241 3288 	movw	r2, #5000	; 0x1388
10000eb6:	4293      	cmp	r3, r2
10000eb8:	d901      	bls.n	10000ebe <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10000eba:	2303      	movs	r3, #3
10000ebc:	e008      	b.n	10000ed0 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10000ebe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ec2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10000ec6:	f003 0304 	and.w	r3, r3, #4
10000eca:	2b04      	cmp	r3, #4
10000ecc:	d1ec      	bne.n	10000ea8 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
10000ece:	2300      	movs	r3, #0
}
10000ed0:	4618      	mov	r0, r3
10000ed2:	3710      	adds	r7, #16
10000ed4:	46bd      	mov	sp, r7
10000ed6:	bd80      	pop	{r7, pc}

10000ed8 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10000ed8:	b580      	push	{r7, lr}
10000eda:	b084      	sub	sp, #16
10000edc:	af00      	add	r7, sp, #0
10000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
10000ee0:	687b      	ldr	r3, [r7, #4]
10000ee2:	681b      	ldr	r3, [r3, #0]
10000ee4:	2b00      	cmp	r3, #0
10000ee6:	f000 8174 	beq.w	100011d2 <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10000eea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000eee:	6a1b      	ldr	r3, [r3, #32]
10000ef0:	f003 0303 	and.w	r3, r3, #3
10000ef4:	2b02      	cmp	r3, #2
10000ef6:	d108      	bne.n	10000f0a <RCC_PLL1_Config+0x32>
10000ef8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000efc:	6a1b      	ldr	r3, [r3, #32]
10000efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000f06:	f000 8162 	beq.w	100011ce <RCC_PLL1_Config+0x2f6>
10000f0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f0e:	6a1b      	ldr	r3, [r3, #32]
10000f10:	f003 0303 	and.w	r3, r3, #3
10000f14:	2b03      	cmp	r3, #3
10000f16:	d108      	bne.n	10000f2a <RCC_PLL1_Config+0x52>
10000f18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f1c:	6a1b      	ldr	r3, [r3, #32]
10000f1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000f26:	f000 8152 	beq.w	100011ce <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10000f2a:	687b      	ldr	r3, [r7, #4]
10000f2c:	681b      	ldr	r3, [r3, #0]
10000f2e:	2b02      	cmp	r3, #2
10000f30:	f040 8123 	bne.w	1000117a <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10000f34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000f3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10000f44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10000f48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000f50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000f54:	f023 0301 	bic.w	r3, r3, #1
10000f58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000f5c:	f7ff faa0 	bl	100004a0 <HAL_GetTick>
10000f60:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10000f62:	e008      	b.n	10000f76 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10000f64:	f7ff fa9c 	bl	100004a0 <HAL_GetTick>
10000f68:	4602      	mov	r2, r0
10000f6a:	68fb      	ldr	r3, [r7, #12]
10000f6c:	1ad3      	subs	r3, r2, r3
10000f6e:	2b64      	cmp	r3, #100	; 0x64
10000f70:	d901      	bls.n	10000f76 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
10000f72:	2303      	movs	r3, #3
10000f74:	e12e      	b.n	100011d4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10000f76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000f7e:	f003 0302 	and.w	r3, r3, #2
10000f82:	2b02      	cmp	r3, #2
10000f84:	d0ee      	beq.n	10000f64 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10000f86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000f8c:	f003 0307 	and.w	r3, r3, #7
10000f90:	2b02      	cmp	r3, #2
10000f92:	d112      	bne.n	10000fba <RCC_PLL1_Config+0xe2>
10000f94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000f9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000fa2:	d10a      	bne.n	10000fba <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10000fa4:	687b      	ldr	r3, [r7, #4]
10000fa6:	685a      	ldr	r2, [r3, #4]
10000fa8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000fae:	f003 0303 	and.w	r3, r3, #3
10000fb2:	429a      	cmp	r2, r3
10000fb4:	d00c      	beq.n	10000fd0 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10000fb6:	2301      	movs	r3, #1
10000fb8:	e10c      	b.n	100011d4 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10000fba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000fc0:	f023 0203 	bic.w	r2, r3, #3
10000fc4:	687b      	ldr	r3, [r7, #4]
10000fc6:	685b      	ldr	r3, [r3, #4]
10000fc8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000fcc:	4313      	orrs	r3, r2
10000fce:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10000fd0:	e008      	b.n	10000fe4 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10000fd2:	f7ff fa65 	bl	100004a0 <HAL_GetTick>
10000fd6:	4602      	mov	r2, r0
10000fd8:	68fb      	ldr	r3, [r7, #12]
10000fda:	1ad3      	subs	r3, r2, r3
10000fdc:	2b64      	cmp	r3, #100	; 0x64
10000fde:	d901      	bls.n	10000fe4 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
10000fe0:	2303      	movs	r3, #3
10000fe2:	e0f7      	b.n	100011d4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10000fe4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000ff2:	d1ee      	bne.n	10000fd2 <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10000ff4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ff8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10000ffc:	4b77      	ldr	r3, [pc, #476]	; (100011dc <RCC_PLL1_Config+0x304>)
10000ffe:	4013      	ands	r3, r2
10001000:	687a      	ldr	r2, [r7, #4]
10001002:	68d2      	ldr	r2, [r2, #12]
10001004:	1e51      	subs	r1, r2, #1
10001006:	687a      	ldr	r2, [r7, #4]
10001008:	6892      	ldr	r2, [r2, #8]
1000100a:	3a01      	subs	r2, #1
1000100c:	0412      	lsls	r2, r2, #16
1000100e:	430a      	orrs	r2, r1
10001010:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001014:	4313      	orrs	r3, r2
10001016:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
1000101a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10001022:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10001026:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000102a:	687a      	ldr	r2, [r7, #4]
1000102c:	6912      	ldr	r2, [r2, #16]
1000102e:	1e51      	subs	r1, r2, #1
10001030:	687a      	ldr	r2, [r7, #4]
10001032:	6952      	ldr	r2, [r2, #20]
10001034:	3a01      	subs	r2, #1
10001036:	0212      	lsls	r2, r2, #8
10001038:	4311      	orrs	r1, r2
1000103a:	687a      	ldr	r2, [r7, #4]
1000103c:	6992      	ldr	r2, [r2, #24]
1000103e:	3a01      	subs	r2, #1
10001040:	0412      	lsls	r2, r2, #16
10001042:	430a      	orrs	r2, r1
10001044:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001048:	4313      	orrs	r3, r2
1000104a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
1000104e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001056:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000105a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000105e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
10001062:	687b      	ldr	r3, [r7, #4]
10001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001066:	2b02      	cmp	r3, #2
10001068:	d003      	beq.n	10001072 <RCC_PLL1_Config+0x19a>
1000106a:	687b      	ldr	r3, [r7, #4]
1000106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000106e:	2b00      	cmp	r3, #0
10001070:	d10c      	bne.n	1000108c <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
10001072:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
1000107a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000107e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001082:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001086:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
1000108a:	e00f      	b.n	100010ac <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
1000108c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001094:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001098:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000109c:	687a      	ldr	r2, [r7, #4]
1000109e:	6a12      	ldr	r2, [r2, #32]
100010a0:	00d2      	lsls	r2, r2, #3
100010a2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100010a6:	4313      	orrs	r3, r2
100010a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
100010ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100010b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100010b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100010bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100010c0:	687b      	ldr	r3, [r7, #4]
100010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100010c4:	2b02      	cmp	r3, #2
100010c6:	d124      	bne.n	10001112 <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
100010c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
100010d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100010d4:	687b      	ldr	r3, [r7, #4]
100010d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
100010d8:	687b      	ldr	r3, [r7, #4]
100010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100010dc:	4319      	orrs	r1, r3
100010de:	687b      	ldr	r3, [r7, #4]
100010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100010e2:	4319      	orrs	r1, r3
100010e4:	687b      	ldr	r3, [r7, #4]
100010e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100010e8:	4319      	orrs	r1, r3
100010ea:	687b      	ldr	r3, [r7, #4]
100010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100010ee:	041b      	lsls	r3, r3, #16
100010f0:	430b      	orrs	r3, r1
100010f2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100010f6:	4313      	orrs	r3, r2
100010f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
100010fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001104:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001108:	f043 0304 	orr.w	r3, r3, #4
1000110c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
10001110:	e009      	b.n	10001126 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
10001112:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000111a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000111e:	f023 0304 	bic.w	r3, r3, #4
10001122:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10001126:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000112a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000112e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001132:	f043 0301 	orr.w	r3, r3, #1
10001136:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000113a:	f7ff f9b1 	bl	100004a0 <HAL_GetTick>
1000113e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001140:	e008      	b.n	10001154 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001142:	f7ff f9ad 	bl	100004a0 <HAL_GetTick>
10001146:	4602      	mov	r2, r0
10001148:	68fb      	ldr	r3, [r7, #12]
1000114a:	1ad3      	subs	r3, r2, r3
1000114c:	2b64      	cmp	r3, #100	; 0x64
1000114e:	d901      	bls.n	10001154 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10001150:	2303      	movs	r3, #3
10001152:	e03f      	b.n	100011d4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001154:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000115c:	f003 0302 	and.w	r3, r3, #2
10001160:	2b02      	cmp	r3, #2
10001162:	d1ee      	bne.n	10001142 <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001164:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000116c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001170:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10001174:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10001178:	e02b      	b.n	100011d2 <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
1000117a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000117e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001182:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000118a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
1000118e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001196:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000119a:	f023 0301 	bic.w	r3, r3, #1
1000119e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100011a2:	f7ff f97d 	bl	100004a0 <HAL_GetTick>
100011a6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100011a8:	e008      	b.n	100011bc <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100011aa:	f7ff f979 	bl	100004a0 <HAL_GetTick>
100011ae:	4602      	mov	r2, r0
100011b0:	68fb      	ldr	r3, [r7, #12]
100011b2:	1ad3      	subs	r3, r2, r3
100011b4:	2b64      	cmp	r3, #100	; 0x64
100011b6:	d901      	bls.n	100011bc <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
100011b8:	2303      	movs	r3, #3
100011ba:	e00b      	b.n	100011d4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100011bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100011c4:	f003 0302 	and.w	r3, r3, #2
100011c8:	2b02      	cmp	r3, #2
100011ca:	d0ee      	beq.n	100011aa <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
100011cc:	e001      	b.n	100011d2 <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100011ce:	2301      	movs	r3, #1
100011d0:	e000      	b.n	100011d4 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
100011d2:	2300      	movs	r3, #0

}
100011d4:	4618      	mov	r0, r3
100011d6:	3710      	adds	r7, #16
100011d8:	46bd      	mov	sp, r7
100011da:	bd80      	pop	{r7, pc}
100011dc:	ffc0fe00 	.word	0xffc0fe00

100011e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
100011e0:	b580      	push	{r7, lr}
100011e2:	b084      	sub	sp, #16
100011e4:	af00      	add	r7, sp, #0
100011e6:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
100011e8:	2300      	movs	r3, #0
100011ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100011ec:	687b      	ldr	r3, [r7, #4]
100011ee:	2b00      	cmp	r3, #0
100011f0:	d101      	bne.n	100011f6 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
100011f2:	2301      	movs	r3, #1
100011f4:	e102      	b.n	100013fc <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
100011f6:	687b      	ldr	r3, [r7, #4]
100011f8:	681b      	ldr	r3, [r3, #0]
100011fa:	f003 0301 	and.w	r3, r3, #1
100011fe:	2b00      	cmp	r3, #0
10001200:	d00b      	beq.n	1000121a <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10001202:	687b      	ldr	r3, [r7, #4]
10001204:	3304      	adds	r3, #4
10001206:	4618      	mov	r0, r3
10001208:	f000 f8fc 	bl	10001404 <RCC_MPUConfig>
1000120c:	4603      	mov	r3, r0
1000120e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001210:	7bfb      	ldrb	r3, [r7, #15]
10001212:	2b00      	cmp	r3, #0
10001214:	d001      	beq.n	1000121a <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10001216:	7bfb      	ldrb	r3, [r7, #15]
10001218:	e0f0      	b.n	100013fc <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
1000121a:	687b      	ldr	r3, [r7, #4]
1000121c:	681b      	ldr	r3, [r3, #0]
1000121e:	f003 0302 	and.w	r3, r3, #2
10001222:	2b00      	cmp	r3, #0
10001224:	d00b      	beq.n	1000123e <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10001226:	687b      	ldr	r3, [r7, #4]
10001228:	330c      	adds	r3, #12
1000122a:	4618      	mov	r0, r3
1000122c:	f000 f960 	bl	100014f0 <RCC_AXISSConfig>
10001230:	4603      	mov	r3, r0
10001232:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001234:	7bfb      	ldrb	r3, [r7, #15]
10001236:	2b00      	cmp	r3, #0
10001238:	d001      	beq.n	1000123e <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
1000123a:	7bfb      	ldrb	r3, [r7, #15]
1000123c:	e0de      	b.n	100013fc <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
1000123e:	687b      	ldr	r3, [r7, #4]
10001240:	681b      	ldr	r3, [r3, #0]
10001242:	f003 0304 	and.w	r3, r3, #4
10001246:	2b00      	cmp	r3, #0
10001248:	d00b      	beq.n	10001262 <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
1000124a:	687b      	ldr	r3, [r7, #4]
1000124c:	3314      	adds	r3, #20
1000124e:	4618      	mov	r0, r3
10001250:	f000 f9e6 	bl	10001620 <RCC_MCUConfig>
10001254:	4603      	mov	r3, r0
10001256:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001258:	7bfb      	ldrb	r3, [r7, #15]
1000125a:	2b00      	cmp	r3, #0
1000125c:	d001      	beq.n	10001262 <HAL_RCC_ClockConfig+0x82>
    {
      return status;
1000125e:	7bfb      	ldrb	r3, [r7, #15]
10001260:	e0cc      	b.n	100013fc <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10001262:	687b      	ldr	r3, [r7, #4]
10001264:	681b      	ldr	r3, [r3, #0]
10001266:	f003 0308 	and.w	r3, r3, #8
1000126a:	2b00      	cmp	r3, #0
1000126c:	d020      	beq.n	100012b0 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
1000126e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001274:	f023 0207 	bic.w	r2, r3, #7
10001278:	687b      	ldr	r3, [r7, #4]
1000127a:	69db      	ldr	r3, [r3, #28]
1000127c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001280:	4313      	orrs	r3, r2
10001282:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001284:	f7ff f90c 	bl	100004a0 <HAL_GetTick>
10001288:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
1000128a:	e009      	b.n	100012a0 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000128c:	f7ff f908 	bl	100004a0 <HAL_GetTick>
10001290:	4602      	mov	r2, r0
10001292:	68bb      	ldr	r3, [r7, #8]
10001294:	1ad3      	subs	r3, r2, r3
10001296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000129a:	d901      	bls.n	100012a0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
1000129c:	2303      	movs	r3, #3
1000129e:	e0ad      	b.n	100013fc <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100012a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100012a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100012aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100012ae:	d1ed      	bne.n	1000128c <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
100012b0:	687b      	ldr	r3, [r7, #4]
100012b2:	681b      	ldr	r3, [r3, #0]
100012b4:	f003 0310 	and.w	r3, r3, #16
100012b8:	2b00      	cmp	r3, #0
100012ba:	d020      	beq.n	100012fe <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
100012bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100012c2:	f023 0207 	bic.w	r2, r3, #7
100012c6:	687b      	ldr	r3, [r7, #4]
100012c8:	6a1b      	ldr	r3, [r3, #32]
100012ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100012ce:	4313      	orrs	r3, r2
100012d0:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100012d2:	f7ff f8e5 	bl	100004a0 <HAL_GetTick>
100012d6:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100012d8:	e009      	b.n	100012ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100012da:	f7ff f8e1 	bl	100004a0 <HAL_GetTick>
100012de:	4602      	mov	r2, r0
100012e0:	68bb      	ldr	r3, [r7, #8]
100012e2:	1ad3      	subs	r3, r2, r3
100012e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100012e8:	d901      	bls.n	100012ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
100012ea:	2303      	movs	r3, #3
100012ec:	e086      	b.n	100013fc <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100012ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100012f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100012f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100012fc:	d1ed      	bne.n	100012da <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
100012fe:	687b      	ldr	r3, [r7, #4]
10001300:	681b      	ldr	r3, [r3, #0]
10001302:	f003 0320 	and.w	r3, r3, #32
10001306:	2b00      	cmp	r3, #0
10001308:	d023      	beq.n	10001352 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
1000130a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000130e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10001312:	f023 0207 	bic.w	r2, r3, #7
10001316:	687b      	ldr	r3, [r7, #4]
10001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000131a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000131e:	4313      	orrs	r3, r2
10001320:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001324:	f7ff f8bc 	bl	100004a0 <HAL_GetTick>
10001328:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
1000132a:	e009      	b.n	10001340 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000132c:	f7ff f8b8 	bl	100004a0 <HAL_GetTick>
10001330:	4602      	mov	r2, r0
10001332:	68bb      	ldr	r3, [r7, #8]
10001334:	1ad3      	subs	r3, r2, r3
10001336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000133a:	d901      	bls.n	10001340 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
1000133c:	2303      	movs	r3, #3
1000133e:	e05d      	b.n	100013fc <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001340:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001344:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10001348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000134c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001350:	d1ec      	bne.n	1000132c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10001352:	687b      	ldr	r3, [r7, #4]
10001354:	681b      	ldr	r3, [r3, #0]
10001356:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000135a:	2b00      	cmp	r3, #0
1000135c:	d023      	beq.n	100013a6 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
1000135e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001362:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10001366:	f023 0207 	bic.w	r2, r3, #7
1000136a:	687b      	ldr	r3, [r7, #4]
1000136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000136e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001372:	4313      	orrs	r3, r2
10001374:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001378:	f7ff f892 	bl	100004a0 <HAL_GetTick>
1000137c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
1000137e:	e009      	b.n	10001394 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001380:	f7ff f88e 	bl	100004a0 <HAL_GetTick>
10001384:	4602      	mov	r2, r0
10001386:	68bb      	ldr	r3, [r7, #8]
10001388:	1ad3      	subs	r3, r2, r3
1000138a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000138e:	d901      	bls.n	10001394 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
10001390:	2303      	movs	r3, #3
10001392:	e033      	b.n	100013fc <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001394:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001398:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
1000139c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100013a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100013a4:	d1ec      	bne.n	10001380 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
100013a6:	687b      	ldr	r3, [r7, #4]
100013a8:	681b      	ldr	r3, [r3, #0]
100013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
100013ae:	2b00      	cmp	r3, #0
100013b0:	d023      	beq.n	100013fa <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
100013b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013b6:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100013ba:	f023 0207 	bic.w	r2, r3, #7
100013be:	687b      	ldr	r3, [r7, #4]
100013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100013c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100013c6:	4313      	orrs	r3, r2
100013c8:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100013cc:	f7ff f868 	bl	100004a0 <HAL_GetTick>
100013d0:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100013d2:	e009      	b.n	100013e8 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100013d4:	f7ff f864 	bl	100004a0 <HAL_GetTick>
100013d8:	4602      	mov	r2, r0
100013da:	68bb      	ldr	r3, [r7, #8]
100013dc:	1ad3      	subs	r3, r2, r3
100013de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100013e2:	d901      	bls.n	100013e8 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
100013e4:	2303      	movs	r3, #3
100013e6:	e009      	b.n	100013fc <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100013e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013ec:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100013f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100013f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100013f8:	d1ec      	bne.n	100013d4 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
100013fa:	2300      	movs	r3, #0
}
100013fc:	4618      	mov	r0, r3
100013fe:	3710      	adds	r7, #16
10001400:	46bd      	mov	sp, r7
10001402:	bd80      	pop	{r7, pc}

10001404 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10001404:	b580      	push	{r7, lr}
10001406:	b084      	sub	sp, #16
10001408:	af00      	add	r7, sp, #0
1000140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
1000140c:	687b      	ldr	r3, [r7, #4]
1000140e:	681b      	ldr	r3, [r3, #0]
10001410:	2b03      	cmp	r3, #3
10001412:	d840      	bhi.n	10001496 <RCC_MPUConfig+0x92>
10001414:	a201      	add	r2, pc, #4	; (adr r2, 1000141c <RCC_MPUConfig+0x18>)
10001416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000141a:	bf00      	nop
1000141c:	1000142d 	.word	0x1000142d
10001420:	10001441 	.word	0x10001441
10001424:	10001457 	.word	0x10001457
10001428:	1000146b 	.word	0x1000146b
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000142c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001430:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001434:	f003 0301 	and.w	r3, r3, #1
10001438:	2b01      	cmp	r3, #1
1000143a:	d02e      	beq.n	1000149a <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
1000143c:	2301      	movs	r3, #1
1000143e:	e053      	b.n	100014e8 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001440:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001444:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001448:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000144c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001450:	d025      	beq.n	1000149e <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10001452:	2301      	movs	r3, #1
10001454:	e048      	b.n	100014e8 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001456:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000145a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000145e:	f003 0302 	and.w	r3, r3, #2
10001462:	2b02      	cmp	r3, #2
10001464:	d01d      	beq.n	100014a2 <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10001466:	2301      	movs	r3, #1
10001468:	e03e      	b.n	100014e8 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000146a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000146e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001472:	f003 0302 	and.w	r3, r3, #2
10001476:	2b02      	cmp	r3, #2
10001478:	d001      	beq.n	1000147e <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
1000147a:	2301      	movs	r3, #1
1000147c:	e034      	b.n	100014e8 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
1000147e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001484:	f023 0207 	bic.w	r2, r3, #7
10001488:	687b      	ldr	r3, [r7, #4]
1000148a:	685b      	ldr	r3, [r3, #4]
1000148c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001490:	4313      	orrs	r3, r2
10001492:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
10001494:	e006      	b.n	100014a4 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10001496:	2301      	movs	r3, #1
10001498:	e026      	b.n	100014e8 <RCC_MPUConfig+0xe4>
      break;
1000149a:	bf00      	nop
1000149c:	e002      	b.n	100014a4 <RCC_MPUConfig+0xa0>
      break;
1000149e:	bf00      	nop
100014a0:	e000      	b.n	100014a4 <RCC_MPUConfig+0xa0>
      break;
100014a2:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
100014a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014a8:	6a1b      	ldr	r3, [r3, #32]
100014aa:	f023 0203 	bic.w	r2, r3, #3
100014ae:	687b      	ldr	r3, [r7, #4]
100014b0:	681b      	ldr	r3, [r3, #0]
100014b2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100014b6:	4313      	orrs	r3, r2
100014b8:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100014ba:	f7fe fff1 	bl	100004a0 <HAL_GetTick>
100014be:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100014c0:	e009      	b.n	100014d6 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100014c2:	f7fe ffed 	bl	100004a0 <HAL_GetTick>
100014c6:	4602      	mov	r2, r0
100014c8:	68fb      	ldr	r3, [r7, #12]
100014ca:	1ad3      	subs	r3, r2, r3
100014cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100014d0:	d901      	bls.n	100014d6 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
100014d2:	2303      	movs	r3, #3
100014d4:	e008      	b.n	100014e8 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100014d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014da:	6a1b      	ldr	r3, [r3, #32]
100014dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100014e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100014e4:	d1ed      	bne.n	100014c2 <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
100014e6:	2300      	movs	r3, #0
}
100014e8:	4618      	mov	r0, r3
100014ea:	3710      	adds	r7, #16
100014ec:	46bd      	mov	sp, r7
100014ee:	bd80      	pop	{r7, pc}

100014f0 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
100014f0:	b580      	push	{r7, lr}
100014f2:	b084      	sub	sp, #16
100014f4:	af00      	add	r7, sp, #0
100014f6:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
100014f8:	687b      	ldr	r3, [r7, #4]
100014fa:	681b      	ldr	r3, [r3, #0]
100014fc:	2b02      	cmp	r3, #2
100014fe:	d01b      	beq.n	10001538 <RCC_AXISSConfig+0x48>
10001500:	2b02      	cmp	r3, #2
10001502:	d823      	bhi.n	1000154c <RCC_AXISSConfig+0x5c>
10001504:	2b00      	cmp	r3, #0
10001506:	d002      	beq.n	1000150e <RCC_AXISSConfig+0x1e>
10001508:	2b01      	cmp	r3, #1
1000150a:	d00a      	beq.n	10001522 <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
1000150c:	e01e      	b.n	1000154c <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000150e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001512:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001516:	f003 0301 	and.w	r3, r3, #1
1000151a:	2b01      	cmp	r3, #1
1000151c:	d018      	beq.n	10001550 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
1000151e:	2301      	movs	r3, #1
10001520:	e079      	b.n	10001616 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001522:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001526:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000152e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001532:	d00f      	beq.n	10001554 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10001534:	2301      	movs	r3, #1
10001536:	e06e      	b.n	10001616 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001538:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000153c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001540:	f003 0302 	and.w	r3, r3, #2
10001544:	2b02      	cmp	r3, #2
10001546:	d007      	beq.n	10001558 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10001548:	2301      	movs	r3, #1
1000154a:	e064      	b.n	10001616 <RCC_AXISSConfig+0x126>
      break;
1000154c:	bf00      	nop
1000154e:	e004      	b.n	1000155a <RCC_AXISSConfig+0x6a>
      break;
10001550:	bf00      	nop
10001552:	e002      	b.n	1000155a <RCC_AXISSConfig+0x6a>
      break;
10001554:	bf00      	nop
10001556:	e000      	b.n	1000155a <RCC_AXISSConfig+0x6a>
      break;
10001558:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
1000155a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001560:	f023 0207 	bic.w	r2, r3, #7
10001564:	687b      	ldr	r3, [r7, #4]
10001566:	681b      	ldr	r3, [r3, #0]
10001568:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000156c:	4313      	orrs	r3, r2
1000156e:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10001570:	687b      	ldr	r3, [r7, #4]
10001572:	681b      	ldr	r3, [r3, #0]
10001574:	2b03      	cmp	r3, #3
10001576:	d016      	beq.n	100015a6 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001578:	f7fe ff92 	bl	100004a0 <HAL_GetTick>
1000157c:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
1000157e:	e009      	b.n	10001594 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001580:	f7fe ff8e 	bl	100004a0 <HAL_GetTick>
10001584:	4602      	mov	r2, r0
10001586:	68fb      	ldr	r3, [r7, #12]
10001588:	1ad3      	subs	r3, r2, r3
1000158a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000158e:	d901      	bls.n	10001594 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10001590:	2303      	movs	r3, #3
10001592:	e040      	b.n	10001616 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001594:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000159a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000159e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100015a2:	d1ed      	bne.n	10001580 <RCC_AXISSConfig+0x90>
100015a4:	e015      	b.n	100015d2 <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100015a6:	f7fe ff7b 	bl	100004a0 <HAL_GetTick>
100015aa:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100015ac:	e009      	b.n	100015c2 <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100015ae:	f7fe ff77 	bl	100004a0 <HAL_GetTick>
100015b2:	4602      	mov	r2, r0
100015b4:	68fb      	ldr	r3, [r7, #12]
100015b6:	1ad3      	subs	r3, r2, r3
100015b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100015bc:	d901      	bls.n	100015c2 <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
100015be:	2303      	movs	r3, #3
100015c0:	e029      	b.n	10001616 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
100015c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100015c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100015cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100015d0:	d0ed      	beq.n	100015ae <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
100015d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100015d8:	f023 0207 	bic.w	r2, r3, #7
100015dc:	687b      	ldr	r3, [r7, #4]
100015de:	685b      	ldr	r3, [r3, #4]
100015e0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100015e4:	4313      	orrs	r3, r2
100015e6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100015e8:	f7fe ff5a 	bl	100004a0 <HAL_GetTick>
100015ec:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
100015ee:	e009      	b.n	10001604 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100015f0:	f7fe ff56 	bl	100004a0 <HAL_GetTick>
100015f4:	4602      	mov	r2, r0
100015f6:	68fb      	ldr	r3, [r7, #12]
100015f8:	1ad3      	subs	r3, r2, r3
100015fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100015fe:	d901      	bls.n	10001604 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10001600:	2303      	movs	r3, #3
10001602:	e008      	b.n	10001616 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001604:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000160a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000160e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001612:	d1ed      	bne.n	100015f0 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10001614:	2300      	movs	r3, #0
}
10001616:	4618      	mov	r0, r3
10001618:	3710      	adds	r7, #16
1000161a:	46bd      	mov	sp, r7
1000161c:	bd80      	pop	{r7, pc}
	...

10001620 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10001620:	b580      	push	{r7, lr}
10001622:	b084      	sub	sp, #16
10001624:	af00      	add	r7, sp, #0
10001626:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10001628:	687b      	ldr	r3, [r7, #4]
1000162a:	681b      	ldr	r3, [r3, #0]
1000162c:	2b03      	cmp	r3, #3
1000162e:	d834      	bhi.n	1000169a <RCC_MCUConfig+0x7a>
10001630:	a201      	add	r2, pc, #4	; (adr r2, 10001638 <RCC_MCUConfig+0x18>)
10001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001636:	bf00      	nop
10001638:	10001649 	.word	0x10001649
1000163c:	1000165d 	.word	0x1000165d
10001640:	10001673 	.word	0x10001673
10001644:	10001687 	.word	0x10001687
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001648:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000164c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001650:	f003 0301 	and.w	r3, r3, #1
10001654:	2b01      	cmp	r3, #1
10001656:	d022      	beq.n	1000169e <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10001658:	2301      	movs	r3, #1
1000165a:	e081      	b.n	10001760 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000165c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001660:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001664:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000166c:	d019      	beq.n	100016a2 <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
1000166e:	2301      	movs	r3, #1
10001670:	e076      	b.n	10001760 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001672:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001676:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000167a:	f003 0310 	and.w	r3, r3, #16
1000167e:	2b10      	cmp	r3, #16
10001680:	d011      	beq.n	100016a6 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10001682:	2301      	movs	r3, #1
10001684:	e06c      	b.n	10001760 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001686:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000168a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000168e:	f003 0302 	and.w	r3, r3, #2
10001692:	2b02      	cmp	r3, #2
10001694:	d009      	beq.n	100016aa <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10001696:	2301      	movs	r3, #1
10001698:	e062      	b.n	10001760 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
1000169a:	bf00      	nop
1000169c:	e006      	b.n	100016ac <RCC_MCUConfig+0x8c>
      break;
1000169e:	bf00      	nop
100016a0:	e004      	b.n	100016ac <RCC_MCUConfig+0x8c>
      break;
100016a2:	bf00      	nop
100016a4:	e002      	b.n	100016ac <RCC_MCUConfig+0x8c>
      break;
100016a6:	bf00      	nop
100016a8:	e000      	b.n	100016ac <RCC_MCUConfig+0x8c>
      break;
100016aa:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
100016ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100016b2:	f023 0203 	bic.w	r2, r3, #3
100016b6:	687b      	ldr	r3, [r7, #4]
100016b8:	681b      	ldr	r3, [r3, #0]
100016ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100016be:	4313      	orrs	r3, r2
100016c0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100016c2:	f7fe feed 	bl	100004a0 <HAL_GetTick>
100016c6:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100016c8:	e009      	b.n	100016de <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100016ca:	f7fe fee9 	bl	100004a0 <HAL_GetTick>
100016ce:	4602      	mov	r2, r0
100016d0:	68fb      	ldr	r3, [r7, #12]
100016d2:	1ad3      	subs	r3, r2, r3
100016d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100016d8:	d901      	bls.n	100016de <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
100016da:	2303      	movs	r3, #3
100016dc:	e040      	b.n	10001760 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
100016de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100016e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100016e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100016ec:	d1ed      	bne.n	100016ca <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100016ee:	f000 f954 	bl	1000199a <HAL_RCC_GetSystemCoreClockFreq>
100016f2:	4603      	mov	r3, r0
100016f4:	4a1c      	ldr	r2, [pc, #112]	; (10001768 <RCC_MCUConfig+0x148>)
100016f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
100016f8:	4b1c      	ldr	r3, [pc, #112]	; (1000176c <RCC_MCUConfig+0x14c>)
100016fa:	681b      	ldr	r3, [r3, #0]
100016fc:	4618      	mov	r0, r3
100016fe:	f7fe fe85 	bl	1000040c <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10001702:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001706:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
1000170a:	f023 020f 	bic.w	r2, r3, #15
1000170e:	687b      	ldr	r3, [r7, #4]
10001710:	685b      	ldr	r3, [r3, #4]
10001712:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001716:	4313      	orrs	r3, r2
10001718:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000171c:	f7fe fec0 	bl	100004a0 <HAL_GetTick>
10001720:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001722:	e009      	b.n	10001738 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001724:	f7fe febc 	bl	100004a0 <HAL_GetTick>
10001728:	4602      	mov	r2, r0
1000172a:	68fb      	ldr	r3, [r7, #12]
1000172c:	1ad3      	subs	r3, r2, r3
1000172e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001732:	d901      	bls.n	10001738 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10001734:	2303      	movs	r3, #3
10001736:	e013      	b.n	10001760 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001738:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000173c:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001748:	d1ec      	bne.n	10001724 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
1000174a:	f000 f926 	bl	1000199a <HAL_RCC_GetSystemCoreClockFreq>
1000174e:	4603      	mov	r3, r0
10001750:	4a05      	ldr	r2, [pc, #20]	; (10001768 <RCC_MCUConfig+0x148>)
10001752:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001754:	4b05      	ldr	r3, [pc, #20]	; (1000176c <RCC_MCUConfig+0x14c>)
10001756:	681b      	ldr	r3, [r3, #0]
10001758:	4618      	mov	r0, r3
1000175a:	f7fe fe57 	bl	1000040c <HAL_InitTick>
#endif

  return HAL_OK;
1000175e:	2300      	movs	r3, #0
}
10001760:	4618      	mov	r0, r3
10001762:	3710      	adds	r7, #16
10001764:	46bd      	mov	sp, r7
10001766:	bd80      	pop	{r7, pc}
10001768:	10020000 	.word	0x10020000
1000176c:	10020004 	.word	0x10020004

10001770 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001770:	b480      	push	{r7}
10001772:	b089      	sub	sp, #36	; 0x24
10001774:	af00      	add	r7, sp, #0
10001776:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10001778:	2300      	movs	r3, #0
1000177a:	61bb      	str	r3, [r7, #24]
1000177c:	2301      	movs	r3, #1
1000177e:	617b      	str	r3, [r7, #20]
10001780:	2300      	movs	r3, #0
10001782:	613b      	str	r3, [r7, #16]
10001784:	2300      	movs	r3, #0
10001786:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10001788:	f04f 0300 	mov.w	r3, #0
1000178c:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
1000178e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001792:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001796:	f003 0303 	and.w	r3, r3, #3
1000179a:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
1000179c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017a0:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
100017a4:	0c1b      	lsrs	r3, r3, #16
100017a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
100017aa:	3301      	adds	r3, #1
100017ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
100017ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017b2:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100017b6:	0c1b      	lsrs	r3, r3, #16
100017b8:	f003 0301 	and.w	r3, r3, #1
100017bc:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
100017be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017c2:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100017c6:	08db      	lsrs	r3, r3, #3
100017c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
100017cc:	693a      	ldr	r2, [r7, #16]
100017ce:	fb02 f303 	mul.w	r3, r2, r3
100017d2:	ee07 3a90 	vmov	s15, r3
100017d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
100017da:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
100017de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017e2:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
100017e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
100017ea:	3301      	adds	r3, #1
100017ec:	ee07 3a90 	vmov	s15, r3
100017f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100017f4:	edd7 6a02 	vldr	s13, [r7, #8]
100017f8:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10001954 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
100017fc:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001800:	ee77 7a27 	vadd.f32	s15, s14, s15
10001804:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001808:	69bb      	ldr	r3, [r7, #24]
1000180a:	2b03      	cmp	r3, #3
1000180c:	d85b      	bhi.n	100018c6 <HAL_RCC_GetPLL3ClockFreq+0x156>
1000180e:	a201      	add	r2, pc, #4	; (adr r2, 10001814 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10001810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001814:	10001825 	.word	0x10001825
10001818:	10001883 	.word	0x10001883
1000181c:	100018a1 	.word	0x100018a1
10001820:	100018bf 	.word	0x100018bf
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001824:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001828:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000182c:	f003 0304 	and.w	r3, r3, #4
10001830:	2b04      	cmp	r3, #4
10001832:	d117      	bne.n	10001864 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001834:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001838:	699b      	ldr	r3, [r3, #24]
1000183a:	f003 0303 	and.w	r3, r3, #3
1000183e:	4a46      	ldr	r2, [pc, #280]	; (10001958 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001840:	fa22 f303 	lsr.w	r3, r2, r3
10001844:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10001846:	68fa      	ldr	r2, [r7, #12]
10001848:	697b      	ldr	r3, [r7, #20]
1000184a:	fbb2 f3f3 	udiv	r3, r2, r3
1000184e:	ee07 3a90 	vmov	s15, r3
10001852:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001856:	ed97 7a07 	vldr	s14, [r7, #28]
1000185a:	ee67 7a27 	vmul.f32	s15, s14, s15
1000185e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10001862:	e030      	b.n	100018c6 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10001864:	4a3c      	ldr	r2, [pc, #240]	; (10001958 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001866:	697b      	ldr	r3, [r7, #20]
10001868:	fbb2 f3f3 	udiv	r3, r2, r3
1000186c:	ee07 3a90 	vmov	s15, r3
10001870:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001874:	ed97 7a07 	vldr	s14, [r7, #28]
10001878:	ee67 7a27 	vmul.f32	s15, s14, s15
1000187c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001880:	e021      	b.n	100018c6 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10001882:	4a36      	ldr	r2, [pc, #216]	; (1000195c <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10001884:	697b      	ldr	r3, [r7, #20]
10001886:	fbb2 f3f3 	udiv	r3, r2, r3
1000188a:	ee07 3a90 	vmov	s15, r3
1000188e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001892:	ed97 7a07 	vldr	s14, [r7, #28]
10001896:	ee67 7a27 	vmul.f32	s15, s14, s15
1000189a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000189e:	e012      	b.n	100018c6 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
100018a0:	4a2f      	ldr	r2, [pc, #188]	; (10001960 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
100018a2:	697b      	ldr	r3, [r7, #20]
100018a4:	fbb2 f3f3 	udiv	r3, r2, r3
100018a8:	ee07 3a90 	vmov	s15, r3
100018ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
100018b0:	ed97 7a07 	vldr	s14, [r7, #28]
100018b4:	ee67 7a27 	vmul.f32	s15, s14, s15
100018b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100018bc:	e003      	b.n	100018c6 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
100018be:	f04f 0300 	mov.w	r3, #0
100018c2:	61fb      	str	r3, [r7, #28]
      break;
100018c4:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
100018c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018ca:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100018ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100018d2:	3301      	adds	r3, #1
100018d4:	ee07 3a90 	vmov	s15, r3
100018d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100018dc:	edd7 6a07 	vldr	s13, [r7, #28]
100018e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
100018e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100018e8:	ee17 2a90 	vmov	r2, s15
100018ec:	687b      	ldr	r3, [r7, #4]
100018ee:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
100018f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018f4:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100018f8:	0a1b      	lsrs	r3, r3, #8
100018fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100018fe:	3301      	adds	r3, #1
10001900:	ee07 3a90 	vmov	s15, r3
10001904:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001908:	edd7 6a07 	vldr	s13, [r7, #28]
1000190c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001914:	ee17 2a90 	vmov	r2, s15
10001918:	687b      	ldr	r3, [r7, #4]
1000191a:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
1000191c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001920:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001924:	0c1b      	lsrs	r3, r3, #16
10001926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000192a:	3301      	adds	r3, #1
1000192c:	ee07 3a90 	vmov	s15, r3
10001930:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001934:	edd7 6a07 	vldr	s13, [r7, #28]
10001938:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000193c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001940:	ee17 2a90 	vmov	r2, s15
10001944:	687b      	ldr	r3, [r7, #4]
10001946:	609a      	str	r2, [r3, #8]
}
10001948:	bf00      	nop
1000194a:	3724      	adds	r7, #36	; 0x24
1000194c:	46bd      	mov	sp, r7
1000194e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001952:	4770      	bx	lr
10001954:	46000000 	.word	0x46000000
10001958:	03d09000 	.word	0x03d09000
1000195c:	016e3600 	.word	0x016e3600
10001960:	003d0900 	.word	0x003d0900

10001964 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10001964:	b580      	push	{r7, lr}
10001966:	b082      	sub	sp, #8
10001968:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
1000196a:	2300      	movs	r3, #0
1000196c:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
1000196e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001972:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001976:	f003 030f 	and.w	r3, r3, #15
1000197a:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
1000197c:	687b      	ldr	r3, [r7, #4]
1000197e:	2b09      	cmp	r3, #9
10001980:	d901      	bls.n	10001986 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10001982:	2309      	movs	r3, #9
10001984:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10001986:	f000 f80f 	bl	100019a8 <HAL_RCC_GetMCUSSFreq>
1000198a:	4602      	mov	r2, r0
1000198c:	687b      	ldr	r3, [r7, #4]
1000198e:	fa22 f303 	lsr.w	r3, r2, r3
}
10001992:	4618      	mov	r0, r3
10001994:	3708      	adds	r7, #8
10001996:	46bd      	mov	sp, r7
10001998:	bd80      	pop	{r7, pc}

1000199a <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
1000199a:	b580      	push	{r7, lr}
1000199c:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
1000199e:	f7ff ffe1 	bl	10001964 <HAL_RCC_GetMCUFreq>
100019a2:	4603      	mov	r3, r0
#endif
}
100019a4:	4618      	mov	r0, r3
100019a6:	bd80      	pop	{r7, pc}

100019a8 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
100019a8:	b580      	push	{r7, lr}
100019aa:	b084      	sub	sp, #16
100019ac:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
100019ae:	2300      	movs	r3, #0
100019b0:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
100019b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100019b8:	f003 0303 	and.w	r3, r3, #3
100019bc:	2b03      	cmp	r3, #3
100019be:	d822      	bhi.n	10001a06 <HAL_RCC_GetMCUSSFreq+0x5e>
100019c0:	a201      	add	r2, pc, #4	; (adr r2, 100019c8 <HAL_RCC_GetMCUSSFreq+0x20>)
100019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100019c6:	bf00      	nop
100019c8:	100019e7 	.word	0x100019e7
100019cc:	100019fb 	.word	0x100019fb
100019d0:	10001a01 	.word	0x10001a01
100019d4:	100019d9 	.word	0x100019d9
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100019d8:	463b      	mov	r3, r7
100019da:	4618      	mov	r0, r3
100019dc:	f7ff fec8 	bl	10001770 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
100019e0:	683b      	ldr	r3, [r7, #0]
100019e2:	60fb      	str	r3, [r7, #12]
      break;
100019e4:	e00f      	b.n	10001a06 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100019e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019ea:	699b      	ldr	r3, [r3, #24]
100019ec:	f003 0303 	and.w	r3, r3, #3
100019f0:	4a07      	ldr	r2, [pc, #28]	; (10001a10 <HAL_RCC_GetMCUSSFreq+0x68>)
100019f2:	fa22 f303 	lsr.w	r3, r2, r3
100019f6:	60fb      	str	r3, [r7, #12]

      break;
100019f8:	e005      	b.n	10001a06 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
100019fa:	4b06      	ldr	r3, [pc, #24]	; (10001a14 <HAL_RCC_GetMCUSSFreq+0x6c>)
100019fc:	60fb      	str	r3, [r7, #12]
      break;
100019fe:	e002      	b.n	10001a06 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10001a00:	4b05      	ldr	r3, [pc, #20]	; (10001a18 <HAL_RCC_GetMCUSSFreq+0x70>)
10001a02:	60fb      	str	r3, [r7, #12]
      break;
10001a04:	bf00      	nop
  }

  return mcussfreq;
10001a06:	68fb      	ldr	r3, [r7, #12]
}
10001a08:	4618      	mov	r0, r3
10001a0a:	3710      	adds	r7, #16
10001a0c:	46bd      	mov	sp, r7
10001a0e:	bd80      	pop	{r7, pc}
10001a10:	03d09000 	.word	0x03d09000
10001a14:	016e3600 	.word	0x016e3600
10001a18:	003d0900 	.word	0x003d0900

10001a1c <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10001a1c:	b580      	push	{r7, lr}
10001a1e:	b084      	sub	sp, #16
10001a20:	af00      	add	r7, sp, #0
10001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10001a24:	687b      	ldr	r3, [r7, #4]
10001a26:	681b      	ldr	r3, [r3, #0]
10001a28:	2b00      	cmp	r3, #0
10001a2a:	f000 8171 	beq.w	10001d10 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10001a2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001a34:	f003 0307 	and.w	r3, r3, #7
10001a38:	2b02      	cmp	r3, #2
10001a3a:	d108      	bne.n	10001a4e <RCCEx_PLL2_Config+0x32>
10001a3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001a42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a4a:	f000 815f 	beq.w	10001d0c <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10001a4e:	687b      	ldr	r3, [r7, #4]
10001a50:	681b      	ldr	r3, [r3, #0]
10001a52:	2b02      	cmp	r3, #2
10001a54:	f040 8130 	bne.w	10001cb8 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001a58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001a5e:	f003 0303 	and.w	r3, r3, #3
10001a62:	2b00      	cmp	r3, #0
10001a64:	d008      	beq.n	10001a78 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10001a66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001a6c:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001a70:	2b01      	cmp	r3, #1
10001a72:	d001      	beq.n	10001a78 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10001a74:	2301      	movs	r3, #1
10001a76:	e14c      	b.n	10001d12 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10001a78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001a80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001a88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10001a8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001a94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001a98:	f023 0301 	bic.w	r3, r3, #1
10001a9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001aa0:	f7fe fcfe 	bl	100004a0 <HAL_GetTick>
10001aa4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001aa6:	e008      	b.n	10001aba <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001aa8:	f7fe fcfa 	bl	100004a0 <HAL_GetTick>
10001aac:	4602      	mov	r2, r0
10001aae:	68fb      	ldr	r3, [r7, #12]
10001ab0:	1ad3      	subs	r3, r2, r3
10001ab2:	2b64      	cmp	r3, #100	; 0x64
10001ab4:	d901      	bls.n	10001aba <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10001ab6:	2303      	movs	r3, #3
10001ab8:	e12b      	b.n	10001d12 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001aba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001ac2:	f003 0302 	and.w	r3, r3, #2
10001ac6:	2b02      	cmp	r3, #2
10001ac8:	d0ee      	beq.n	10001aa8 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10001aca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ace:	6a1b      	ldr	r3, [r3, #32]
10001ad0:	f003 0303 	and.w	r3, r3, #3
10001ad4:	2b02      	cmp	r3, #2
10001ad6:	d107      	bne.n	10001ae8 <RCCEx_PLL2_Config+0xcc>
10001ad8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001adc:	6a1b      	ldr	r3, [r3, #32]
10001ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001ae6:	d00e      	beq.n	10001b06 <RCCEx_PLL2_Config+0xea>
10001ae8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001aec:	6a1b      	ldr	r3, [r3, #32]
10001aee:	f003 0303 	and.w	r3, r3, #3
10001af2:	2b03      	cmp	r3, #3
10001af4:	d112      	bne.n	10001b1c <RCCEx_PLL2_Config+0x100>
10001af6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001afa:	6a1b      	ldr	r3, [r3, #32]
10001afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001b04:	d10a      	bne.n	10001b1c <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10001b06:	687b      	ldr	r3, [r7, #4]
10001b08:	685a      	ldr	r2, [r3, #4]
10001b0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001b10:	f003 0303 	and.w	r3, r3, #3
10001b14:	429a      	cmp	r2, r3
10001b16:	d00c      	beq.n	10001b32 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10001b18:	2301      	movs	r3, #1
10001b1a:	e0fa      	b.n	10001d12 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10001b1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001b22:	f023 0203 	bic.w	r2, r3, #3
10001b26:	687b      	ldr	r3, [r7, #4]
10001b28:	685b      	ldr	r3, [r3, #4]
10001b2a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001b2e:	4313      	orrs	r3, r2
10001b30:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10001b32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b36:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
10001b3a:	4b78      	ldr	r3, [pc, #480]	; (10001d1c <RCCEx_PLL2_Config+0x300>)
10001b3c:	4013      	ands	r3, r2
10001b3e:	687a      	ldr	r2, [r7, #4]
10001b40:	68d2      	ldr	r2, [r2, #12]
10001b42:	1e51      	subs	r1, r2, #1
10001b44:	687a      	ldr	r2, [r7, #4]
10001b46:	6892      	ldr	r2, [r2, #8]
10001b48:	3a01      	subs	r2, #1
10001b4a:	0412      	lsls	r2, r2, #16
10001b4c:	430a      	orrs	r2, r1
10001b4e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001b52:	4313      	orrs	r3, r2
10001b54:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
10001b58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001b60:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10001b64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10001b68:	687a      	ldr	r2, [r7, #4]
10001b6a:	6912      	ldr	r2, [r2, #16]
10001b6c:	1e51      	subs	r1, r2, #1
10001b6e:	687a      	ldr	r2, [r7, #4]
10001b70:	6952      	ldr	r2, [r2, #20]
10001b72:	3a01      	subs	r2, #1
10001b74:	0212      	lsls	r2, r2, #8
10001b76:	4311      	orrs	r1, r2
10001b78:	687a      	ldr	r2, [r7, #4]
10001b7a:	6992      	ldr	r2, [r2, #24]
10001b7c:	3a01      	subs	r2, #1
10001b7e:	0412      	lsls	r2, r2, #16
10001b80:	430a      	orrs	r2, r1
10001b82:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001b86:	4313      	orrs	r3, r2
10001b88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10001b8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001b94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10001b9c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10001ba0:	687b      	ldr	r3, [r7, #4]
10001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001ba4:	2b02      	cmp	r3, #2
10001ba6:	d003      	beq.n	10001bb0 <RCCEx_PLL2_Config+0x194>
10001ba8:	687b      	ldr	r3, [r7, #4]
10001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001bac:	2b00      	cmp	r3, #0
10001bae:	d10c      	bne.n	10001bca <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10001bb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001bb8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001bbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001bc0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001bc4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
10001bc8:	e00f      	b.n	10001bea <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10001bca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001bd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001bda:	687a      	ldr	r2, [r7, #4]
10001bdc:	6a12      	ldr	r2, [r2, #32]
10001bde:	00d2      	lsls	r2, r2, #3
10001be0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001be4:	4313      	orrs	r3, r2
10001be6:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10001bea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001bf2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10001bfa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001bfe:	687b      	ldr	r3, [r7, #4]
10001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001c02:	2b02      	cmp	r3, #2
10001c04:	d124      	bne.n	10001c50 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
10001c06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
10001c0e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001c12:	687b      	ldr	r3, [r7, #4]
10001c14:	6a99      	ldr	r1, [r3, #40]	; 0x28
10001c16:	687b      	ldr	r3, [r7, #4]
10001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001c1a:	4319      	orrs	r1, r3
10001c1c:	687b      	ldr	r3, [r7, #4]
10001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001c20:	4319      	orrs	r1, r3
10001c22:	687b      	ldr	r3, [r7, #4]
10001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001c26:	4319      	orrs	r1, r3
10001c28:	687b      	ldr	r3, [r7, #4]
10001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001c2c:	041b      	lsls	r3, r3, #16
10001c2e:	430b      	orrs	r3, r1
10001c30:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001c34:	4313      	orrs	r3, r2
10001c36:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
10001c3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001c42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001c46:	f043 0304 	orr.w	r3, r3, #4
10001c4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
10001c4e:	e009      	b.n	10001c64 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10001c50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001c58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001c5c:	f023 0304 	bic.w	r3, r3, #4
10001c60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10001c64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001c6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001c70:	f043 0301 	orr.w	r3, r3, #1
10001c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001c78:	f7fe fc12 	bl	100004a0 <HAL_GetTick>
10001c7c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001c7e:	e008      	b.n	10001c92 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001c80:	f7fe fc0e 	bl	100004a0 <HAL_GetTick>
10001c84:	4602      	mov	r2, r0
10001c86:	68fb      	ldr	r3, [r7, #12]
10001c88:	1ad3      	subs	r3, r2, r3
10001c8a:	2b64      	cmp	r3, #100	; 0x64
10001c8c:	d901      	bls.n	10001c92 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10001c8e:	2303      	movs	r3, #3
10001c90:	e03f      	b.n	10001d12 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001c92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001c9a:	f003 0302 	and.w	r3, r3, #2
10001c9e:	2b02      	cmp	r3, #2
10001ca0:	d1ee      	bne.n	10001c80 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10001ca2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001caa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001cae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10001cb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
10001cb6:	e02b      	b.n	10001d10 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10001cb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001cc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001cc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10001ccc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001cd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001cd8:	f023 0301 	bic.w	r3, r3, #1
10001cdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001ce0:	f7fe fbde 	bl	100004a0 <HAL_GetTick>
10001ce4:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001ce6:	e008      	b.n	10001cfa <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001ce8:	f7fe fbda 	bl	100004a0 <HAL_GetTick>
10001cec:	4602      	mov	r2, r0
10001cee:	68fb      	ldr	r3, [r7, #12]
10001cf0:	1ad3      	subs	r3, r2, r3
10001cf2:	2b64      	cmp	r3, #100	; 0x64
10001cf4:	d901      	bls.n	10001cfa <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
10001cf6:	2303      	movs	r3, #3
10001cf8:	e00b      	b.n	10001d12 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001cfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001d02:	f003 0302 	and.w	r3, r3, #2
10001d06:	2b02      	cmp	r3, #2
10001d08:	d0ee      	beq.n	10001ce8 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10001d0a:	e001      	b.n	10001d10 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10001d0c:	2301      	movs	r3, #1
10001d0e:	e000      	b.n	10001d12 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10001d10:	2300      	movs	r3, #0

}
10001d12:	4618      	mov	r0, r3
10001d14:	3710      	adds	r7, #16
10001d16:	46bd      	mov	sp, r7
10001d18:	bd80      	pop	{r7, pc}
10001d1a:	bf00      	nop
10001d1c:	ffc0fe00 	.word	0xffc0fe00

10001d20 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10001d20:	b580      	push	{r7, lr}
10001d22:	b084      	sub	sp, #16
10001d24:	af00      	add	r7, sp, #0
10001d26:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
10001d28:	687b      	ldr	r3, [r7, #4]
10001d2a:	681b      	ldr	r3, [r3, #0]
10001d2c:	2b00      	cmp	r3, #0
10001d2e:	f000 815a 	beq.w	10001fe6 <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10001d32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001d38:	f003 0303 	and.w	r3, r3, #3
10001d3c:	2b03      	cmp	r3, #3
10001d3e:	d108      	bne.n	10001d52 <RCCEx_PLL3_Config+0x32>
10001d40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001d4e:	f000 8148 	beq.w	10001fe2 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10001d52:	687b      	ldr	r3, [r7, #4]
10001d54:	681b      	ldr	r3, [r3, #0]
10001d56:	2b02      	cmp	r3, #2
10001d58:	f040 8119 	bne.w	10001f8e <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10001d5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d60:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001d64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001d6c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10001d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d74:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001d78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001d7c:	f023 0301 	bic.w	r3, r3, #1
10001d80:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001d84:	f7fe fb8c 	bl	100004a0 <HAL_GetTick>
10001d88:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10001d8a:	e008      	b.n	10001d9e <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001d8c:	f7fe fb88 	bl	100004a0 <HAL_GetTick>
10001d90:	4602      	mov	r2, r0
10001d92:	68fb      	ldr	r3, [r7, #12]
10001d94:	1ad3      	subs	r3, r2, r3
10001d96:	2b64      	cmp	r3, #100	; 0x64
10001d98:	d901      	bls.n	10001d9e <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10001d9a:	2303      	movs	r3, #3
10001d9c:	e124      	b.n	10001fe8 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10001d9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001da2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001da6:	f003 0302 	and.w	r3, r3, #2
10001daa:	2b02      	cmp	r3, #2
10001dac:	d0ee      	beq.n	10001d8c <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10001dae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001db2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001db6:	f023 0203 	bic.w	r2, r3, #3
10001dba:	687b      	ldr	r3, [r7, #4]
10001dbc:	685b      	ldr	r3, [r3, #4]
10001dbe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001dc2:	4313      	orrs	r3, r2
10001dc4:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10001dc8:	e008      	b.n	10001ddc <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001dca:	f7fe fb69 	bl	100004a0 <HAL_GetTick>
10001dce:	4602      	mov	r2, r0
10001dd0:	68fb      	ldr	r3, [r7, #12]
10001dd2:	1ad3      	subs	r3, r2, r3
10001dd4:	2b64      	cmp	r3, #100	; 0x64
10001dd6:	d901      	bls.n	10001ddc <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10001dd8:	2303      	movs	r3, #3
10001dda:	e105      	b.n	10001fe8 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10001ddc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001de0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001dec:	d1ed      	bne.n	10001dca <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10001dee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001df2:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001df6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10001dfa:	687b      	ldr	r3, [r7, #4]
10001dfc:	69db      	ldr	r3, [r3, #28]
10001dfe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001e02:	4313      	orrs	r3, r2
10001e04:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10001e08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e0c:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10001e10:	4b77      	ldr	r3, [pc, #476]	; (10001ff0 <RCCEx_PLL3_Config+0x2d0>)
10001e12:	4013      	ands	r3, r2
10001e14:	687a      	ldr	r2, [r7, #4]
10001e16:	68d2      	ldr	r2, [r2, #12]
10001e18:	1e51      	subs	r1, r2, #1
10001e1a:	687a      	ldr	r2, [r7, #4]
10001e1c:	6892      	ldr	r2, [r2, #8]
10001e1e:	3a01      	subs	r2, #1
10001e20:	0412      	lsls	r2, r2, #16
10001e22:	430a      	orrs	r2, r1
10001e24:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001e28:	4313      	orrs	r3, r2
10001e2a:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
10001e2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e32:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001e36:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10001e3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10001e3e:	687a      	ldr	r2, [r7, #4]
10001e40:	6912      	ldr	r2, [r2, #16]
10001e42:	1e51      	subs	r1, r2, #1
10001e44:	687a      	ldr	r2, [r7, #4]
10001e46:	6952      	ldr	r2, [r2, #20]
10001e48:	3a01      	subs	r2, #1
10001e4a:	0212      	lsls	r2, r2, #8
10001e4c:	4311      	orrs	r1, r2
10001e4e:	687a      	ldr	r2, [r7, #4]
10001e50:	6992      	ldr	r2, [r2, #24]
10001e52:	3a01      	subs	r2, #1
10001e54:	0412      	lsls	r2, r2, #16
10001e56:	430a      	orrs	r2, r1
10001e58:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001e5c:	4313      	orrs	r3, r2
10001e5e:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10001e62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e66:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001e6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10001e72:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
10001e76:	687b      	ldr	r3, [r7, #4]
10001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001e7a:	2b02      	cmp	r3, #2
10001e7c:	d003      	beq.n	10001e86 <RCCEx_PLL3_Config+0x166>
10001e7e:	687b      	ldr	r3, [r7, #4]
10001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001e82:	2b00      	cmp	r3, #0
10001e84:	d10c      	bne.n	10001ea0 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
10001e86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e8a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001e8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001e96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001e9a:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
10001e9e:	e00f      	b.n	10001ec0 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10001ea0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ea4:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001eac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001eb0:	687a      	ldr	r2, [r7, #4]
10001eb2:	6a12      	ldr	r2, [r2, #32]
10001eb4:	00d2      	lsls	r2, r2, #3
10001eb6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001eba:	4313      	orrs	r3, r2
10001ebc:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10001ec0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ec4:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001ec8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10001ed0:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10001ed4:	687b      	ldr	r3, [r7, #4]
10001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001ed8:	2b02      	cmp	r3, #2
10001eda:	d124      	bne.n	10001f26 <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10001edc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ee0:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
10001ee4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001ee8:	687b      	ldr	r3, [r7, #4]
10001eea:	6a99      	ldr	r1, [r3, #40]	; 0x28
10001eec:	687b      	ldr	r3, [r7, #4]
10001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001ef0:	4319      	orrs	r1, r3
10001ef2:	687b      	ldr	r3, [r7, #4]
10001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001ef6:	4319      	orrs	r1, r3
10001ef8:	687b      	ldr	r3, [r7, #4]
10001efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001efc:	4319      	orrs	r1, r3
10001efe:	687b      	ldr	r3, [r7, #4]
10001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10001f02:	041b      	lsls	r3, r3, #16
10001f04:	430b      	orrs	r3, r1
10001f06:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001f0a:	4313      	orrs	r3, r2
10001f0c:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10001f10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f14:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001f18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f1c:	f043 0304 	orr.w	r3, r3, #4
10001f20:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
10001f24:	e009      	b.n	10001f3a <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10001f26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f2a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001f2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f32:	f023 0304 	bic.w	r3, r3, #4
10001f36:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10001f3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f3e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001f42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f46:	f043 0301 	orr.w	r3, r3, #1
10001f4a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001f4e:	f7fe faa7 	bl	100004a0 <HAL_GetTick>
10001f52:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001f54:	e008      	b.n	10001f68 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001f56:	f7fe faa3 	bl	100004a0 <HAL_GetTick>
10001f5a:	4602      	mov	r2, r0
10001f5c:	68fb      	ldr	r3, [r7, #12]
10001f5e:	1ad3      	subs	r3, r2, r3
10001f60:	2b64      	cmp	r3, #100	; 0x64
10001f62:	d901      	bls.n	10001f68 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10001f64:	2303      	movs	r3, #3
10001f66:	e03f      	b.n	10001fe8 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001f68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f6c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001f70:	f003 0302 	and.w	r3, r3, #2
10001f74:	2b02      	cmp	r3, #2
10001f76:	d1ee      	bne.n	10001f56 <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10001f78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f7c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001f80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f84:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10001f88:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10001f8c:	e02b      	b.n	10001fe6 <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10001f8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f92:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001f96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001f9e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10001fa2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fa6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001faa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001fae:	f023 0301 	bic.w	r3, r3, #1
10001fb2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001fb6:	f7fe fa73 	bl	100004a0 <HAL_GetTick>
10001fba:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10001fbc:	e008      	b.n	10001fd0 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001fbe:	f7fe fa6f 	bl	100004a0 <HAL_GetTick>
10001fc2:	4602      	mov	r2, r0
10001fc4:	68fb      	ldr	r3, [r7, #12]
10001fc6:	1ad3      	subs	r3, r2, r3
10001fc8:	2b64      	cmp	r3, #100	; 0x64
10001fca:	d901      	bls.n	10001fd0 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10001fcc:	2303      	movs	r3, #3
10001fce:	e00b      	b.n	10001fe8 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10001fd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fd4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001fd8:	f003 0302 	and.w	r3, r3, #2
10001fdc:	2b02      	cmp	r3, #2
10001fde:	d0ee      	beq.n	10001fbe <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10001fe0:	e001      	b.n	10001fe6 <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10001fe2:	2301      	movs	r3, #1
10001fe4:	e000      	b.n	10001fe8 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10001fe6:	2300      	movs	r3, #0
}
10001fe8:	4618      	mov	r0, r3
10001fea:	3710      	adds	r7, #16
10001fec:	46bd      	mov	sp, r7
10001fee:	bd80      	pop	{r7, pc}
10001ff0:	ffc0fe00 	.word	0xffc0fe00

10001ff4 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10001ff4:	b580      	push	{r7, lr}
10001ff6:	b084      	sub	sp, #16
10001ff8:	af00      	add	r7, sp, #0
10001ffa:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10001ffc:	687b      	ldr	r3, [r7, #4]
10001ffe:	681b      	ldr	r3, [r3, #0]
10002000:	2b00      	cmp	r3, #0
10002002:	f000 8147 	beq.w	10002294 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10002006:	687b      	ldr	r3, [r7, #4]
10002008:	681b      	ldr	r3, [r3, #0]
1000200a:	2b02      	cmp	r3, #2
1000200c:	f040 8119 	bne.w	10002242 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002010:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002014:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002018:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000201c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002020:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10002024:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002028:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000202c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002030:	f023 0301 	bic.w	r3, r3, #1
10002034:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002038:	f7fe fa32 	bl	100004a0 <HAL_GetTick>
1000203c:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
1000203e:	e008      	b.n	10002052 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002040:	f7fe fa2e 	bl	100004a0 <HAL_GetTick>
10002044:	4602      	mov	r2, r0
10002046:	68fb      	ldr	r3, [r7, #12]
10002048:	1ad3      	subs	r3, r2, r3
1000204a:	2b64      	cmp	r3, #100	; 0x64
1000204c:	d901      	bls.n	10002052 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
1000204e:	2303      	movs	r3, #3
10002050:	e121      	b.n	10002296 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002052:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002056:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000205a:	f003 0302 	and.w	r3, r3, #2
1000205e:	2b02      	cmp	r3, #2
10002060:	d0ee      	beq.n	10002040 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10002062:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002066:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000206a:	f023 0203 	bic.w	r2, r3, #3
1000206e:	687b      	ldr	r3, [r7, #4]
10002070:	685b      	ldr	r3, [r3, #4]
10002072:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002076:	4313      	orrs	r3, r2
10002078:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
1000207c:	e008      	b.n	10002090 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000207e:	f7fe fa0f 	bl	100004a0 <HAL_GetTick>
10002082:	4602      	mov	r2, r0
10002084:	68fb      	ldr	r3, [r7, #12]
10002086:	1ad3      	subs	r3, r2, r3
10002088:	2b64      	cmp	r3, #100	; 0x64
1000208a:	d901      	bls.n	10002090 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
1000208c:	2303      	movs	r3, #3
1000208e:	e102      	b.n	10002296 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002090:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002094:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000209c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100020a0:	d1ed      	bne.n	1000207e <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
100020a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020a6:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
100020aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
100020ae:	687b      	ldr	r3, [r7, #4]
100020b0:	69db      	ldr	r3, [r3, #28]
100020b2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100020b6:	4313      	orrs	r3, r2
100020b8:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
100020bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020c0:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
100020c4:	4b76      	ldr	r3, [pc, #472]	; (100022a0 <RCCEx_PLL4_Config+0x2ac>)
100020c6:	4013      	ands	r3, r2
100020c8:	687a      	ldr	r2, [r7, #4]
100020ca:	68d2      	ldr	r2, [r2, #12]
100020cc:	1e51      	subs	r1, r2, #1
100020ce:	687a      	ldr	r2, [r7, #4]
100020d0:	6892      	ldr	r2, [r2, #8]
100020d2:	3a01      	subs	r2, #1
100020d4:	0412      	lsls	r2, r2, #16
100020d6:	430a      	orrs	r2, r1
100020d8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100020dc:	4313      	orrs	r3, r2
100020de:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
100020e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020e6:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100020ea:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100020ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100020f2:	687a      	ldr	r2, [r7, #4]
100020f4:	6912      	ldr	r2, [r2, #16]
100020f6:	1e51      	subs	r1, r2, #1
100020f8:	687a      	ldr	r2, [r7, #4]
100020fa:	6952      	ldr	r2, [r2, #20]
100020fc:	3a01      	subs	r2, #1
100020fe:	0212      	lsls	r2, r2, #8
10002100:	4311      	orrs	r1, r2
10002102:	687a      	ldr	r2, [r7, #4]
10002104:	6992      	ldr	r2, [r2, #24]
10002106:	3a01      	subs	r2, #1
10002108:	0412      	lsls	r2, r2, #16
1000210a:	430a      	orrs	r2, r1
1000210c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002110:	4313      	orrs	r3, r2
10002112:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10002116:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000211a:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000211e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10002126:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
1000212a:	687b      	ldr	r3, [r7, #4]
1000212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000212e:	2b02      	cmp	r3, #2
10002130:	d003      	beq.n	1000213a <RCCEx_PLL4_Config+0x146>
10002132:	687b      	ldr	r3, [r7, #4]
10002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002136:	2b00      	cmp	r3, #0
10002138:	d10c      	bne.n	10002154 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
1000213a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000213e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002142:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000214a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000214e:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
10002152:	e00f      	b.n	10002174 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10002154:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002158:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000215c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002160:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002164:	687a      	ldr	r2, [r7, #4]
10002166:	6a12      	ldr	r2, [r2, #32]
10002168:	00d2      	lsls	r2, r2, #3
1000216a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000216e:	4313      	orrs	r3, r2
10002170:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10002174:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002178:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000217c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002184:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002188:	687b      	ldr	r3, [r7, #4]
1000218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000218c:	2b02      	cmp	r3, #2
1000218e:	d124      	bne.n	100021da <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10002190:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002194:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
10002198:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
1000219c:	687b      	ldr	r3, [r7, #4]
1000219e:	6a99      	ldr	r1, [r3, #40]	; 0x28
100021a0:	687b      	ldr	r3, [r7, #4]
100021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100021a4:	4319      	orrs	r1, r3
100021a6:	687b      	ldr	r3, [r7, #4]
100021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100021aa:	4319      	orrs	r1, r3
100021ac:	687b      	ldr	r3, [r7, #4]
100021ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100021b0:	4319      	orrs	r1, r3
100021b2:	687b      	ldr	r3, [r7, #4]
100021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100021b6:	041b      	lsls	r3, r3, #16
100021b8:	430b      	orrs	r3, r1
100021ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100021be:	4313      	orrs	r3, r2
100021c0:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
100021c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021c8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100021cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100021d0:	f043 0304 	orr.w	r3, r3, #4
100021d4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
100021d8:	e009      	b.n	100021ee <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
100021da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021de:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100021e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100021e6:	f023 0304 	bic.w	r3, r3, #4
100021ea:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
100021ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021f2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100021f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100021fa:	f043 0301 	orr.w	r3, r3, #1
100021fe:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002202:	f7fe f94d 	bl	100004a0 <HAL_GetTick>
10002206:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002208:	e008      	b.n	1000221c <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000220a:	f7fe f949 	bl	100004a0 <HAL_GetTick>
1000220e:	4602      	mov	r2, r0
10002210:	68fb      	ldr	r3, [r7, #12]
10002212:	1ad3      	subs	r3, r2, r3
10002214:	2b64      	cmp	r3, #100	; 0x64
10002216:	d901      	bls.n	1000221c <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10002218:	2303      	movs	r3, #3
1000221a:	e03c      	b.n	10002296 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
1000221c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002220:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002224:	f003 0302 	and.w	r3, r3, #2
10002228:	2b02      	cmp	r3, #2
1000222a:	d1ee      	bne.n	1000220a <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
1000222c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002230:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002234:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002238:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000223c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002240:	e028      	b.n	10002294 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002242:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002246:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000224a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000224e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002252:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10002256:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000225a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000225e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002262:	f023 0301 	bic.w	r3, r3, #1
10002266:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000226a:	f7fe f919 	bl	100004a0 <HAL_GetTick>
1000226e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002270:	e008      	b.n	10002284 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002272:	f7fe f915 	bl	100004a0 <HAL_GetTick>
10002276:	4602      	mov	r2, r0
10002278:	68fb      	ldr	r3, [r7, #12]
1000227a:	1ad3      	subs	r3, r2, r3
1000227c:	2b64      	cmp	r3, #100	; 0x64
1000227e:	d901      	bls.n	10002284 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10002280:	2303      	movs	r3, #3
10002282:	e008      	b.n	10002296 <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002284:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002288:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000228c:	f003 0302 	and.w	r3, r3, #2
10002290:	2b02      	cmp	r3, #2
10002292:	d0ee      	beq.n	10002272 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10002294:	2300      	movs	r3, #0
}
10002296:	4618      	mov	r0, r3
10002298:	3710      	adds	r7, #16
1000229a:	46bd      	mov	sp, r7
1000229c:	bd80      	pop	{r7, pc}
1000229e:	bf00      	nop
100022a0:	ffc0fe00 	.word	0xffc0fe00

100022a4 <memset>:
100022a4:	4402      	add	r2, r0
100022a6:	4603      	mov	r3, r0
100022a8:	4293      	cmp	r3, r2
100022aa:	d100      	bne.n	100022ae <memset+0xa>
100022ac:	4770      	bx	lr
100022ae:	f803 1b01 	strb.w	r1, [r3], #1
100022b2:	e7f9      	b.n	100022a8 <memset+0x4>

100022b4 <__libc_init_array>:
100022b4:	b570      	push	{r4, r5, r6, lr}
100022b6:	4d0d      	ldr	r5, [pc, #52]	; (100022ec <__libc_init_array+0x38>)
100022b8:	4c0d      	ldr	r4, [pc, #52]	; (100022f0 <__libc_init_array+0x3c>)
100022ba:	1b64      	subs	r4, r4, r5
100022bc:	10a4      	asrs	r4, r4, #2
100022be:	2600      	movs	r6, #0
100022c0:	42a6      	cmp	r6, r4
100022c2:	d109      	bne.n	100022d8 <__libc_init_array+0x24>
100022c4:	4d0b      	ldr	r5, [pc, #44]	; (100022f4 <__libc_init_array+0x40>)
100022c6:	4c0c      	ldr	r4, [pc, #48]	; (100022f8 <__libc_init_array+0x44>)
100022c8:	f000 f818 	bl	100022fc <_init>
100022cc:	1b64      	subs	r4, r4, r5
100022ce:	10a4      	asrs	r4, r4, #2
100022d0:	2600      	movs	r6, #0
100022d2:	42a6      	cmp	r6, r4
100022d4:	d105      	bne.n	100022e2 <__libc_init_array+0x2e>
100022d6:	bd70      	pop	{r4, r5, r6, pc}
100022d8:	f855 3b04 	ldr.w	r3, [r5], #4
100022dc:	4798      	blx	r3
100022de:	3601      	adds	r6, #1
100022e0:	e7ee      	b.n	100022c0 <__libc_init_array+0xc>
100022e2:	f855 3b04 	ldr.w	r3, [r5], #4
100022e6:	4798      	blx	r3
100022e8:	3601      	adds	r6, #1
100022ea:	e7f2      	b.n	100022d2 <__libc_init_array+0x1e>
100022ec:	10002364 	.word	0x10002364
100022f0:	10002364 	.word	0x10002364
100022f4:	10002364 	.word	0x10002364
100022f8:	10002368 	.word	0x10002368

100022fc <_init>:
100022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100022fe:	bf00      	nop
10002300:	bcf8      	pop	{r3, r4, r5, r6, r7}
10002302:	bc08      	pop	{r3}
10002304:	469e      	mov	lr, r3
10002306:	4770      	bx	lr

10002308 <_fini>:
10002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000230a:	bf00      	nop
1000230c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000230e:	bc08      	pop	{r3}
10002310:	469e      	mov	lr, r3
10002312:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10002314 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10002314:	f8df d034 	ldr.w	sp, [pc, #52]	; 1000234c <LoopForever+0x2>
  movs  r1, #0
10002318:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000231a:	e003      	b.n	10002324 <LoopCopyDataInit>

1000231c <CopyDataInit>:
  ldr  r3, =_sidata
1000231c:	4b0c      	ldr	r3, [pc, #48]	; (10002350 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000231e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10002320:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10002322:	3104      	adds	r1, #4

10002324 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10002324:	480b      	ldr	r0, [pc, #44]	; (10002354 <LoopForever+0xa>)
  ldr  r3, =_edata
10002326:	4b0c      	ldr	r3, [pc, #48]	; (10002358 <LoopForever+0xe>)
  adds  r2, r0, r1
10002328:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000232a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000232c:	d3f6      	bcc.n	1000231c <CopyDataInit>
  ldr  r2, =_sbss
1000232e:	4a0b      	ldr	r2, [pc, #44]	; (1000235c <LoopForever+0x12>)
  b  LoopFillZerobss
10002330:	e002      	b.n	10002338 <LoopFillZerobss>

10002332 <FillZerobss>:
  movs  r3, #0
10002332:	2300      	movs	r3, #0
  str  r3, [r2], #4
10002334:	f842 3b04 	str.w	r3, [r2], #4

10002338 <LoopFillZerobss>:
  ldr  r3, = _ebss
10002338:	4b09      	ldr	r3, [pc, #36]	; (10002360 <LoopForever+0x16>)
  cmp  r2, r3
1000233a:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000233c:	d3f9      	bcc.n	10002332 <FillZerobss>
  bl  SystemInit
1000233e:	f7fd fe7f 	bl	10000040 <SystemInit>
 bl __libc_init_array
10002342:	f7ff ffb7 	bl	100022b4 <__libc_init_array>
  bl main
10002346:	f7fd fea1 	bl	1000008c <main>

1000234a <LoopForever>:
    b LoopForever
1000234a:	e7fe      	b.n	1000234a <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000234c:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10002350:	1000236c 	.word	0x1000236c
  ldr  r0, =_sdata
10002354:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10002358:	1002000c 	.word	0x1002000c
  ldr  r2, =_sbss
1000235c:	1002000c 	.word	0x1002000c
  ldr  r3, = _ebss
10002360:	1002002c 	.word	0x1002002c
